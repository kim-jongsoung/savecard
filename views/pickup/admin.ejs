<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>공항 픽업 관리</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
  <!-- Select2 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
  <style>
    .date-warning { background: #fff3cd; border-left: 4px solid #ff6b6b; }
    .early-morning { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
    .pickup-card { margin-bottom: 15px; padding: 15px; border: 2px solid #ddd; border-radius: 8px; }
    .calendar-grid { display: grid; grid-template-columns: repeat(7, 1fr); gap: 8px; }
    .calendar-day { border: 1px solid #ddd; padding: 8px; border-radius: 8px; min-height: 200px; max-height: 200px; overflow-y: auto; }
    .calendar-day.has-pickup { background: #fafafa; border-color: #2196f3; border-width: 2px; }
    .calendar-day.today { background: #fff3cd; border-color: #ff9800; font-weight: bold; border-width: 2px; }
    .calendar-day.closed { background: #ffe0e0; border-color: #dc3545; border-width: 2px; position: relative; }
    .calendar-day.closed::before { content: '🚫 마감'; position: absolute; top: 5px; right: 5px; font-size: 10px; color: #dc3545; font-weight: bold; background: white; padding: 2px 5px; border-radius: 3px; }
    .calendar-header { font-weight: bold; text-align: center; padding: 10px; background: #667eea; color: white; border-radius: 4px; }
    .calendar-date { font-size: 16px; font-weight: bold; margin-bottom: 5px; position: sticky; top: 0; background: white; z-index: 10; padding: 3px 0; }
    .pickup-item { font-size: 11px; padding: 4px 6px; margin: 3px 0; border-radius: 4px; cursor: pointer; border-left: 3px solid; transition: all 0.2s; }
    .pickup-item:hover { transform: translateX(3px); box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
    .pickup-arrival { background: #e3f2fd; border-left-color: #2196f3; color: #1565c0; }
    .pickup-departure { background: #fce4ec; border-left-color: #e91e63; color: #c2185b; }
    .pickup-early { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-left-color: #fbbf24; color: white; }
    .day-summary { font-size: 10px; color: #666; margin-bottom: 5px; padding: 2px 4px; background: #f0f0f0; border-radius: 3px; }
    .date-input-warning { border: 2px solid #dc3545 !important; background: #ffe0e0 !important; }
    
    /* Select2 커스텀 스타일 */
    .select2-container--bootstrap-5 .select2-selection {
      min-height: 38px;
      font-size: 1rem;
    }
    .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
      line-height: 38px;
      padding-left: 12px;
    }
    .select2-container--bootstrap-5 .select2-dropdown {
      font-size: 0.95rem;
    }
    .select2-container--bootstrap-5 .select2-search--dropdown .select2-search__field {
      border: 1px solid #ced4da;
      border-radius: 4px;
      padding: 6px 12px;
    }
  </style>
</head>
<body>
  <div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h2>🚗 공항 픽업 관리</h2>
      <div>
        <button class="btn btn-outline-primary me-2" onclick="location.href='/pickup/flights'">
          <i class="bi bi-airplane"></i> 항공편 관리
        </button>
        <button class="btn btn-outline-info me-2" onclick="location.href='/pickup/settlement'">
          <i class="bi bi-currency-dollar"></i> 정산관리
        </button>
        <button class="btn btn-outline-secondary me-2" onclick="location.href='/pickup/agencies'">
          <i class="bi bi-building"></i> 업체 관리
        </button>
        <button class="btn btn-outline-warning me-2" onclick="showClosedDatesModal()">
          <i class="bi bi-calendar-x"></i> 마감날짜 관리
        </button>
        <button class="btn btn-success me-2" onclick="showAddModal()">
          <i class="bi bi-plus-circle"></i> 새 예약 등록
        </button>
        <button class="btn btn-outline-danger" onclick="logout()">
          <i class="bi bi-box-arrow-right"></i> 로그아웃
        </button>
      </div>
    </div>
    
    <!-- 달력 뷰 (유일한 화면) -->
    <div id="calendarView" class="mb-4">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <button class="btn btn-sm btn-secondary" onclick="changeMonth(-1)">◀ 이전달</button>
        <h4 id="currentMonth"></h4>
        <button class="btn btn-sm btn-secondary" onclick="changeMonth(1)">다음달 ▶</button>
      </div>
      <div id="calendar" class="calendar-grid"></div>
    </div>
  </div>
  
  <!-- 상세 보기 모달 -->
  <div class="modal fade" id="detailModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="detailTitle">예약 상세</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body" id="detailBody">
          <!-- 동적 내용 -->
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
          <button type="button" class="btn btn-warning" onclick="editFromDetail()">
            <i class="bi bi-pencil"></i> 수정
          </button>
          <button type="button" class="btn btn-danger" onclick="deleteFromDetail()">
            <i class="bi bi-trash"></i> 삭제
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 일별 전체보기 모달 -->
  <div class="modal fade" id="dayViewModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="dayViewTitle">📅 날짜별 전체보기</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div class="row">
            <!-- 모바일: 괌출발/도착이 위로 (order-1) -->
            <div class="col-md-6 order-2 order-md-1 mb-4">
              <div class="card">
                <div class="card-header bg-primary text-white">
                  <h6 class="mb-0">🇰🇷 한국 출발/도착 (인천/부산/대구)</h6>
                </div>
                <div class="card-body" id="icnSection">
                  <!-- 통계 -->
                  <div class="alert alert-info mb-3" id="icnStats">
                    <strong>📊 통계</strong><br>
                    <span id="icnStatsContent">로딩중...</span>
                  </div>
                  <!-- 리스트 -->
                  <div id="icnList"></div>
                </div>
              </div>
            </div>
            
            <!-- 모바일: 괌출발/도착이 위로 (order-1) -->
            <div class="col-md-6 order-1 order-md-2 mb-4">
              <div class="card">
                <div class="card-header bg-success text-white">
                  <h6 class="mb-0">🇬🇺 괌 출발/도착</h6>
                </div>
                <div class="card-body" id="gumSection">
                  <!-- 통계 -->
                  <div class="alert alert-success mb-3" id="gumStats">
                    <strong>📊 통계</strong><br>
                    <span id="gumStatsContent">로딩중...</span>
                  </div>
                  <!-- 리스트 -->
                  <div id="gumList"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 마감날짜 관리 모달 -->
  <div class="modal fade" id="closedDatesModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">🚫 마감날짜 관리</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <!-- 마감날짜 등록 폼 -->
          <div class="card mb-3">
            <div class="card-header bg-danger text-white">
              <h6 class="mb-0">새 마감날짜 등록</h6>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-4">
                  <label class="form-label">마감날짜 *</label>
                  <input type="date" class="form-control" id="newClosedDate" required>
                </div>
                <div class="col-md-6">
                  <label class="form-label">사유</label>
                  <input type="text" class="form-control" id="closedReason" placeholder="예: 차량 부족, 연휴 등">
                </div>
                <div class="col-md-2 d-flex align-items-end">
                  <button class="btn btn-danger w-100" onclick="addClosedDate()">
                    <i class="bi bi-plus-circle"></i> 등록
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- 마감날짜 목록 -->
          <div class="card">
            <div class="card-header bg-secondary text-white">
              <h6 class="mb-0">마감날짜 목록</h6>
            </div>
            <div class="card-body">
              <div id="closedDatesList" class="list-group">
                <div class="text-center text-muted py-3">로딩중...</div>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 등록 모달 -->
  <div class="modal fade" id="addModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">새 픽업 등록</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form id="addForm">
            <!-- 항공편 정보 -->
            <h6 class="text-primary mb-3">✈️ 항공편 정보</h6>
            <div class="row">
              <div class="col-md-6 mb-3">
                <label class="form-label">출발일 *</label>
                <input type="date" class="form-control" id="flightDate" onchange="checkClosedDate()" required>
                <div id="closedDateWarning" class="alert alert-danger mt-2" style="display:none;">
                  <strong>⚠️ 마감된 날짜입니다!</strong><br>
                  <span id="closedDateReason"></span>
                </div>
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label">편명 *</label>
                <select class="form-select" id="flightNumber" required>
                  <option value="">편명 선택</option>
                </select>
              </div>
            </div>
            <div id="flightResult" class="alert alert-info mt-2" style="display:none;"></div>
            
            <hr class="my-3">
            
            <!-- 고객 정보 -->
            <h6>👤 고객 정보</h6>
            <div class="row">
              <div class="col-md-4">
                <label class="form-label">업체</label>
                <select class="form-select" id="agencyId"></select>
              </div>
              <div class="col-md-8">
                <label class="form-label">고객명</label>
                <input type="text" class="form-control" id="customerName" required>
              </div>
            </div>
            <div class="row mt-2">
              <div class="col-md-3">
                <label class="form-label">성인 (Adult)</label>
                <input type="number" class="form-control" id="adultCount" min="0" value="0" onchange="updateTotal()">
              </div>
              <div class="col-md-3">
                <label class="form-label">소아 (Child)</label>
                <input type="number" class="form-control" id="childCount" min="0" value="0" onchange="updateTotal()">
              </div>
              <div class="col-md-3">
                <label class="form-label">유아 (Infant)</label>
                <input type="number" class="form-control" id="infantCount" min="0" value="0" onchange="updateTotal()">
              </div>
              <div class="col-md-3">
                <label class="form-label">짐 (Luggage)</label>
                <input type="number" class="form-control" id="luggageCount" min="0" value="0">
              </div>
            </div>
            <div class="alert alert-info mt-2">
              <strong>총 인원:</strong> <span id="totalPassengers">0</span>명
            </div>
            <div class="row mt-2">
              <div class="col-md-4">
                <label class="form-label">호텔</label>
                <input type="text" class="form-control" id="hotelName" list="hotels" required>
                <datalist id="hotels">
                  <option value="Hilton Hotel">
                  <option value="Hyatt Regency">
                  <option value="PIC Guam">
                  <option value="Marriott Resort">
                  <option value="Dusit Thani">
                </datalist>
              </div>
              <div class="col-md-4">
                <label class="form-label">연락처</label>
                <input type="text" class="form-control" id="phone">
              </div>
              <div class="col-md-4">
                <label class="form-label">카톡ID</label>
                <input type="text" class="form-control" id="kakaoId">
              </div>
            </div>
            <div class="mt-2">
              <label class="form-label">메모</label>
              <textarea class="form-control" id="memo" rows="2"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
          <button type="button" class="btn btn-primary" onclick="savePickup()">등록</button>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- jQuery (Select2 의존성) -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  <!-- Select2 JS -->
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  <script>
    let FLIGHTS = {}; // DB에서 로드
    
    let addModalInstance;
    let detailModalInstance;
    let dayViewModalInstance;
    let closedDatesModalInstance;
    let currentCalendarYear = new Date().getFullYear();
    let currentCalendarMonth = new Date().getMonth() + 1;
    let currentPickupData = null;
    let currentDayViewDate = null;
    let allPickups = {}; // ID별 예약 데이터 저장
    let closedDatesCache = []; // 마감날짜 캐시
    
    // 페이지 로드
    document.addEventListener('DOMContentLoaded', () => {
      addModalInstance = new bootstrap.Modal(document.getElementById('addModal'));
      detailModalInstance = new bootstrap.Modal(document.getElementById('detailModal'));
      dayViewModalInstance = new bootstrap.Modal(document.getElementById('dayViewModal'));
      closedDatesModalInstance = new bootstrap.Modal(document.getElementById('closedDatesModal'));
      
      // Select2와 Bootstrap 모달 호환성을 위한 설정
      // enforceFocus를 비활성화하여 Select2 검색창에 입력 가능하도록 함
      $.fn.modal.Constructor.prototype._enforceFocus = function() {};
      
      loadFlights();
      loadAgencies();
      loadClosedDates(); // 마감날짜 로드
      loadCalendar(); // 달력을 기본으로 로드
    });
    
    // 항공편 목록 로드
    async function loadFlights() {
      try {
        const res = await fetch('/pickup/api/flights/all');
        const flights = await res.json();
        
        // FLIGHTS 객체 구성
        FLIGHTS = {};
        flights.forEach(f => {
          FLIGHTS[f.flight_number] = {
            time: f.departure_time?.substring(0, 5) || '00:00',
            arrival_time: f.arrival_time?.substring(0, 5) || '00:00',
            hours: parseFloat(f.flight_hours) || 4,
            departure_airport: f.departure_airport,
            arrival_airport: f.arrival_airport,
            airline: f.airline
          };
        });
        
        // 모든 항공편을 하나의 드롭다운에 표시
        const flightSelect = document.getElementById('flightNumber');
        flightSelect.innerHTML = '<option value="">편명 선택</option>' + 
          flights.filter(f => f.is_active).map(f => {
            const depTime = f.departure_time?.substring(0, 5);
            const arrTime = f.arrival_time?.substring(0, 5);
            const route = `${f.departure_airport} → ${f.arrival_airport}`;
            return `<option value="${f.flight_number}">${f.flight_number} (${route} ${depTime} → ${arrTime})</option>`;
          }).join('');
        
        // Select2 초기화 (검색 가능한 드롭다운)
        $('#flightNumber').select2({
          theme: 'bootstrap-5',
          placeholder: '편명을 입력하거나 선택하세요 (예: KE111)',
          allowClear: true,
          width: '100%',
          dropdownParent: $('#addModal'), // 모달 내부에서 작동하도록 설정
          language: {
            noResults: function() {
              return "검색 결과가 없습니다";
            },
            searching: function() {
              return "검색 중...";
            }
          }
        });
        
        // Select2 변경 이벤트에 autoCalculate 연결
        $('#flightNumber').on('change', function() {
          autoCalculate();
        });
        
        console.log('✅ 항공편 로드 완료:', Object.keys(FLIGHTS).length, '개');
      } catch (error) {
        console.error('❌ 항공편 로드 실패:', error);
        alert('항공편 정보를 불러올 수 없습니다.');
      }
    }
    
    // 인원 계산
    function updateTotal() {
      const adult = parseInt(document.getElementById('adultCount').value) || 0;
      const child = parseInt(document.getElementById('childCount').value) || 0;
      const infant = parseInt(document.getElementById('infantCount').value) || 0;
      document.getElementById('totalPassengers').textContent = adult + child + infant;
    }
    
    // 업체 목록 로드
    async function loadAgencies() {
      const res = await fetch('/pickup/api/agencies');
      const agencies = await res.json();
      const select = document.getElementById('agencyId');
      select.innerHTML = agencies.map(a => `<option value="${a.id}">${a.agency_name}</option>`).join('');
    }
    
    // 예약 상세 보기 (모달)
    function showPickupDetail(pickupId) {
      const pickup = allPickups[pickupId];
      if (!pickup) return;
      currentPickupData = pickup;
      
      const recordType = pickup.record_type || 'arrival';
      const depAirport = pickup.departure_airport || '';
      const arrAirport = pickup.arrival_airport || '';
      const flightNum = pickup.flight_number || '';
      
      // 날짜 포맷팅 함수
      const formatDate = (dateStr) => {
        if (!dateStr) return '';
        const d = new Date(dateStr + 'T00:00:00Z');
        const year = d.getUTCFullYear();
        const month = String(d.getUTCMonth() + 1).padStart(2, '0');
        const day = String(d.getUTCDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
      };
      
      const depDate = formatDate(pickup.departure_date);
      const arrDate = formatDate(pickup.arrival_date);
      
      // 항공편 마스터 데이터에서 시간 가져오기
      const flight = FLIGHTS[flightNum];
      const depTime = flight ? flight.time : (pickup.departure_time?.substring(0, 5) || '');
      const arrTime = flight ? flight.arrival_time : (pickup.arrival_time?.substring(0, 5) || '');
      
      // 공항명 매핑
      const airportNames = {
        'ICN': '인천',
        'PUS': '부산',
        'TAE': '대구',
        'GMP': '김포',
        'CJU': '제주',
        'GUM': '괌',
        'NRT': '나리타',
        'FUK': '후쿠오카',
        'SPN': '사이판',
        'ROR': '팔라우'
      };
      
      const getAirportName = (code) => airportNames[code] || code;
      const isKorea = (code) => ['ICN', 'PUS', 'TAE', 'GMP', 'CJU'].includes(code);
      
      // 레코드 타입 라벨
      let typeLabel = '';
      let typeColor = '';
      if (recordType === 'departure') {
        const depName = getAirportName(depAirport);
        typeLabel = isKorea(depAirport) ? `✈️ ${depName} 출발` : `✈️ ${depName} 출발`;
        typeColor = '#2196f3';
      } else {
        const arrName = getAirportName(arrAirport);
        typeLabel = `🛬 ${arrName} 도착`;
        typeColor = '#f44336';
      }
      
      let html = `
        <div class="alert" style="background-color: ${recordType === 'departure' ? '#e3f2fd' : '#ffebee'}; border-left: 4px solid ${typeColor};">
          <h5 style="color: ${typeColor}; margin: 0;">${typeLabel}</h5>
          <div style="font-size: 1.1rem; font-weight: bold; margin-top: 5px;">
            ${flightNum} | ${depAirport} → ${arrAirport}
          </div>
          <div class="mt-2">
            <strong>출발:</strong> ${depDate} ${depTime} (${depAirport})<br>
            <strong>도착:</strong> ${arrDate} ${arrTime} (${arrAirport})
          </div>
        </div>
        
        <div class="row mt-3">
          <div class="col-md-6">
            <h6>👤 고객 정보</h6>
            <p><strong>이름:</strong> ${pickup.customer_name}</p>
            <p><strong>업체:</strong> ${pickup.agency_name || '-'}</p>
            <p><strong>호텔:</strong> ${pickup.hotel_name}</p>
            <p><strong>전화:</strong> ${pickup.phone || '-'}</p>
            <p><strong>카카오:</strong> ${pickup.kakao_id || '-'}</p>
          </div>
          <div class="col-md-6">
            <h6>👥 인원</h6>
            <p><strong>성인:</strong> ${pickup.adult_count || 0}명</p>
            <p><strong>소아:</strong> ${pickup.child_count || 0}명</p>
            <p><strong>유아:</strong> ${pickup.infant_count || 0}명</p>
            <p><strong>짐:</strong> ${pickup.luggage_count || 0}개</p>
            <p><strong>총 인원:</strong> ${pickup.passenger_count}명</p>
          </div>
        </div>
      `;
      
      if (pickup.vehicle_type) {
        html += `<hr><p><strong>🚗 차량:</strong> ${pickup.vehicle_type}</p>`;
      }
      if (pickup.memo) {
        html += `<hr><p><strong>📝 메모:</strong> ${pickup.memo}</p>`;
      }
      
      document.getElementById('detailBody').innerHTML = html;
      detailModalInstance.show();
    }
    
    // 모달 열기
    function showAddModal() {
      const modal = document.getElementById('addModal');
      
      // 수정 모드 초기화
      delete modal.dataset.editId;
      modal.querySelector('.modal-title').textContent = '새 픽업 등록';
      
      // 폼 리셋
      document.getElementById('addForm').reset();
      document.getElementById('flightResult').style.display = 'none';
      
      // Select2 초기화
      $('#flightNumber').val(null).trigger('change');
      
      updateTotal();
      
      addModalInstance.show();
    }
    
    // 자동 계산 (출발/도착)
    function autoCalculate() {
      const date = document.getElementById('flightDate').value;
      const flightNum = document.getElementById('flightNumber').value;
      if (!date || !flightNum) return;
      
      const flight = FLIGHTS[flightNum];
      if (!flight) return;
      
      // 출발지 시간대 결정
      const isToGuam = flight.arrival_airport === 'GUM';
      const depTZ = isToGuam ? '+09:00' : '+10:00';
      const arrTZ = isToGuam ? 10 : 9;
      
      // 출발 시간
      const depDateTime = new Date(`${date}T${flight.time}:00${depTZ}`);
      
      // 비행시간으로 날짜 계산 (다음날 여부 판단용)
      const arrivalMillis = depDateTime.getTime() + (flight.hours * 3600000);
      const arrivalDateTime = new Date(arrivalMillis);
      
      // UTC 시간 추출 (날짜 계산용)
      const utcHours = arrivalDateTime.getUTCHours();
      const utcDate = arrivalDateTime.getUTCDate();
      const utcMonth = arrivalDateTime.getUTCMonth();
      const utcYear = arrivalDateTime.getUTCFullYear();
      
      // 도착지 날짜 계산 (비행시간 기반)
      let arrHours = utcHours + arrTZ;
      let arrDateObj = new Date(Date.UTC(utcYear, utcMonth, utcDate));
      
      if (arrHours >= 24) {
        arrHours -= 24;
        arrDateObj.setUTCDate(arrDateObj.getUTCDate() + 1);
      }
      
      const arrivalDate = arrDateObj.toISOString().split('T')[0];
      
      // 도착시간은 항공편 마스터의 실제 arrival_time 사용
      const arrivalTime = flight.arrival_time;
      
      const dateChanged = date !== arrivalDate;
      
      const result = document.getElementById('flightResult');
      result.style.display = 'block';
      result.className = 'alert alert-success';
      result.innerHTML = `
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <strong>✅ 출도착 정보 확인</strong><br>
            <div class="mt-2">
              <span class="badge bg-primary">출발</span> ${flight.departure_airport} ${date} ${flight.time}<br>
              <span class="badge bg-danger">도착</span> ${flight.arrival_airport} ${arrivalDate} ${arrivalTime}
              ${dateChanged ? ' <span class="badge bg-warning text-dark">다음날</span>' : ''}
            </div>
            <div class="mt-2 text-muted small">
              달력에 파란색(출발)과 빨간색(도착) 2개 레코드가 저장됩니다.
            </div>
          </div>
          <i class="bi bi-check-circle-fill" style="font-size: 2rem; color: #198754;"></i>
        </div>
      `;
    }
    
    // 모달에서 수정
    function editFromDetail() {
      if (!currentPickupData) return;
      
      const pickup = currentPickupData;
      
      // 상세 모달 닫기
      detailModalInstance.hide();
      
      // 등록 모달에 데이터 로드
      document.getElementById('flightDate').value = pickup.departure_date || '';
      
      // Select2 값 설정
      $('#flightNumber').val(pickup.flight_number || '').trigger('change');
      
      document.getElementById('agencyId').value = pickup.agency_id || '';
      document.getElementById('customerName').value = pickup.customer_name || '';
      document.getElementById('hotelName').value = pickup.hotel_name || '';
      document.getElementById('phone').value = pickup.phone || '';
      document.getElementById('kakaoId').value = pickup.kakao_id || '';
      document.getElementById('memo').value = pickup.memo || '';
      document.getElementById('adultCount').value = pickup.adult_count || 0;
      document.getElementById('childCount').value = pickup.child_count || 0;
      document.getElementById('infantCount').value = pickup.infant_count || 0;
      document.getElementById('luggageCount').value = pickup.luggage_count || 0;
      
      updateTotal();
      autoCalculate();
      
      // 수정 모드로 표시
      document.getElementById('addModal').querySelector('.modal-title').textContent = '픽업 수정';
      document.getElementById('addModal').dataset.editId = pickup.id;
      
      addModalInstance.show();
    }
    
    // 모달에서 삭제
    async function deleteFromDetail() {
      if (!currentPickupData) return;
      
      if (!confirm(`정말 취소하시겠습니까?\n\n출발/도착 2개 레코드가 모두 취소됩니다.`)) return;
      
      try {
        const res = await fetch(`/pickup/api/${currentPickupData.id}`, { 
          method: 'DELETE' 
        });
        
        if (res.ok) {
          const result = await res.json();
          alert(`✅ 취소 완료 (${result.deletedCount}개 레코드)`);
          detailModalInstance.hide();
          loadCalendar(); // 달력 새로고침
        } else {
          const err = await res.json();
          alert('❌ 취소 실패: ' + err.error);
        }
      } catch (error) {
        alert('❌ 오류: ' + error.message);
      }
    }
    
    // 일별 전체보기 모달
    async function showDayView(date) {
      currentDayViewDate = date;
      document.getElementById('dayViewTitle').textContent = `📅 ${date} 전체보기`;
      
      try {
        // 해당 날짜의 모든 예약 조회
        const res = await fetch(`/pickup/api/calendar?year=${date.split('-')[0]}&month=${date.split('-')[1]}`);
        const data = await res.json();
        
        // 날짜별로 예약 그룹화
        const pickupsByDate = {};
        data.pickups.forEach(p => {
          const displayDate = p.display_date?.split('T')[0];
          if (!displayDate) return;
          
          if (!pickupsByDate[displayDate]) {
            pickupsByDate[displayDate] = { departures: [], arrivals: [] };
          }
          
          if (p.record_type === 'departure') {
            pickupsByDate[displayDate].departures.push(p);
          } else if (p.record_type === 'arrival') {
            pickupsByDate[displayDate].arrivals.push(p);
          }
        });
        
        // 해당 날짜의 예약만 필터링
        const dayData = pickupsByDate[date] || { departures: [], arrivals: [] };
        
        // 한국 공항 코드
        const koreaAirports = ['ICN', 'PUS', 'TAE', 'GMP', 'CJU'];
        
        // 한국 공항 관련 (인천/부산/대구 등 출발/도착)
        const icnDepartures = dayData.departures.filter(p => koreaAirports.includes(p.departure_airport));
        const icnArrivals = dayData.arrivals.filter(p => koreaAirports.includes(p.arrival_airport));
        
        // GUM 관련 (괌 출발/도착)
        const gumDepartures = dayData.departures.filter(p => p.departure_airport === 'GUM');
        const gumArrivals = dayData.arrivals.filter(p => p.arrival_airport === 'GUM');
        
        // 통계 계산
        const icnAll = [...icnDepartures, ...icnArrivals];
        const icnStats = {
          departures: icnDepartures.length,
          arrivals: icnArrivals.length,
          totalPax: icnAll.reduce((sum, p) => sum + (p.passenger_count || 0), 0),
          adults: icnAll.reduce((sum, p) => sum + (p.adult_count || 0), 0),
          children: icnAll.reduce((sum, p) => sum + (p.child_count || 0), 0),
          infants: icnAll.reduce((sum, p) => sum + (p.infant_count || 0), 0)
        };
        
        const gumAll = [...gumDepartures, ...gumArrivals];
        const gumStats = {
          departures: gumDepartures.length,
          arrivals: gumArrivals.length,
          totalPax: gumAll.reduce((sum, p) => sum + (p.passenger_count || 0), 0),
          adults: gumAll.reduce((sum, p) => sum + (p.adult_count || 0), 0),
          children: gumAll.reduce((sum, p) => sum + (p.child_count || 0), 0),
          infants: gumAll.reduce((sum, p) => sum + (p.infant_count || 0), 0)
        };
        
        // 통계 표시
        document.getElementById('icnStatsContent').innerHTML = `
          출발: ${icnStats.departures}건 | 도착: ${icnStats.arrivals}건<br>
          총 인원: ${icnStats.totalPax}명 (성인: ${icnStats.adults} / 소아: ${icnStats.children} / 유아: ${icnStats.infants})
        `;
        
        document.getElementById('gumStatsContent').innerHTML = `
          출발: ${gumStats.departures}건 | 도착: ${gumStats.arrivals}건<br>
          총 인원: ${gumStats.totalPax}명 (성인: ${gumStats.adults} / 소아: ${gumStats.children} / 유아: ${gumStats.infants})
        `;
        
        // 한국 공항 리스트 표시
        let icnHtml = '';
        
        if (icnDepartures.length > 0) {
          icnHtml += '<h6 class="text-primary">✈️ 한국 출발</h6>';
          icnDepartures.forEach(p => {
            icnHtml += renderPickupCard(p, 'departure');
          });
        }
        
        if (icnArrivals.length > 0) {
          icnHtml += '<h6 class="text-danger mt-3">🛬 한국 도착</h6>';
          icnArrivals.forEach(p => {
            icnHtml += renderPickupCard(p, 'arrival');
          });
        }
        
        if (!icnDepartures.length && !icnArrivals.length) {
          icnHtml = '<p class="text-muted">예약 없음</p>';
        }
        
        document.getElementById('icnList').innerHTML = icnHtml;
        
        // GUM 리스트 표시
        let gumHtml = '';
        
        if (gumDepartures.length > 0) {
          gumHtml += '<h6 class="text-primary">✈️ 괌 출발</h6>';
          gumDepartures.forEach(p => {
            gumHtml += renderPickupCard(p, 'departure');
          });
        }
        
        if (gumArrivals.length > 0) {
          gumHtml += '<h6 class="text-danger mt-3">🛬 괌 도착</h6>';
          gumArrivals.forEach(p => {
            gumHtml += renderPickupCard(p, 'arrival');
          });
        }
        
        if (!gumDepartures.length && !gumArrivals.length) {
          gumHtml = '<p class="text-muted">예약 없음</p>';
        }
        
        document.getElementById('gumList').innerHTML = gumHtml;
        
        // 모달 열기
        dayViewModalInstance.show();
      } catch (error) {
        console.error('❌ 일별 조회 실패:', error);
        alert('❌ 데이터 조회 실패: ' + error.message);
      }
    }
    
    // 예약 카드 렌더링
    function renderPickupCard(pickup, type) {
      const bgColor = type === 'departure' ? '#e3f2fd' : '#ffebee';
      const borderColor = type === 'departure' ? '#2196f3' : '#f44336';
      const time = pickup.display_time?.substring(0, 5) || '';
      const flightNum = pickup.flight_number || '';
      
      return `
        <div class="card mb-2" style="border-left: 4px solid ${borderColor}; background: ${bgColor};">
          <div class="card-body p-2">
            <div class="d-flex justify-content-between align-items-start">
              <div style="flex: 1;">
                <strong>${flightNum} (${time})</strong>
                <span class="badge bg-info ms-2">${pickup.passenger_count}명</span>
                ${pickup.agency_name ? `<span class="badge bg-secondary ms-1">${pickup.agency_name}</span>` : ''}
                <br>
                <small>👤 ${pickup.customer_name} | 🏨 ${pickup.hotel_name}</small><br>
                <small class="text-muted">
                  성인: ${pickup.adult_count || 0} | 소아: ${pickup.child_count || 0} | 유아: ${pickup.infant_count || 0} | 짐: ${pickup.luggage_count || 0}
                </small><br>
                ${pickup.phone ? `<small>📞 ${pickup.phone}</small>` : ''}
                ${pickup.phone && pickup.kakao_id ? '<small> | </small>' : ''}
                ${pickup.kakao_id ? `<small>💬 ${pickup.kakao_id}</small>` : ''}
              </div>
            </div>
            ${pickup.memo ? `<div class="mt-2 p-2" style="background: rgba(255,255,255,0.5); border-radius: 4px;"><small>📝 ${pickup.memo}</small></div>` : ''}
          </div>
        </div>
      `;
    }
    
    function changeMonth(delta) {
      currentCalendarMonth += delta;
      if (currentCalendarMonth > 12) {
        currentCalendarMonth = 1;
        currentCalendarYear++;
      } else if (currentCalendarMonth < 1) {
        currentCalendarMonth = 12;
        currentCalendarYear--;
      }
      loadCalendar();
    }
    
    async function loadCalendar() {
      try {
        const res = await fetch(`/pickup/api/calendar?year=${currentCalendarYear}&month=${currentCalendarMonth}`);
        const { pickups } = await res.json();
        
        console.log('📅 달력 데이터:', pickups.length, '개');
        
        // 월 표시
        document.getElementById('currentMonth').textContent = `${currentCalendarYear}년 ${currentCalendarMonth}월`;
      
      // 전역 예약 데이터 초기화
      allPickups = {};
      
      // 날짜별로 예약 그룹화 (record_type 기준)
      const pickupsByDate = {};
      pickups.forEach(p => {
        const date = p.display_date?.split('T')[0]; // 표시 날짜
        if (!date) return;
        
        if (!pickupsByDate[date]) {
          pickupsByDate[date] = { departures: [], arrivals: [], hotelPickups: [] };
        }
        
        // record_type에 따라 분류
        if (p.record_type === 'departure') {
          pickupsByDate[date].departures.push(p);
        } else if (p.record_type === 'arrival') {
          pickupsByDate[date].arrivals.push(p);
        } else if (p.record_type === 'hotel_pickup') {
          pickupsByDate[date].hotelPickups.push(p);
        }
        
        allPickups[p.id] = p; // 전역 저장
      });
      
      console.log('📋 날짜별 그룹:', Object.keys(pickupsByDate));
      
      // 달력 그리기
      const daysInMonth = new Date(currentCalendarYear, currentCalendarMonth, 0).getDate();
      const firstDay = new Date(currentCalendarYear, currentCalendarMonth - 1, 1).getDay();
      
      let html = '';
      // 요일 헤더
      ['일', '월', '화', '수', '목', '금', '토'].forEach(day => {
        html += `<div class="calendar-header">${day}</div>`;
      });
      
      // 빈 칸
      for (let i = 0; i < firstDay; i++) {
        html += '<div class="calendar-day"></div>';
      }
      
      // 날짜
      const today = new Date().toISOString().split('T')[0];
      for (let day = 1; day <= daysInMonth; day++) {
        const dateStr = `${currentCalendarYear}-${String(currentCalendarMonth).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        const dayPickups = pickupsByDate[dateStr] || { departures: [], arrivals: [], hotelPickups: [] };
        const hasPickup = dayPickups.departures.length > 0 || dayPickups.arrivals.length > 0 || dayPickups.hotelPickups.length > 0;
        const isToday = dateStr === today;
        
        // 마감날짜 확인
        const isClosed = closedDatesCache.some(item => {
          const itemDate = new Date(item.closed_date).toISOString().split('T')[0];
          return itemDate === dateStr;
        });
        
        // 통계 계산
        const totalCount = dayPickups.departures.length + dayPickups.arrivals.length + dayPickups.hotelPickups.length;
        const totalPax = [...dayPickups.departures, ...dayPickups.arrivals, ...dayPickups.hotelPickups]
          .reduce((sum, p) => sum + (p.passenger_count || 0), 0);
        
        html += `<div class="calendar-day ${hasPickup ? 'has-pickup' : ''} ${isToday ? 'today' : ''} ${isClosed ? 'closed' : ''}">`;
        html += `<div class="calendar-date">${day}일</div>`;
        
        // 요약
        if (hasPickup) {
          html += `
            <div class="day-summary">📊 ${totalCount}건 | ${totalPax}명</div>
            <button class="btn btn-sm btn-outline-primary w-100 mb-2" style="font-size: 0.7rem; padding: 2px 4px;" onclick="showDayView('${dateStr}')">
              📋 전체보기
            </button>
          `;
        }
        
        // 공항명 매핑 함수
        const getAirportLabel = (code) => {
          const names = {
            'ICN': '인천', 'PUS': '부산', 'TAE': '대구',
            'GMP': '김포', 'CJU': '제주', 'GUM': '괌',
            'NRT': '나리타', 'FUK': '후쿠오카', 'SPN': '사이판', 'ROR': '팔라우'
          };
          return names[code] || code;
        };
        
        // record_type에 따라 구분하여 표시
        dayPickups.departures.forEach(p => {
          const time = p.display_time?.substring(0, 5) || '';
          const flightNum = p.flight_number || '';
          const depAirport = p.departure_airport || '';
          const arrAirport = p.arrival_airport || '';
          
          // 출발공항명 표시
          const depName = getAirportLabel(depAirport);
          const label = `✈️ ${depName}출발`;
          
          html += `
            <div class="pickup-item" style="background: #e3f2fd; border-left-color: #2196f3; color: #1565c0; cursor: pointer;" onclick="showPickupDetail(${p.id})">
              <div style="font-size: 0.75rem; font-weight: bold;">${label}</div>
              <div>${flightNum}(${time}) ${p.customer_name} (${p.passenger_count}명)</div>
            </div>
          `;
        });
        
        // 도착 레코드
        dayPickups.arrivals.forEach(p => {
          const time = p.display_time?.substring(0, 5) || '';
          const flightNum = p.flight_number || '';
          const depAirport = p.departure_airport || '';
          const arrAirport = p.arrival_airport || '';
          
          // 도착공항명 표시
          const arrName = getAirportLabel(arrAirport);
          const label = `🛬 ${arrName}도착`;
          
          html += `
            <div class="pickup-item" style="background: #ffebee; border-left-color: #f44336; color: #c62828; cursor: pointer;" onclick="showPickupDetail(${p.id})">
              <div style="font-size: 0.75rem; font-weight: bold;">${label}</div>
              <div>${flightNum}(${time}) ${p.customer_name} (${p.passenger_count}명)</div>
            </div>
          `;
        });
        
        html += `</div>`;
      }
      
      document.getElementById('calendar').innerHTML = html;
      } catch (error) {
        console.error('❌ 달력 로드 실패:', error);
        alert('달력을 불러오는데 실패했습니다: ' + error.message);
      }
    }
    
    // 모달 닫히면 달력 새로고침 (데이터 변경 반영)
    document.getElementById('addModal').addEventListener('hidden.bs.modal', () => {
      loadCalendar();
    });
    
    // 저장
    async function savePickup() {
      const modal = document.getElementById('addModal');
      const editId = modal.dataset.editId;
      const isEdit = !!editId;
      
      const flightNum = document.getElementById('flightNumber').value;
      const flight = FLIGHTS[flightNum];
      
      if (!flight) {
        alert('편명을 선택해주세요.');
        return;
      }
      
      const data = {
        pickup_type: flight.arrival_airport === 'GUM' ? 'airport_to_hotel' : 'hotel_to_airport',
        flight_date: document.getElementById('flightDate').value,
        flight_number: flightNum,
        agency_id: document.getElementById('agencyId').value,
        customer_name: document.getElementById('customerName').value,
        hotel_name: document.getElementById('hotelName').value,
        phone: document.getElementById('phone').value,
        kakao_id: document.getElementById('kakaoId').value,
        memo: document.getElementById('memo').value,
        adult_count: parseInt(document.getElementById('adultCount').value) || 0,
        child_count: parseInt(document.getElementById('childCount').value) || 0,
        infant_count: parseInt(document.getElementById('infantCount').value) || 0,
        luggage_count: parseInt(document.getElementById('luggageCount').value) || 0
      };
      
      try {
        let res, result;
        
        if (isEdit) {
          // 수정 모드
          res = await fetch(`/pickup/api/${editId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });
          
          if (res.ok) {
            result = await res.json();
            const msg = result.recreated 
              ? `✅ 수정 완료! (날짜/편명 변경으로 레코드 재생성)\n출발/도착 ${result.updatedCount || 2}개 레코드가 갱신되었습니다.`
              : `✅ 수정 완료!\n출발/도착 ${result.updatedCount || 2}개 레코드가 수정되었습니다.`;
            alert(msg);
          }
        } else {
          // 등록 모드
          res = await fetch('/pickup/api/create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });
          
          if (res.ok) {
            result = await res.json();
            alert(`✅ 등록 완료!\n출발/도착 ${result.data.length}개 레코드가 저장되었습니다.`);
          }
        }
        
        if (res.ok) {
          addModalInstance.hide();
          loadCalendar(); // 달력 새로고침
        } else {
          const err = await res.json();
          alert('❌ 오류: ' + err.error);
        }
      } catch (error) {
        alert('❌ 오류: ' + error.message);
      }
    }
    
    // 삭제
    async function deletePickup(id) {
      if (!confirm('정말 취소하시겠습니까?')) return;
      
      await fetch(`/pickup/api/${id}`, { method: 'DELETE' });
      alert('✅ 취소 완료');
      loadPickups();
    }
    
    // 로그아웃
    async function logout() {
      if (confirm('로그아웃 하시겠습니까?')) {
        try {
          await fetch('/admin/logout', { method: 'POST' });
          window.location.href = '/pickup/login';
        } catch (error) {
          console.error('로그아웃 오류:', error);
          window.location.href = '/pickup/login';
        }
      }
    }
    
    // 마감날짜 관리 모달 열기
    function showClosedDatesModal() {
      loadClosedDatesList();
      closedDatesModalInstance.show();
    }
    
    // 마감날짜 목록 로드 (캐시)
    async function loadClosedDates() {
      try {
        const res = await fetch('/pickup/api/closed-dates');
        const data = await res.json();
        closedDatesCache = data.closedDates || [];
        console.log('✅ 마감날짜 로드 완료:', closedDatesCache.length, '건');
      } catch (error) {
        console.error('❌ 마감날짜 로드 실패:', error);
      }
    }
    
    // 마감날짜 목록 표시
    async function loadClosedDatesList() {
      try {
        await loadClosedDates(); // 최신 데이터 로드
        
        const container = document.getElementById('closedDatesList');
        
        if (closedDatesCache.length === 0) {
          container.innerHTML = '<div class="text-center text-muted py-3">등록된 마감날짜가 없습니다</div>';
          return;
        }
        
        let html = '';
        closedDatesCache.forEach(item => {
          const date = new Date(item.closed_date);
          const dateStr = date.toISOString().split('T')[0];
          const displayDate = `${date.getFullYear()}년 ${date.getMonth() + 1}월 ${date.getDate()}일`;
          
          html += `
            <div class="list-group-item d-flex justify-content-between align-items-center">
              <div>
                <strong class="text-danger">🚫 ${displayDate}</strong>
                ${item.reason ? `<br><small class="text-muted">${item.reason}</small>` : ''}
              </div>
              <button class="btn btn-sm btn-outline-danger" onclick="removeClosedDate(${item.id}, '${dateStr}')">
                <i class="bi bi-trash"></i> 해제
              </button>
            </div>
          `;
        });
        
        container.innerHTML = html;
      } catch (error) {
        console.error('❌ 마감날짜 목록 로드 실패:', error);
        document.getElementById('closedDatesList').innerHTML = 
          '<div class="alert alert-danger">목록을 불러올 수 없습니다</div>';
      }
    }
    
    // 마감날짜 등록
    async function addClosedDate() {
      const dateInput = document.getElementById('newClosedDate');
      const reasonInput = document.getElementById('closedReason');
      
      const date = dateInput.value;
      const reason = reasonInput.value;
      
      if (!date) {
        alert('마감날짜를 선택해주세요');
        return;
      }
      
      try {
        const res = await fetch('/pickup/api/closed-dates', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ closed_date: date, reason })
        });
        
        if (res.ok) {
          const result = await res.json();
          alert('✅ ' + result.message);
          
          // 입력 초기화
          dateInput.value = '';
          reasonInput.value = '';
          
          // 목록 새로고침
          await loadClosedDatesList();
          
          // 달력 새로고침
          loadCalendar();
        } else {
          const err = await res.json();
          alert('❌ ' + err.error);
        }
      } catch (error) {
        alert('❌ 오류: ' + error.message);
      }
    }
    
    // 마감날짜 삭제 (해제)
    async function removeClosedDate(id, dateStr) {
      if (!confirm(`${dateStr} 마감을 해제하시겠습니까?`)) return;
      
      try {
        const res = await fetch(`/pickup/api/closed-dates/${id}`, {
          method: 'DELETE'
        });
        
        if (res.ok) {
          const result = await res.json();
          alert('✅ ' + result.message);
          
          // 목록 새로고침
          await loadClosedDatesList();
          
          // 달력 새로고침
          loadCalendar();
        } else {
          const err = await res.json();
          alert('❌ ' + err.error);
        }
      } catch (error) {
        alert('❌ 오류: ' + error.message);
      }
    }
    
    // 출발일 선택 시 마감 체크
    async function checkClosedDate() {
      const dateInput = document.getElementById('flightDate');
      const warning = document.getElementById('closedDateWarning');
      const reasonSpan = document.getElementById('closedDateReason');
      
      const selectedDate = dateInput.value;
      
      if (!selectedDate) {
        warning.style.display = 'none';
        dateInput.classList.remove('date-input-warning');
        return;
      }
      
      // 캐시에서 확인
      const closedItem = closedDatesCache.find(item => {
        const itemDate = new Date(item.closed_date).toISOString().split('T')[0];
        return itemDate === selectedDate;
      });
      
      if (closedItem) {
        dateInput.classList.add('date-input-warning');
        warning.style.display = 'block';
        reasonSpan.textContent = closedItem.reason ? `사유: ${closedItem.reason}` : '예약 마감된 날짜입니다';
      } else {
        dateInput.classList.remove('date-input-warning');
        warning.style.display = 'none';
      }
      
      // 자동 계산도 함께 실행
      autoCalculate();
    }
  </script>
</body>
</html>
