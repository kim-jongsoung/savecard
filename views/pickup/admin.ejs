<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>공항 픽업 관리</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
  <!-- Select2 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
  <style>
    .date-warning { background: #fff3cd; border-left: 4px solid #ff6b6b; }
    .early-morning { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
    .pickup-card { margin-bottom: 15px; padding: 15px; border: 2px solid #ddd; border-radius: 8px; }
    .calendar-grid { display: grid; grid-template-columns: repeat(7, 1fr); gap: 8px; }
    .calendar-day { border: 1px solid #ddd; padding: 8px; border-radius: 8px; min-height: 250px; max-height: 250px; overflow-y: auto; }
    .calendar-day-split { display: flex; gap: 4px; }
    .calendar-day-column { flex: 1; overflow-y: auto; max-height: 150px; padding: 2px; }
    .calendar-day-column-header { font-size: 0.65rem; font-weight: bold; text-align: center; padding: 2px; border-radius: 3px; margin-bottom: 3px; position: sticky; top: 0; z-index: 5; }
    .column-korea { border-right: 2px solid #ddd; }
    .column-korea .calendar-day-column-header { background: #e8f5e9; color: #2e7d32; }
    .column-guam .calendar-day-column-header { background: #fff3e0; color: #e65100; }
    .calendar-day.has-pickup { background: #fafafa; border-color: #2196f3; border-width: 2px; }
    .calendar-day.today { background: #fff3cd; border-color: #ff9800; font-weight: bold; border-width: 2px; }
    .calendar-day.closed { background: #ffe0e0; border-color: #dc3545; border-width: 2px; position: relative; }
    .calendar-day.closed::before { content: '🚫 마감'; position: absolute; top: 5px; right: 5px; font-size: 10px; color: #dc3545; font-weight: bold; background: white; padding: 2px 5px; border-radius: 3px; }
    .calendar-header { font-weight: bold; text-align: center; padding: 10px; background: #667eea; color: white; border-radius: 4px; }
    .calendar-date { font-size: 16px; font-weight: bold; margin-bottom: 5px; position: sticky; top: 0; background: white; z-index: 10; padding: 3px 0; }
    .pickup-item { font-size: 10px; padding: 3px 4px; margin: 2px 0; border-radius: 3px; cursor: pointer; border-left: 3px solid; transition: all 0.2s; line-height: 1.3; }
    .pickup-item:hover { transform: translateX(3px); box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
    .pickup-arrival { background: #e3f2fd; border-left-color: #2196f3; color: #1565c0; }
    .pickup-departure { background: #fce4ec; border-left-color: #e91e63; color: #c2185b; }
    .pickup-early { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-left-color: #fbbf24; color: white; }
    .day-summary { font-size: 10px; color: #666; margin-bottom: 5px; padding: 2px 4px; background: #f0f0f0; border-radius: 3px; }
    .date-input-warning { border: 2px solid #dc3545 !important; background: #ffe0e0 !important; }
    
    /* Select2 커스텀 스타일 */
    .select2-container--bootstrap-5 .select2-selection {
      min-height: 38px;
      font-size: 1rem;
    }
    .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
      line-height: 38px;
      padding-left: 12px;
    }
    .select2-container--bootstrap-5 .select2-dropdown {
      font-size: 0.95rem;
    }
    .select2-container--bootstrap-5 .select2-search--dropdown .select2-search__field {
      border: 1px solid #ced4da;
      border-radius: 4px;
      padding: 6px 12px;
    }
  </style>
</head>
<body>
  <div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h2>🚗 공항 픽업 관리</h2>
      <div>
        <button class="btn btn-warning me-2" onclick="showPendingModal()">
          <i class="bi bi-exclamation-circle"></i> 신규예약 <span class="badge bg-danger" id="pendingCount">0</span>
        </button>
        <button class="btn btn-outline-primary me-2" onclick="location.href='/pickup/flights'">
          <i class="bi bi-airplane"></i> 항공편 관리
        </button>
        <button class="btn btn-outline-info me-2" onclick="location.href='/pickup/settlement'">
          <i class="bi bi-currency-dollar"></i> 정산관리
        </button>
        <button class="btn btn-outline-secondary me-2" onclick="location.href='/pickup/agencies'">
          <i class="bi bi-building"></i> 업체 관리
        </button>
        <button class="btn btn-outline-warning me-2" onclick="showClosedDatesModal()">
          <i class="bi bi-calendar-x"></i> 마감날짜 관리
        </button>
        <button class="btn btn-outline-info me-2" onclick="reconvertNames()">
          <i class="bi bi-arrow-repeat"></i> 영문이름 재변환
        </button>
        <button class="btn btn-success me-2" onclick="showAddModal()">
          <i class="bi bi-plus-circle"></i> 새 예약 등록
        </button>
        <button class="btn btn-outline-danger" onclick="logout()">
          <i class="bi bi-box-arrow-right"></i> 로그아웃
        </button>
      </div>
    </div>
    
    <!-- 달력 뷰 (유일한 화면) -->
    <div id="calendarView" class="mb-4">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <button class="btn btn-sm btn-secondary" onclick="changeMonth(-1)">◀ 이전달</button>
        <h4 id="currentMonth"></h4>
        <button class="btn btn-sm btn-secondary" onclick="changeMonth(1)">다음달 ▶</button>
      </div>
      <div id="calendar" class="calendar-grid"></div>
    </div>
  </div>
  
  <!-- 상세 보기 모달 -->
  <div class="modal fade" id="detailModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="detailTitle">예약 상세</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body" id="detailBody">
          <!-- 동적 내용 -->
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
          <button type="button" class="btn btn-warning" onclick="editFromDetail()">
            <i class="bi bi-pencil"></i> 수정
          </button>
          <button type="button" class="btn btn-danger" onclick="deleteFromDetail()">
            <i class="bi bi-trash"></i> 삭제
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 일별 전체보기 모달 -->
  <div class="modal fade" id="dayViewModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="dayViewTitle">📅 날짜별 전체보기</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div class="row">
            <!-- 모바일: 괌출발/도착이 위로 (order-1) -->
            <div class="col-md-6 order-2 order-md-1 mb-4">
              <div class="card">
                <div class="card-header bg-primary text-white">
                  <h6 class="mb-0">🇰🇷 한국 출발/도착 (인천/부산/대구)</h6>
                </div>
                <div class="card-body" id="icnSection">
                  <!-- 통계 -->
                  <div class="alert alert-info mb-3" id="icnStats">
                    <strong>📊 통계</strong><br>
                    <span id="icnStatsContent">로딩중...</span>
                  </div>
                  <!-- 리스트 -->
                  <div id="icnList"></div>
                </div>
              </div>
            </div>
            
            <!-- 모바일: 괌출발/도착이 위로 (order-1) -->
            <div class="col-md-6 order-1 order-md-2 mb-4">
              <div class="card">
                <div class="card-header bg-success text-white">
                  <h6 class="mb-0">🇬🇺 괌 출발/도착</h6>
                </div>
                <div class="card-body" id="gumSection">
                  <!-- 통계 -->
                  <div class="alert alert-success mb-3" id="gumStats">
                    <strong>📊 통계</strong><br>
                    <span id="gumStatsContent">로딩중...</span>
                  </div>
                  <!-- 리스트 -->
                  <div id="gumList"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 신규예약 관리 모달 -->
  <div class="modal fade" id="pendingModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">
            <i class="bi bi-exclamation-circle text-warning"></i> 신규예약 확정 관리
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <!-- 탭 네비게이션 -->
          <ul class="nav nav-tabs mb-3" id="pendingTabs" role="tablist">
            <li class="nav-item" role="presentation">
              <button class="nav-link active" id="pending-tab" data-bs-toggle="tab" data-bs-target="#pendingList" type="button">
                <i class="bi bi-clock-history"></i> 검수 대기 <span class="badge bg-warning text-dark" id="pendingTabCount">0</span>
              </button>
            </li>
            <li class="nav-item" role="presentation">
              <button class="nav-link" id="rejected-tab" data-bs-toggle="tab" data-bs-target="#rejectedList" type="button">
                <i class="bi bi-x-circle"></i> 미확정 <span class="badge bg-danger" id="rejectedTabCount">0</span>
              </button>
            </li>
          </ul>

          <!-- 탭 내용 -->
          <div class="tab-content" id="pendingTabContent">
            <!-- 검수 대기 리스트 -->
            <div class="tab-pane fade show active" id="pendingList" role="tabpanel">
              <div id="pendingReservations">
                <div class="text-center text-muted py-5">
                  <i class="bi bi-inbox" style="font-size: 3rem;"></i>
                  <p class="mt-2">검수 대기 중인 예약이 없습니다</p>
                </div>
              </div>
            </div>

            <!-- 미확정 리스트 -->
            <div class="tab-pane fade" id="rejectedList" role="tabpanel">
              <div id="rejectedReservations">
                <div class="text-center text-muted py-5">
                  <i class="bi bi-inbox" style="font-size: 3rem;"></i>
                  <p class="mt-2">미확정 예약이 없습니다</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- 예약 수정 모달 -->
  <div class="modal fade" id="editReservationModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">예약 수정</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form id="editReservationForm">
            <input type="hidden" id="editPickupId">
            
            <div class="row mb-3">
              <div class="col-md-6">
                <label class="form-label">고객명</label>
                <input type="text" class="form-control" id="editCustomerName">
              </div>
              <div class="col-md-6">
                <label class="form-label">호텔</label>
                <input type="text" class="form-control" id="editHotelName">
              </div>
            </div>
            
            <div class="row mb-3">
              <div class="col-md-6">
                <label class="form-label">연락처</label>
                <input type="text" class="form-control" id="editPhone">
              </div>
              <div class="col-md-6">
                <label class="form-label">카톡ID</label>
                <input type="text" class="form-control" id="editKakaoId">
              </div>
            </div>
            
            <div class="row mb-3">
              <div class="col-md-3">
                <label class="form-label">성인</label>
                <input type="number" class="form-control" id="editAdultCount" min="0">
              </div>
              <div class="col-md-3">
                <label class="form-label">소아</label>
                <input type="number" class="form-control" id="editChildCount" min="0">
              </div>
              <div class="col-md-3">
                <label class="form-label">유아</label>
                <input type="number" class="form-control" id="editInfantCount" min="0">
              </div>
              <div class="col-md-3">
                <label class="form-label">짐</label>
                <input type="number" class="form-control" id="editLuggageCount" min="0">
              </div>
            </div>
            
            <div class="mb-3">
              <label class="form-label">메모</label>
              <textarea class="form-control" id="editMemo" rows="3"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
          <button type="button" class="btn btn-primary" onclick="saveReservationEdit()">저장</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 마감날짜 관리 모달 -->
  <div class="modal fade" id="closedDatesModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">🚫 마감날짜 관리</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <!-- 마감날짜 등록 폼 -->
          <div class="card mb-3">
            <div class="card-header bg-danger text-white">
              <h6 class="mb-0">새 마감날짜 등록</h6>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-4">
                  <label class="form-label">마감날짜 *</label>
                  <input type="date" class="form-control" id="newClosedDate" required>
                </div>
                <div class="col-md-6">
                  <label class="form-label">사유</label>
                  <input type="text" class="form-control" id="closedReason" placeholder="예: 차량 부족, 연휴 등">
                </div>
                <div class="col-md-2 d-flex align-items-end">
                  <button class="btn btn-danger w-100" onclick="addClosedDate()">
                    <i class="bi bi-plus-circle"></i> 등록
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- 마감날짜 목록 -->
          <div class="card">
            <div class="card-header bg-secondary text-white">
              <h6 class="mb-0">마감날짜 목록</h6>
            </div>
            <div class="card-body">
              <div id="closedDatesList" class="list-group">
                <div class="text-center text-muted py-3">로딩중...</div>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 등록 모달 -->
  <div class="modal fade" id="addModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">새 픽업 등록</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form id="addForm">
            <!-- 항공편 정보 -->
            <h6 class="text-primary mb-3">✈️ 항공편 정보</h6>
            <div class="row">
              <div class="col-md-6 mb-3">
                <label class="form-label">출발일 *</label>
                <input type="date" class="form-control" id="flightDate" onchange="checkClosedDate()" required>
                <div id="closedDateWarning" class="alert alert-danger mt-2" style="display:none;">
                  <strong>⚠️ 마감된 날짜입니다!</strong><br>
                  <span id="closedDateReason"></span>
                </div>
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label">편명 *</label>
                <select class="form-select" id="flightNumber" required>
                  <option value="">편명 선택</option>
                </select>
              </div>
            </div>
            <div id="flightResult" class="alert alert-info mt-2" style="display:none;"></div>
            
            <hr class="my-3">
            
            <!-- 고객 정보 -->
            <h6>👤 고객 정보</h6>
            <div class="row">
              <div class="col-md-4">
                <label class="form-label">업체</label>
                <select class="form-select" id="agencyId"></select>
              </div>
              <div class="col-md-8">
                <label class="form-label">고객명</label>
                <input type="text" class="form-control" id="customerName" required>
              </div>
            </div>
            <div class="row mt-2">
              <div class="col-md-3">
                <label class="form-label">성인 (Adult)</label>
                <input type="number" class="form-control" id="adultCount" min="0" value="0" onchange="updateTotal()">
              </div>
              <div class="col-md-3">
                <label class="form-label">소아 (Child)</label>
                <input type="number" class="form-control" id="childCount" min="0" value="0" onchange="updateTotal()">
              </div>
              <div class="col-md-3">
                <label class="form-label">유아 (Infant)</label>
                <input type="number" class="form-control" id="infantCount" min="0" value="0" onchange="updateTotal()">
              </div>
              <div class="col-md-3">
                <label class="form-label">짐 (Luggage)</label>
                <input type="number" class="form-control" id="luggageCount" min="0" value="0">
              </div>
            </div>
            <div class="alert alert-info mt-2">
              <strong>총 인원:</strong> <span id="totalPassengers">0</span>명
            </div>
            <div class="row mt-2">
              <div class="col-md-4">
                <label class="form-label">호텔 <small class="text-muted">(입력 시 자동완성)</small></label>
                <input type="text" class="form-control" id="hotelName" list="hotels" placeholder="호텔명 입력..." required>
                <datalist id="hotels">
                  <!-- 투몬 지역 주요 호텔 (가나다순) -->
                  <option value="Alupang Beach Tower">알루팡 비치 타워</option>
                  <option value="Bay View Hotel Guam">베이 뷰 호텔 괌</option>
                  <option value="Crowne Plaza Resort Guam">크라운 플라자 리조트 괌</option>
                  <option value="Days Inn Guam">데이즈인 괌</option>
                  <option value="Dusit Beach Resort Guam">두짓 비치 리조트 괌</option>
                  <option value="Dusit Thani Guam Resort">두짓타니 괌 리조트</option>
                  <option value="Fiesta Resort Guam">피에스타 리조트 괌</option>
                  <option value="Garden Villa Hotel">가든 빌라 호텔</option>
                  <option value="Grand Plaza Hotel">그랜드 플라자 호텔</option>
                  <option value="Guam Plaza Resort & Spa">괌 플라자 리조트 & 스파</option>
                  <option value="Guam Reef Hotel">괌 리프 호텔</option>
                  <option value="Hilton Guam Resort & Spa">힐튼 괌 리조트 & 스파</option>
                  <option value="Holiday Resort & Spa Guam">홀리데이 리조트 & 스파 괌</option>
                  <option value="Hotel Nikko Guam">호텔 니코 괌</option>
                  <option value="Hyatt Regency Guam">하얏트 리젠시 괌</option>
                  <option value="LeoPalace Resort Guam">레오팔레스 리조트 괌</option>
                  <option value="Lotte Hotel Guam">롯데호텔 괌</option>
                  <option value="Ohana Bayview Guam">오하나 베이뷰 괌</option>
                  <option value="Onward Beach Resort">온워드 비치 리조트</option>
                  <option value="Outrigger Guam Beach Resort">아웃리거 괌 비치 리조트</option>
                  <option value="Pacific Islands Club (PIC)">퍼시픽 아일랜드 클럽 (PIC)</option>
                  <option value="Royal Orchid Guam">로열 오키드 괌</option>
                  <option value="The Westin Resort Guam">웨스틴 리조트 괌</option>
                  <option value="The Tsubaki Tower">더 츠바키 타워</option>
                  
                  <!-- 타무닝 지역 -->
                  <option value="Guam Airport Hotel">괌 에어포트 호텔</option>
                  <option value="Hotel Santa Fe Guam">호텔 산타페 괌</option>
                  <option value="Sheraton Laguna Guam Resort">쉐라톤 라구나 괌 리조트</option>
                  <option value="Verona Resort & Spa">베로나 리조트 & 스파</option>
                  <option value="Wyndham Garden Guam">윈덤 가든 괌</option>
                  
                  <!-- 하갓냐/타무닝 -->
                  <option value="Rihga Royal Laguna Guam Resort">리가 로얄 라구나 괌 리조트</option>
                  
                  <!-- 유마탁/남부 -->
                  <option value="Hoshino Resorts Risonare Guam">호시노 리조트 리조나레 괌</option>
                  <option value="Tano Resort">타노 리조트</option>
                  
                  <!-- 투몬베이 캐피탈 -->
                  <option value="Tumon Bay Capital Hotel">투몬베이 캐피탈 호텔</option>
                  
                  <!-- 기타 -->
                  <option value="Airbnb (민박)">에어비앤비 (민박)</option>
                  <option value="Private Villa (개인별장)">프라이빗 빌라 (개인별장)</option>
                  <option value="Vacation Rental (휴가용 숙소)">배케이션 렌탈</option>
                  <option value="미정 (TBD)">미정</option>
                </datalist>
              </div>
              <div class="col-md-4">
                <label class="form-label">연락처</label>
                <input type="text" class="form-control" id="phone">
              </div>
              <div class="col-md-4">
                <label class="form-label">카톡ID</label>
                <input type="text" class="form-control" id="kakaoId">
              </div>
            </div>
            <div class="mt-2">
              <label class="form-label">메모</label>
              <textarea class="form-control" id="memo" rows="2"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
          <button type="button" class="btn btn-primary" onclick="savePickup()">등록</button>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- jQuery (Select2 의존성) -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  <!-- Select2 JS -->
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  <script>
    let FLIGHTS = {}; // DB에서 로드
    
    let addModalInstance;
    let detailModalInstance;
    let closedDatesModalInstance;
    let currentCalendarYear = new Date().getFullYear();
    let currentCalendarMonth = new Date().getMonth() + 1;
    let currentPickupData = null;
    let allPickups = {}; // ID별 예약 데이터 저장
    let closedDatesCache = []; // 마감날짜 캐시
    
    // 페이지 로드
    document.addEventListener('DOMContentLoaded', () => {
      addModalInstance = new bootstrap.Modal(document.getElementById('addModal'));
      detailModalInstance = new bootstrap.Modal(document.getElementById('detailModal'));
      closedDatesModalInstance = new bootstrap.Modal(document.getElementById('closedDatesModal'));
      
      // Select2와 Bootstrap 모달 호환성을 위한 설정
      // enforceFocus를 비활성화하여 Select2 검색창에 입력 가능하도록 함
      $.fn.modal.Constructor.prototype._enforceFocus = function() {};
      
      loadFlights();
      loadAgencies();
      loadClosedDates(); // 마감날짜 로드
      loadCalendar(); // 달력을 기본으로 로드
    });
    
    // 항공편 목록 로드
    async function loadFlights() {
      try {
        const res = await fetch('/pickup/api/flights/all');
        const flights = await res.json();
        
        // FLIGHTS 객체 구성
        FLIGHTS = {};
        flights.forEach(f => {
          FLIGHTS[f.flight_number] = {
            time: f.departure_time?.substring(0, 5) || '00:00',
            arrival_time: f.arrival_time?.substring(0, 5) || '00:00',
            hours: parseFloat(f.flight_hours) || 4,
            departure_airport: f.departure_airport,
            arrival_airport: f.arrival_airport,
            airline: f.airline
          };
        });
        
        // 모든 항공편을 하나의 드롭다운에 표시
        const flightSelect = document.getElementById('flightNumber');
        flightSelect.innerHTML = '<option value="">편명 선택</option>' + 
          flights.filter(f => f.is_active).map(f => {
            const depTime = f.departure_time?.substring(0, 5);
            const arrTime = f.arrival_time?.substring(0, 5);
            const route = `${f.departure_airport} → ${f.arrival_airport}`;
            return `<option value="${f.flight_number}">${f.flight_number} (${route} ${depTime} → ${arrTime})</option>`;
          }).join('');
        
        // Select2 초기화 (검색 가능한 드롭다운)
        $('#flightNumber').select2({
          theme: 'bootstrap-5',
          placeholder: '편명을 입력하거나 선택하세요 (예: KE111)',
          allowClear: true,
          width: '100%',
          dropdownParent: $('#addModal'), // 모달 내부에서 작동하도록 설정
          language: {
            noResults: function() {
              return "검색 결과가 없습니다";
            },
            searching: function() {
              return "검색 중...";
            }
          }
        });
        
        // Select2 변경 이벤트에 autoCalculate 연결
        $('#flightNumber').on('change', function() {
          autoCalculate();
        });
        
        console.log('✅ 항공편 로드 완료:', Object.keys(FLIGHTS).length, '개');
      } catch (error) {
        console.error('❌ 항공편 로드 실패:', error);
        alert('항공편 정보를 불러올 수 없습니다.');
      }
    }
    
    // 인원 계산
    function updateTotal() {
      const adult = parseInt(document.getElementById('adultCount').value) || 0;
      const child = parseInt(document.getElementById('childCount').value) || 0;
      const infant = parseInt(document.getElementById('infantCount').value) || 0;
      document.getElementById('totalPassengers').textContent = adult + child + infant;
    }
    
    // 업체 목록 로드
    async function loadAgencies() {
      const res = await fetch('/pickup/api/agencies');
      const data = await res.json();
      const agencies = data.agencies || [];
      const select = document.getElementById('agencyId');
      select.innerHTML = agencies.map(a => `<option value="${a.id}">${a.agency_name}</option>`).join('');
    }
    
    // 예약 상세 보기 (모달)
    function showPickupDetail(pickupId) {
      const pickup = allPickups[pickupId];
      if (!pickup) return;
      currentPickupData = pickup;
      
      const recordType = pickup.record_type || 'arrival';
      const depAirport = pickup.departure_airport || '';
      const arrAirport = pickup.arrival_airport || '';
      const flightNum = pickup.flight_number || '';
      
      // 날짜 포맷팅 함수
      const formatDate = (dateStr) => {
        if (!dateStr) return '';
        const d = new Date(dateStr + 'T00:00:00Z');
        const year = d.getUTCFullYear();
        const month = String(d.getUTCMonth() + 1).padStart(2, '0');
        const day = String(d.getUTCDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
      };
      
      const depDate = formatDate(pickup.departure_date);
      const arrDate = formatDate(pickup.arrival_date);
      
      // 항공편 마스터 데이터에서 시간 가져오기
      const flight = FLIGHTS[flightNum];
      const depTime = flight ? flight.time : (pickup.departure_time?.substring(0, 5) || '');
      const arrTime = flight ? flight.arrival_time : (pickup.arrival_time?.substring(0, 5) || '');
      
      // 공항명 매핑
      const airportNames = {
        'ICN': '인천',
        'PUS': '부산',
        'TAE': '대구',
        'GMP': '김포',
        'CJU': '제주',
        'GUM': '괌',
        'NRT': '나리타',
        'FUK': '후쿠오카',
        'SPN': '사이판',
        'ROR': '팔라우'
      };
      
      const getAirportName = (code) => airportNames[code] || code;
      const isKorea = (code) => ['ICN', 'PUS', 'TAE', 'GMP', 'CJU'].includes(code);
      
      // 레코드 타입 라벨
      let typeLabel = '';
      let typeColor = '';
      if (recordType === 'departure') {
        const depName = getAirportName(depAirport);
        typeLabel = isKorea(depAirport) ? `✈️ ${depName} 출발` : `✈️ ${depName} 출발`;
        typeColor = '#2196f3';
      } else {
        const arrName = getAirportName(arrAirport);
        typeLabel = `🛬 ${arrName} 도착`;
        typeColor = '#f44336';
      }
      
      let html = `
        <div class="alert" style="background-color: ${recordType === 'departure' ? '#e3f2fd' : '#ffebee'}; border-left: 4px solid ${typeColor};">
          <h5 style="color: ${typeColor}; margin: 0;">${typeLabel}</h5>
          <div style="font-size: 1.1rem; font-weight: bold; margin-top: 5px;">
            ${flightNum} | ${depAirport} → ${arrAirport}
          </div>
          <div class="mt-2">
            <strong>출발:</strong> ${depDate} ${depTime} (${depAirport})<br>
            <strong>도착:</strong> ${arrDate} ${arrTime} (${arrAirport})
          </div>
        </div>
        
        <div class="row mt-3">
          <div class="col-md-6">
            <h6>👤 고객 정보</h6>
            <p><strong>이름:</strong> ${pickup.customer_name}</p>
            <p><strong>업체:</strong> ${pickup.agency_name || '-'}</p>
            <p><strong>호텔:</strong> ${pickup.hotel_name}</p>
            <p><strong>전화:</strong> ${pickup.phone || '-'}</p>
            <p><strong>카카오:</strong> ${pickup.kakao_id || '-'}</p>
          </div>
          <div class="col-md-6">
            <h6>👥 인원</h6>
            <p><strong>성인:</strong> ${pickup.adult_count || 0}명</p>
            <p><strong>소아:</strong> ${pickup.child_count || 0}명</p>
            <p><strong>유아:</strong> ${pickup.infant_count || 0}명</p>
            <p><strong>짐:</strong> ${pickup.luggage_count || 0}개</p>
            <p><strong>총 인원:</strong> ${pickup.passenger_count}명</p>
          </div>
        </div>
      `;
      
      if (pickup.vehicle_type) {
        html += `<hr><p><strong>🚗 차량:</strong> ${pickup.vehicle_type}</p>`;
      }
      if (pickup.memo) {
        html += `<hr><p><strong>📝 메모:</strong> ${pickup.memo}</p>`;
      }
      
      document.getElementById('detailBody').innerHTML = html;
      detailModalInstance.show();
    }
    
    // 모달 열기
    function showAddModal() {
      const modal = document.getElementById('addModal');
      
      // 수정 모드 초기화
      delete modal.dataset.editId;
      modal.querySelector('.modal-title').textContent = '새 픽업 등록';
      
      // 폼 리셋
      document.getElementById('addForm').reset();
      document.getElementById('flightResult').style.display = 'none';
      
      // Select2 초기화
      $('#flightNumber').val(null).trigger('change');
      
      updateTotal();
      
      addModalInstance.show();
    }
    
    // 자동 계산 (출발/도착)
    function autoCalculate() {
      const date = document.getElementById('flightDate').value;
      const flightNum = document.getElementById('flightNumber').value;
      if (!date || !flightNum) return;
      
      const flight = FLIGHTS[flightNum];
      if (!flight) return;
      
      // 출발지 시간대 결정
      const isToGuam = flight.arrival_airport === 'GUM';
      const depTZ = isToGuam ? '+09:00' : '+10:00';
      const arrTZ = isToGuam ? 10 : 9;
      
      // 출발 시간
      const depDateTime = new Date(`${date}T${flight.time}:00${depTZ}`);
      
      // 비행시간으로 날짜 계산 (다음날 여부 판단용)
      const arrivalMillis = depDateTime.getTime() + (flight.hours * 3600000);
      const arrivalDateTime = new Date(arrivalMillis);
      
      // UTC 시간 추출 (날짜 계산용)
      const utcHours = arrivalDateTime.getUTCHours();
      const utcDate = arrivalDateTime.getUTCDate();
      const utcMonth = arrivalDateTime.getUTCMonth();
      const utcYear = arrivalDateTime.getUTCFullYear();
      
      // 도착지 날짜 계산 (비행시간 기반)
      let arrHours = utcHours + arrTZ;
      let arrDateObj = new Date(Date.UTC(utcYear, utcMonth, utcDate));
      
      if (arrHours >= 24) {
        arrHours -= 24;
        arrDateObj.setUTCDate(arrDateObj.getUTCDate() + 1);
      }
      
      const arrivalDate = arrDateObj.toISOString().split('T')[0];
      
      // 도착시간은 항공편 마스터의 실제 arrival_time 사용
      const arrivalTime = flight.arrival_time;
      
      const dateChanged = date !== arrivalDate;
      
      const result = document.getElementById('flightResult');
      result.style.display = 'block';
      result.className = 'alert alert-success';
      result.innerHTML = `
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <strong>✅ 출도착 정보 확인</strong><br>
            <div class="mt-2">
              <span class="badge bg-primary">출발</span> ${flight.departure_airport} ${date} ${flight.time}<br>
              <span class="badge bg-danger">도착</span> ${flight.arrival_airport} ${arrivalDate} ${arrivalTime}
              ${dateChanged ? ' <span class="badge bg-warning text-dark">다음날</span>' : ''}
            </div>
            <div class="mt-2 text-muted small">
              달력에 파란색(출발)과 빨간색(도착) 2개 레코드가 저장됩니다.
            </div>
          </div>
          <i class="bi bi-check-circle-fill" style="font-size: 2rem; color: #198754;"></i>
        </div>
      `;
    }
    
    // 모달에서 수정
    function editFromDetail() {
      if (!currentPickupData) return;
      
      const pickup = currentPickupData;
      
      // 상세 모달 닫기
      detailModalInstance.hide();
      
      // 등록 모달에 데이터 로드
      document.getElementById('flightDate').value = pickup.departure_date || '';
      
      // Select2 값 설정
      $('#flightNumber').val(pickup.flight_number || '').trigger('change');
      
      document.getElementById('agencyId').value = pickup.agency_id || '';
      document.getElementById('customerName').value = pickup.customer_name || '';
      document.getElementById('hotelName').value = pickup.hotel_name || '';
      document.getElementById('phone').value = pickup.phone || '';
      document.getElementById('kakaoId').value = pickup.kakao_id || '';
      document.getElementById('memo').value = pickup.memo || '';
      document.getElementById('adultCount').value = pickup.adult_count || 0;
      document.getElementById('childCount').value = pickup.child_count || 0;
      document.getElementById('infantCount').value = pickup.infant_count || 0;
      document.getElementById('luggageCount').value = pickup.luggage_count || 0;
      
      updateTotal();
      autoCalculate();
      
      // 수정 모드로 표시
      document.getElementById('addModal').querySelector('.modal-title').textContent = '픽업 수정';
      document.getElementById('addModal').dataset.editId = pickup.id;
      
      addModalInstance.show();
    }
    
    // 모달에서 삭제
    async function deleteFromDetail() {
      if (!currentPickupData) return;
      
      if (!confirm(`정말 취소하시겠습니까?\n\n출발/도착 2개 레코드가 모두 취소됩니다.`)) return;
      
      try {
        const res = await fetch(`/pickup/api/${currentPickupData.id}`, { 
          method: 'DELETE' 
        });
        
        if (res.ok) {
          const result = await res.json();
          alert(`✅ 취소 완료 (${result.deletedCount}개 레코드)`);
          detailModalInstance.hide();
          loadCalendar(); // 달력 새로고침
        } else {
          const err = await res.json();
          alert('❌ 취소 실패: ' + err.error);
        }
      } catch (error) {
        alert('❌ 오류: ' + error.message);
      }
    }
    
    // 일별 전체보기 - 새 창으로 열기
    function showDayView(date) {
      // 새 창으로 일별 스케줄 페이지 열기 (픽업 스케줄 관리 페이지)
      const url = `/pickup/schedule/daily?date=${date}`;
      window.open(url, '_blank', 'width=1600,height=900');
    }
    
    function changeMonth(delta) {
      currentCalendarMonth += delta;
      if (currentCalendarMonth > 12) {
        currentCalendarMonth = 1;
        currentCalendarYear++;
      } else if (currentCalendarMonth < 1) {
        currentCalendarMonth = 12;
        currentCalendarYear--;
      }
      loadCalendar();
    }
    
    async function loadCalendar() {
      try {
        const res = await fetch(`/pickup/api/calendar?year=${currentCalendarYear}&month=${currentCalendarMonth}`);
        const { pickups } = await res.json();
        
        console.log('📅 달력 데이터:', pickups.length, '개');
        
        // 월 표시
        document.getElementById('currentMonth').textContent = `${currentCalendarYear}년 ${currentCalendarMonth}월`;
      
      // 전역 예약 데이터 초기화
      allPickups = {};
      
      // 날짜별로 예약 그룹화 (record_type 기준)
      const pickupsByDate = {};
      pickups.forEach(p => {
        const date = p.display_date?.split('T')[0]; // 표시 날짜
        if (!date) return;
        
        if (!pickupsByDate[date]) {
          pickupsByDate[date] = { departures: [], arrivals: [], hotelPickups: [] };
        }
        
        // record_type에 따라 분류
        if (p.record_type === 'departure') {
          pickupsByDate[date].departures.push(p);
        } else if (p.record_type === 'arrival') {
          pickupsByDate[date].arrivals.push(p);
        } else if (p.record_type === 'hotel_pickup') {
          pickupsByDate[date].hotelPickups.push(p);
        }
        
        allPickups[p.id] = p; // 전역 저장
      });
      
      console.log('📋 날짜별 그룹:', Object.keys(pickupsByDate));
      
      // 달력 그리기
      const daysInMonth = new Date(currentCalendarYear, currentCalendarMonth, 0).getDate();
      const firstDay = new Date(currentCalendarYear, currentCalendarMonth - 1, 1).getDay();
      
      let html = '';
      // 요일 헤더
      ['일', '월', '화', '수', '목', '금', '토'].forEach(day => {
        html += `<div class="calendar-header">${day}</div>`;
      });
      
      // 빈 칸
      for (let i = 0; i < firstDay; i++) {
        html += '<div class="calendar-day"></div>';
      }
      
      // 날짜
      const today = new Date().toISOString().split('T')[0];
      for (let day = 1; day <= daysInMonth; day++) {
        const dateStr = `${currentCalendarYear}-${String(currentCalendarMonth).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        const dayPickups = pickupsByDate[dateStr] || { departures: [], arrivals: [], hotelPickups: [] };
        const hasPickup = dayPickups.departures.length > 0 || dayPickups.arrivals.length > 0 || dayPickups.hotelPickups.length > 0;
        const isToday = dateStr === today;
        
        // 마감날짜 확인
        const isClosed = closedDatesCache.some(item => {
          const itemDate = new Date(item.closed_date).toISOString().split('T')[0];
          return itemDate === dateStr;
        });
        
        // 통계 계산 (내부/외부 구분)
        const allPickups = [...dayPickups.departures, ...dayPickups.arrivals, ...dayPickups.hotelPickups];
        
        // 한국 공항 리스트
        const koreaAirports = ['ICN', 'PUS', 'GMP', 'TAE', 'CJU'];
        
        // 한국 컬럼: 한국에서 출발하거나 한국으로 도착하는 항공편 (한국 관점)
        const koreaPickups = allPickups.filter(p => {
          // 한국 출발 (departure record)
          if (p.record_type === 'departure' && koreaAirports.includes(p.departure_airport)) {
            return true;
          }
          // 한국 도착 (arrival record)
          if (p.record_type === 'arrival' && koreaAirports.includes(p.arrival_airport)) {
            return true;
          }
          return false;
        });
        const koreaCount = koreaPickups.length;
        const koreaPax = koreaPickups.reduce((sum, p) => sum + (p.passenger_count || 0), 0);
        
        // 괌 컬럼: 괌에서 출발하거나 괌으로 도착하는 항공편 (괌 관점)
        const guamPickups = allPickups.filter(p => {
          // 괌 출발 (departure record)
          if (p.record_type === 'departure' && p.departure_airport === 'GUM') {
            return true;
          }
          // 괌 도착 (arrival record)
          if (p.record_type === 'arrival' && p.arrival_airport === 'GUM') {
            return true;
          }
          return false;
        });
        const guamCount = guamPickups.length;
        const guamPax = guamPickups.reduce((sum, p) => sum + (p.passenger_count || 0), 0);
        
        html += `<div class="calendar-day ${hasPickup ? 'has-pickup' : ''} ${isToday ? 'today' : ''} ${isClosed ? 'closed' : ''}">`;
        html += `<div class="calendar-date">${day}일</div>`;
        
        // 통계 요약 (데이터가 있을 때만)
        if (hasPickup) {
          html += `<div class="day-summary" style="font-size: 0.65rem; line-height: 1.3;">`;
          if (koreaCount > 0) {
            html += `🇰🇷 ${koreaCount}건(${koreaPax}명) `;
          }
          if (guamCount > 0) {
            html += `🇬🇺 ${guamCount}건(${guamPax}명)`;
          }
          html += `</div>`;
        }
        
        // 전체보기 버튼 (예약 없어도 표시)
        html += `
          <button class="btn btn-sm btn-outline-primary w-100 mb-2" style="font-size: 0.7rem; padding: 2px 4px;" onclick="showDayView('${dateStr}')">
            📋 전체보기
          </button>
        `;
        
        // 픽업 데이터를 한국/괌으로 시간순 정렬 (이미 위에서 분류됨)
        const sortByTime = (a, b) => (a.display_time || '').localeCompare(b.display_time || '');
        koreaPickups.sort(sortByTime);
        guamPickups.sort(sortByTime);
        
        // 양쪽 컬럼으로 분할 표시
        html += `<div class="calendar-day-split">`;
        
        // 왼쪽: 한국 기준
        html += `<div class="calendar-day-column column-korea">`;
        html += `<div class="calendar-day-column-header">🇰🇷 한국</div>`;
        
        koreaPickups.forEach(p => {
          const time = p.display_time?.substring(0, 5) || '';
          const flightNum = p.flight_number || '';
          const isDeparture = p.record_type === 'departure';
          const bgColor = isDeparture ? '#e3f2fd' : '#ffebee';
          const borderColor = isDeparture ? '#2196f3' : '#f44336';
          const textColor = isDeparture ? '#1565c0' : '#c62828';
          const icon = isDeparture ? '✈️' : '🛬';
          
          html += `
            <div class="pickup-item" style="background: ${bgColor}; border-left-color: ${borderColor}; color: ${textColor}; cursor: pointer;" onclick="showPickupDetail(${p.id})">
              <div style="font-weight: bold;">${icon} ${flightNum} ${time}</div>
              <div style="font-size: 0.85em;">${p.customer_name} (${p.passenger_count}명)</div>
            </div>
          `;
        });
        
        html += `</div>`;
        
        // 오른쪽: 괌 기준
        html += `<div class="calendar-day-column column-guam">`;
        html += `<div class="calendar-day-column-header">🇬🇺 괌</div>`;
        
        guamPickups.forEach(p => {
          const time = p.display_time?.substring(0, 5) || '';
          const flightNum = p.flight_number || '';
          const isDeparture = p.record_type === 'departure';
          const bgColor = isDeparture ? '#e3f2fd' : '#ffebee';
          const borderColor = isDeparture ? '#2196f3' : '#f44336';
          const textColor = isDeparture ? '#1565c0' : '#c62828';
          const icon = isDeparture ? '✈️' : '🛬';
          
          html += `
            <div class="pickup-item" style="background: ${bgColor}; border-left-color: ${borderColor}; color: ${textColor}; cursor: pointer;" onclick="showPickupDetail(${p.id})">
              <div style="font-weight: bold;">${icon} ${flightNum} ${time}</div>
              <div style="font-size: 0.85em;">${p.customer_name} (${p.passenger_count}명)</div>
            </div>
          `;
        });
        
        html += `</div>`;
        html += `</div>`;
        
        html += `</div>`;
      }
      
      document.getElementById('calendar').innerHTML = html;
      } catch (error) {
        console.error('❌ 달력 로드 실패:', error);
        alert('달력을 불러오는데 실패했습니다: ' + error.message);
      }
    }
    
    // 모달 닫히면 달력 새로고침 (데이터 변경 반영)
    document.getElementById('addModal').addEventListener('hidden.bs.modal', () => {
      loadCalendar();
    });
    
    // 저장
    async function savePickup() {
      const modal = document.getElementById('addModal');
      const editId = modal.dataset.editId;
      const isEdit = !!editId;
      
      const flightNum = document.getElementById('flightNumber').value;
      const flight = FLIGHTS[flightNum];
      
      if (!flight) {
        alert('편명을 선택해주세요.');
        return;
      }
      
      const data = {
        pickup_type: flight.arrival_airport === 'GUM' ? 'airport_to_hotel' : 'hotel_to_airport',
        flight_date: document.getElementById('flightDate').value,
        flight_number: flightNum,
        agency_id: document.getElementById('agencyId').value,
        customer_name: document.getElementById('customerName').value,
        hotel_name: document.getElementById('hotelName').value,
        phone: document.getElementById('phone').value,
        kakao_id: document.getElementById('kakaoId').value,
        memo: document.getElementById('memo').value,
        adult_count: parseInt(document.getElementById('adultCount').value) || 0,
        child_count: parseInt(document.getElementById('childCount').value) || 0,
        infant_count: parseInt(document.getElementById('infantCount').value) || 0,
        luggage_count: parseInt(document.getElementById('luggageCount').value) || 0
      };
      
      try {
        let res, result;
        
        if (isEdit) {
          // 수정 모드
          res = await fetch(`/pickup/api/${editId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });
          
          if (res.ok) {
            result = await res.json();
            const msg = result.recreated 
              ? `✅ 수정 완료! (날짜/편명 변경으로 레코드 재생성)\n출발/도착 ${result.updatedCount || 2}개 레코드가 갱신되었습니다.`
              : `✅ 수정 완료!\n출발/도착 ${result.updatedCount || 2}개 레코드가 수정되었습니다.`;
            alert(msg);
          }
        } else {
          // 등록 모드
          res = await fetch('/pickup/api/create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });
          
          if (res.ok) {
            result = await res.json();
            alert(`✅ 등록 완료!\n출발/도착 ${result.data.length}개 레코드가 저장되었습니다.`);
          }
        }
        
        if (res.ok) {
          addModalInstance.hide();
          loadCalendar(); // 달력 새로고침
        } else {
          const err = await res.json();
          alert('❌ 오류: ' + err.error);
        }
      } catch (error) {
        alert('❌ 오류: ' + error.message);
      }
    }
    
    // 삭제
    async function deletePickup(id) {
      if (!confirm('정말 취소하시겠습니까?')) return;
      
      await fetch(`/pickup/api/${id}`, { method: 'DELETE' });
      alert('✅ 취소 완료');
      loadPickups();
    }
    
    // 영문 이름 재변환
    async function reconvertNames() {
      if (!confirm('모든 픽업 데이터의 영문 이름을 새로운 변환 방식으로 재변환하시겠습니까?\n\n(예: 김영희 → KIM YEONGHUI, 이조형 → LEE JOHYEONG)\n\n시간이 다소 걸릴 수 있습니다.')) {
        return;
      }
      
      try {
        const response = await fetch('/pickup/api/reconvert-names', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
          alert(`✅ 완료!\n\n${result.message}\n\n성씨 특별 표기가 적용되었습니다:\n- 김 → KIM\n- 이 → LEE\n- 박 → PARK\n등 40개 성씨`);
          loadCalendar(); // 달력 새로고침
        } else {
          alert('❌ 재변환 실패: ' + result.error);
        }
      } catch (error) {
        console.error('재변환 오류:', error);
        alert('❌ 재변환 중 오류가 발생했습니다: ' + error.message);
      }
    }
    
    // 로그아웃
    async function logout() {
      if (confirm('로그아웃 하시겠습니까?')) {
        try {
          await fetch('/admin/logout', { method: 'POST' });
          window.location.href = '/pickup/login';
        } catch (error) {
          console.error('로그아웃 오류:', error);
          window.location.href = '/pickup/login';
        }
      }
    }
    
    // 마감날짜 관리 모달 열기
    function showClosedDatesModal() {
      loadClosedDatesList();
      closedDatesModalInstance.show();
    }
    
    // 마감날짜 목록 로드 (캐시)
    async function loadClosedDates() {
      try {
        const res = await fetch('/pickup/api/closed-dates');
        const data = await res.json();
        closedDatesCache = data.closedDates || [];
        console.log('✅ 마감날짜 로드 완료:', closedDatesCache.length, '건');
      } catch (error) {
        console.error('❌ 마감날짜 로드 실패:', error);
      }
    }
    
    // 마감날짜 목록 표시
    async function loadClosedDatesList() {
      try {
        await loadClosedDates(); // 최신 데이터 로드
        
        const container = document.getElementById('closedDatesList');
        
        if (closedDatesCache.length === 0) {
          container.innerHTML = '<div class="text-center text-muted py-3">등록된 마감날짜가 없습니다</div>';
          return;
        }
        
        let html = '';
        closedDatesCache.forEach(item => {
          const date = new Date(item.closed_date);
          const dateStr = date.toISOString().split('T')[0];
          const displayDate = `${date.getFullYear()}년 ${date.getMonth() + 1}월 ${date.getDate()}일`;
          
          html += `
            <div class="list-group-item d-flex justify-content-between align-items-center">
              <div>
                <strong class="text-danger">🚫 ${displayDate}</strong>
                ${item.reason ? `<br><small class="text-muted">${item.reason}</small>` : ''}
              </div>
              <button class="btn btn-sm btn-outline-danger" onclick="removeClosedDate(${item.id}, '${dateStr}')">
                <i class="bi bi-trash"></i> 해제
              </button>
            </div>
          `;
        });
        
        container.innerHTML = html;
      } catch (error) {
        console.error('❌ 마감날짜 목록 로드 실패:', error);
        document.getElementById('closedDatesList').innerHTML = 
          '<div class="alert alert-danger">목록을 불러올 수 없습니다</div>';
      }
    }
    
    // 마감날짜 등록
    async function addClosedDate() {
      const dateInput = document.getElementById('newClosedDate');
      const reasonInput = document.getElementById('closedReason');
      
      const date = dateInput.value;
      const reason = reasonInput.value;
      
      if (!date) {
        alert('마감날짜를 선택해주세요');
        return;
      }
      
      try {
        const res = await fetch('/pickup/api/closed-dates', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ closed_date: date, reason })
        });
        
        if (res.ok) {
          const result = await res.json();
          alert('✅ ' + result.message);
          
          // 입력 초기화
          dateInput.value = '';
          reasonInput.value = '';
          
          // 목록 새로고침
          await loadClosedDatesList();
          
          // 달력 새로고침
          loadCalendar();
        } else {
          const err = await res.json();
          alert('❌ ' + err.error);
        }
      } catch (error) {
        alert('❌ 오류: ' + error.message);
      }
    }
    
    // 마감날짜 삭제 (해제)
    async function removeClosedDate(id, dateStr) {
      if (!confirm(`${dateStr} 마감을 해제하시겠습니까?`)) return;
      
      try {
        const res = await fetch(`/pickup/api/closed-dates/${id}`, {
          method: 'DELETE'
        });
        
        if (res.ok) {
          const result = await res.json();
          alert('✅ ' + result.message);
          
          // 목록 새로고침
          await loadClosedDatesList();
          
          // 달력 새로고침
          loadCalendar();
        } else {
          const err = await res.json();
          alert('❌ ' + err.error);
        }
      } catch (error) {
        alert('❌ 오류: ' + error.message);
      }
    }
    
    // 출발일 선택 시 마감 체크
    async function checkClosedDate() {
      const dateInput = document.getElementById('flightDate');
      const warning = document.getElementById('closedDateWarning');
      const reasonSpan = document.getElementById('closedDateReason');
      
      const selectedDate = dateInput.value;
      
      if (!selectedDate) {
        warning.style.display = 'none';
        dateInput.classList.remove('date-input-warning');
        return;
      }
      
      // 캐시에서 확인
      const closedItem = closedDatesCache.find(item => {
        const itemDate = new Date(item.closed_date).toISOString().split('T')[0];
        return itemDate === selectedDate;
      });
      
      if (closedItem) {
        dateInput.classList.add('date-input-warning');
        warning.style.display = 'block';
        reasonSpan.textContent = closedItem.reason ? `사유: ${closedItem.reason}` : '예약 마감된 날짜입니다';
      } else {
        dateInput.classList.remove('date-input-warning');
        warning.style.display = 'none';
      }
      
      // 자동 계산도 함께 실행
      autoCalculate();
    }
    
    // ==================== 신규예약 관리 ====================
    
    let pendingModalInstance;
    let editReservationModalInstance;
    
    // 모달 인스턴스 초기화 (기존 DOMContentLoaded에 추가)
    document.addEventListener('DOMContentLoaded', () => {
      pendingModalInstance = new bootstrap.Modal(document.getElementById('pendingModal'));
      editReservationModalInstance = new bootstrap.Modal(document.getElementById('editReservationModal'));
      
      // 신규예약 카운트 로드
      loadPendingCount();
      
      // 5초마다 신규예약 카운트 갱신
      setInterval(loadPendingCount, 5000);
    });
    
    // 신규예약 카운트 로드
    async function loadPendingCount() {
      try {
        const res = await fetch('/pickup/api/pending-count');
        const data = await res.json();
        document.getElementById('pendingCount').textContent = data.pending || 0;
      } catch (error) {
        console.error('카운트 로드 실패:', error);
      }
    }
    
    // 신규예약 모달 열기
    async function showPendingModal() {
      await loadPendingReservations();
      pendingModalInstance.show();
    }
    
    // 신규예약 리스트 로드
    async function loadPendingReservations() {
      try {
        const res = await fetch('/pickup/api/pending-reservations');
        const data = await res.json();
        
        // 검수 대기 리스트
        const pendingList = data.pending || [];
        const rejectedList = data.rejected || [];
        
        // 연결된 예약 그룹화 (departure만 표시, arrival은 포함)
        const groupedPending = groupLinkedReservations(pendingList);
        const groupedRejected = groupLinkedReservations(rejectedList);
        
        document.getElementById('pendingTabCount').textContent = groupedPending.length;
        document.getElementById('rejectedTabCount').textContent = groupedRejected.length;
        
        // 검수 대기 렌더링
        if (groupedPending.length === 0) {
          document.getElementById('pendingReservations').innerHTML = `
            <div class="text-center text-muted py-5">
              <i class="bi bi-inbox" style="font-size: 3rem;"></i>
              <p class="mt-2">검수 대기 중인 예약이 없습니다</p>
            </div>
          `;
        } else {
          document.getElementById('pendingReservations').innerHTML = groupedPending.map(p => renderReservationCard(p, 'pending')).join('');
        }
        
        // 미확정 렌더링
        if (groupedRejected.length === 0) {
          document.getElementById('rejectedReservations').innerHTML = `
            <div class="text-center text-muted py-5">
              <i class="bi bi-inbox" style="font-size: 3rem;"></i>
              <p class="mt-2">미확정 예약이 없습니다</p>
            </div>
          `;
        } else {
          document.getElementById('rejectedReservations').innerHTML = groupedRejected.map(p => renderReservationCard(p, 'rejected')).join('');
        }
        
        loadPendingCount();
      } catch (error) {
        console.error('예약 로드 실패:', error);
        alert('예약 목록을 불러올 수 없습니다.');
      }
    }
    
    // 연결된 예약 그룹화 (출발+도착을 하나로)
    function groupLinkedReservations(reservations) {
      const grouped = [];
      const processedIds = new Set();
      
      reservations.forEach(reservation => {
        // 이미 처리된 예약은 건너뛰기
        if (processedIds.has(reservation.id)) return;
        
        // departure 레코드만 메인으로 표시
        if (reservation.record_type === 'departure') {
          // 연결된 arrival 레코드 찾기
          const linkedArrival = reservations.find(r => r.id === reservation.linked_id);
          
          // departure에 arrival 정보 추가
          reservation.arrival_record = linkedArrival;
          grouped.push(reservation);
          
          processedIds.add(reservation.id);
          if (linkedArrival) {
            processedIds.add(linkedArrival.id);
          }
        } 
        // linked_id가 없는 arrival 레코드 (연결 안된 단독 예약)
        else if (!reservation.linked_id) {
          grouped.push(reservation);
          processedIds.add(reservation.id);
        }
      });
      
      return grouped;
    }
    
    // 공항 코드를 도시 이름으로 변환
    function getAirportName(code) {
      const airportNames = {
        'ICN': '인천',
        'GMP': '김포',
        'PUS': '부산',
        'CJU': '제주',
        'GUM': '괌'
      };
      return airportNames[code] || code;
    }
    
    // 날짜 포맷 (YYYY-MM-DD만 추출)
    function formatDate(dateStr) {
      if (!dateStr) return '';
      if (dateStr.includes('T') || dateStr.includes('Z')) {
        return dateStr.split('T')[0];
      }
      return dateStr;
    }
    
    // 예약 카드 렌더링 (출발편만 표시)
    function renderReservationCard(pickup, type) {
      const hasRoundtrip = pickup.arrival_record;
      const depAirport = pickup.departure_airport || 'GUM';
      const depCity = getAirportName(depAirport);
      
      return `
        <div class="card mb-3" style="border-left: 4px solid #2196f3;">
          <div class="card-body" style="background: #e3f2fd;">
            <div class="d-flex justify-content-between align-items-start mb-2">
              <div class="flex-grow-1">
                <h6 class="mb-1" style="color: #2196f3;">✈️ <strong>${depCity}출발</strong></h6>
                <div class="mt-1">
                  <span class="badge bg-secondary me-2">📅 ${formatDate(pickup.display_date)}</span>
                  <span class="badge bg-primary me-2">✈️ ${pickup.flight_number}</span>
                  <span class="badge bg-info">👤 ${pickup.customer_name}</span>
                  ${pickup.agency_name ? `<span class="badge bg-success ms-2">🏢 ${pickup.agency_name}</span>` : ''}
                </div>
              </div>
              <span class="badge bg-secondary">ID: ${pickup.id}</span>
            </div>
            
            <div class="text-muted small mb-3">
              📅 ${pickup.display_date} ${pickup.display_time}<br>
              🏨 ${pickup.hotel_name}<br>
              👥 ${pickup.passenger_count}명 (성인:${pickup.adult_count}, 소아:${pickup.child_count}, 유아:${pickup.infant_count})<br>
              🧳 ${pickup.luggage_count}개<br>
              ${pickup.phone ? `📞 ${pickup.phone}<br>` : ''}
              ${pickup.kakao_id ? `💬 ${pickup.kakao_id}<br>` : ''}
              ${pickup.memo ? `📝 ${pickup.memo}` : ''}
            </div>
            
            <div class="btn-group w-100" role="group">
              ${type === 'pending' ? `
                <button class="btn btn-primary" onclick="confirmReservation(${pickup.id}, ${pickup.linked_id || 'null'})">
                  <i class="bi bi-check-circle-fill"></i> 예약 확정
                </button>
                <button class="btn btn-danger" onclick="rejectReservation(${pickup.id}, ${pickup.linked_id || 'null'})">
                  <i class="bi bi-x-circle-fill"></i> 미확정
                </button>
              ` : `
                <button class="btn btn-success" onclick="confirmReservation(${pickup.id}, ${pickup.linked_id || 'null'})">
                  <i class="bi bi-arrow-clockwise"></i> 확정으로 변경
                </button>
                <button class="btn btn-danger" onclick="deleteReservation(${pickup.id}, ${pickup.linked_id || 'null'})">
                  <i class="bi bi-trash-fill"></i> 예약 삭제
                </button>
              `}
              <button class="btn btn-warning" onclick="editReservation(${pickup.id})">
                <i class="bi bi-pencil-fill"></i> 수정
              </button>
            </div>
          </div>
        </div>
      `;
    }
    
    // 예약 확정 처리
    async function confirmReservation(id, linkedId) {
      if (!confirm('이 예약을 확정하시겠습니까?\n\n확정 시 달력에 표시됩니다.')) return;
      
      try {
        const res = await fetch(`/pickup/api/confirm-reservation`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id, linkedId })
        });
        
        if (res.ok) {
          alert('✅ 예약이 확정되었습니다!');
          await loadPendingReservations();
          loadCalendar(); // 달력 새로고침
        } else {
          const error = await res.json();
          alert('❌ 확정 실패: ' + (error.error || '알 수 없는 오류'));
        }
      } catch (error) {
        console.error('확정 오류:', error);
        alert('❌ 확정 실패: ' + error.message);
      }
    }
    
    // 예약 미확정 처리
    async function rejectReservation(id, linkedId) {
      const reason = prompt('미확정 사유를 입력하세요 (선택):');
      
      try {
        const res = await fetch(`/pickup/api/reject-reservation`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id, linkedId, reason })
        });
        
        if (res.ok) {
          alert('⚠️ 예약이 미확정 처리되었습니다.');
          loadPendingReservations();
        } else {
          const error = await res.json();
          alert('❌ 처리 실패: ' + (error.error || '알 수 없는 오류'));
        }
      } catch (error) {
        console.error('미확정 오류:', error);
        alert('❌ 처리 실패: ' + error.message);
      }
    }
    
    // 예약 삭제
    async function deleteReservation(id, linkedId) {
      if (!confirm('이 예약을 완전히 삭제하시겠습니까?\n\n삭제 후 복구할 수 없습니다.')) return;
      
      try {
        const res = await fetch(`/pickup/api/delete-reservation`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id, linkedId })
        });
        
        if (res.ok) {
          alert('✅ 예약이 삭제되었습니다.');
          loadPendingReservations();
        } else {
          const error = await res.json();
          alert('❌ 삭제 실패: ' + (error.error || '알 수 없는 오류'));
        }
      } catch (error) {
        console.error('삭제 오류:', error);
        alert('❌ 삭제 실패: ' + error.message);
      }
    }
    
    // 예약 수정 모달 열기
    async function editReservation(id) {
      try {
        const res = await fetch(`/pickup/api/pickup/${id}`);
        const pickup = await res.json();
        
        document.getElementById('editPickupId').value = pickup.id;
        document.getElementById('editCustomerName').value = pickup.customer_name || '';
        document.getElementById('editHotelName').value = pickup.hotel_name || '';
        document.getElementById('editPhone').value = pickup.phone || '';
        document.getElementById('editKakaoId').value = pickup.kakao_id || '';
        document.getElementById('editAdultCount').value = pickup.adult_count || 0;
        document.getElementById('editChildCount').value = pickup.child_count || 0;
        document.getElementById('editInfantCount').value = pickup.infant_count || 0;
        document.getElementById('editLuggageCount').value = pickup.luggage_count || 0;
        document.getElementById('editMemo').value = pickup.memo || '';
        
        editReservationModalInstance.show();
      } catch (error) {
        console.error('예약 로드 실패:', error);
        alert('예약 정보를 불러올 수 없습니다.');
      }
    }
    
    // 예약 수정 저장
    async function saveReservationEdit() {
      const id = document.getElementById('editPickupId').value;
      const data = {
        customer_name: document.getElementById('editCustomerName').value,
        hotel_name: document.getElementById('editHotelName').value,
        phone: document.getElementById('editPhone').value,
        kakao_id: document.getElementById('editKakaoId').value,
        adult_count: parseInt(document.getElementById('editAdultCount').value) || 0,
        child_count: parseInt(document.getElementById('editChildCount').value) || 0,
        infant_count: parseInt(document.getElementById('editInfantCount').value) || 0,
        luggage_count: parseInt(document.getElementById('editLuggageCount').value) || 0,
        memo: document.getElementById('editMemo').value
      };
      
      data.passenger_count = data.adult_count + data.child_count + data.infant_count;
      
      try {
        const res = await fetch(`/pickup/api/pickup/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        
        if (res.ok) {
          alert('✅ 예약이 수정되었습니다.');
          editReservationModalInstance.hide();
          loadPendingReservations();
        } else {
          const error = await res.json();
          alert('❌ 수정 실패: ' + (error.error || '알 수 없는 오류'));
        }
      } catch (error) {
        console.error('수정 오류:', error);
        alert('❌ 수정 실패: ' + error.message);
      }
    }
  </script>
</body>
</html>
