<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>항공편 관리</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
</head>
<body>
  <div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h2><i class="bi bi-airplane"></i> 항공편 관리</h2>
      <div>
        <button class="btn btn-outline-secondary me-2" onclick="location.href='/pickup'">
          <i class="bi bi-arrow-left"></i> 픽업 관리로
        </button>
        <button class="btn btn-primary" onclick="showAddModal()">
          <i class="bi bi-plus-circle"></i> 항공편 추가
        </button>
      </div>
    </div>

    <!-- 항공편 목록 -->
    <div class="card">
      <div class="card-header">
        <h5 class="mb-0"><i class="bi bi-list"></i> 등록된 항공편</h5>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-hover" id="flightsTable">
            <thead>
              <tr>
                <th>항공사</th>
                <th>편명</th>
                <th>출발공항</th>
                <th>도착공항</th>
                <th>출발시간</th>
                <th>도착시간</th>
                <th>운항요일</th>
                <th>상태</th>
                <th>관리</th>
              </tr>
            </thead>
            <tbody id="flightsBody">
              <!-- 동적 로드 -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- 추가/수정 모달 -->
  <div class="modal fade" id="flightModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modalTitle">항공편 추가</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form id="flightForm">
            <input type="hidden" id="flightId">
            
            <div class="mb-3">
              <label class="form-label">항공사 *</label>
              <select class="form-select" id="airline" required>
                <option value="">선택</option>
                <option value="대한항공">대한항공 (KE)</option>
                <option value="아시아나">아시아나 (OZ)</option>
                <option value="진에어">진에어 (LJ)</option>
                <option value="티웨이">티웨이 (TW)</option>
                <option value="유나이티드">유나이티드 (UA)</option>
                <option value="일본항공">일본항공 (JL)</option>
                <option value="ANA">ANA (NH)</option>
              </select>
            </div>

            <div class="mb-3">
              <label class="form-label">편명 *</label>
              <input type="text" class="form-control" id="flightNumber" placeholder="예: KE111" required>
              <small class="text-muted">항공사 코드 + 숫자 (예: KE111, OZ456)</small>
            </div>

            <div class="mb-3">
              <label class="form-label">출발공항 *</label>
              <input type="text" class="form-control" id="departureAirport" placeholder="예: 인천국제공항(ICN)" list="departureAirports" required>
              <datalist id="departureAirports">
                <option value="인천국제공항(ICN)">
                <option value="괌국제공항(GUM)">
                <option value="나리타공항(NRT)">
                <option value="김포공항(GMP)">
                <option value="제주공항(CJU)">
                <option value="후쿠오카공항(FUK)">
              </datalist>
              <small class="text-muted">공항명과 코드를 입력하세요</small>
            </div>

            <div class="mb-3">
              <label class="form-label">도착공항 *</label>
              <input type="text" class="form-control" id="arrivalAirport" placeholder="예: 괌국제공항(GUM)" list="arrivalAirports" required>
              <datalist id="arrivalAirports">
                <option value="괌국제공항(GUM)">
                <option value="인천국제공항(ICN)">
                <option value="나리타공항(NRT)">
                <option value="김포공항(GMP)">
                <option value="사이판공항(SPN)">
                <option value="팔라우공항(ROR)">
              </datalist>
              <small class="text-muted">공항명과 코드를 입력하세요</small>
            </div>

            <div class="row">
              <div class="col-md-6 mb-3">
                <label class="form-label">출발시간 *</label>
                <input type="time" class="form-control" id="departureTime" required>
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label">도착시간 *</label>
                <input type="time" class="form-control" id="arrivalTime" required>
                <small class="text-muted">현지 시간 기준</small>
              </div>
            </div>

            <div class="mb-3">
              <label class="form-label">운항요일</label>
              <div class="btn-group btn-group-sm w-100" role="group">
                <input type="checkbox" class="btn-check" id="day1" value="1">
                <label class="btn btn-outline-primary" for="day1">월</label>
                
                <input type="checkbox" class="btn-check" id="day2" value="2">
                <label class="btn btn-outline-primary" for="day2">화</label>
                
                <input type="checkbox" class="btn-check" id="day3" value="3">
                <label class="btn btn-outline-primary" for="day3">수</label>
                
                <input type="checkbox" class="btn-check" id="day4" value="4">
                <label class="btn btn-outline-primary" for="day4">목</label>
                
                <input type="checkbox" class="btn-check" id="day5" value="5">
                <label class="btn btn-outline-primary" for="day5">금</label>
                
                <input type="checkbox" class="btn-check" id="day6" value="6">
                <label class="btn btn-outline-primary" for="day6">토</label>
                
                <input type="checkbox" class="btn-check" id="day7" value="7">
                <label class="btn btn-outline-primary" for="day7">일</label>
              </div>
              <small class="text-muted">선택하지 않으면 매일 운항</small>
            </div>

            <div class="mb-3">
              <label class="form-label">메모</label>
              <textarea class="form-control" id="notes" rows="2" placeholder="예: 심야편, 새벽 출발 등"></textarea>
            </div>

            <div class="mb-3">
              <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="isActive" checked>
                <label class="form-check-label" for="isActive">활성화</label>
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
          <button type="button" class="btn btn-primary" onclick="saveFlight()">저장</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let modal;
    let editingId = null;

    document.addEventListener('DOMContentLoaded', () => {
      modal = new bootstrap.Modal(document.getElementById('flightModal'));
      loadFlights();
    });

    // 항공편 목록 로드
    async function loadFlights() {
      try {
        const res = await fetch('/pickup/api/flights/all');
        const flights = await res.json();
        
        const tbody = document.getElementById('flightsBody');
        if (flights.length === 0) {
          tbody.innerHTML = '<tr><td colspan="9" class="text-center">등록된 항공편이 없습니다</td></tr>';
          return;
        }

        tbody.innerHTML = flights.map(f => `
          <tr>
            <td>${f.airline || '-'}</td>
            <td><strong>${f.flight_number}</strong></td>
            <td><small>${f.departure_airport || '-'}</small></td>
            <td><small>${f.arrival_airport || '-'}</small></td>
            <td>${f.departure_time?.substring(0,5) || '-'}</td>
            <td>${f.arrival_time?.substring(0,5) || '-'}</td>
            <td>${formatDaysOfWeek(f.days_of_week)}</td>
            <td>
              ${f.is_active 
                ? '<span class="badge bg-success">활성</span>' 
                : '<span class="badge bg-secondary">비활성</span>'}
            </td>
            <td>
              <button class="btn btn-sm btn-outline-primary" onclick="editFlight(${f.id})">
                <i class="bi bi-pencil"></i>
              </button>
              <button class="btn btn-sm btn-outline-danger" onclick="deleteFlight(${f.id}, '${f.flight_number}')">
                <i class="bi bi-trash"></i>
              </button>
            </td>
          </tr>
        `).join('');
      } catch (error) {
        console.error('항공편 로드 실패:', error);
        alert('항공편 목록을 불러오는데 실패했습니다.');
      }
    }

    // 운항요일 포맷
    function formatDaysOfWeek(days) {
      if (!days || days === '1,2,3,4,5,6,7') return '매일';
      const dayNames = ['', '월', '화', '수', '목', '금', '토', '일'];
      return days.split(',').map(d => dayNames[d]).join(',');
    }

    // 추가 모달 표시
    function showAddModal() {
      editingId = null;
      document.getElementById('modalTitle').textContent = '항공편 추가';
      document.getElementById('flightForm').reset();
      document.getElementById('flightId').value = '';
      document.getElementById('isActive').checked = true;
      
      // 모든 요일 체크
      for (let i = 1; i <= 7; i++) {
        document.getElementById(`day${i}`).checked = true;
      }
      
      modal.show();
    }

    // 수정 모달
    async function editFlight(id) {
      try {
        const res = await fetch(`/pickup/api/flights/${id}`);
        const flight = await res.json();
        
        editingId = id;
        document.getElementById('modalTitle').textContent = '항공편 수정';
        document.getElementById('flightId').value = id;
        document.getElementById('airline').value = flight.airline || '';
        document.getElementById('flightNumber').value = flight.flight_number;
        document.getElementById('departureAirport').value = flight.departure_airport || '';
        document.getElementById('arrivalAirport').value = flight.arrival_airport || '';
        document.getElementById('departureTime').value = flight.departure_time?.substring(0,5) || '';
        document.getElementById('arrivalTime').value = flight.arrival_time?.substring(0,5) || '';
        document.getElementById('notes').value = flight.notes || '';
        document.getElementById('isActive').checked = flight.is_active;
        
        // 운항요일 체크
        const days = flight.days_of_week?.split(',') || [];
        for (let i = 1; i <= 7; i++) {
          document.getElementById(`day${i}`).checked = days.includes(String(i));
        }
        
        modal.show();
      } catch (error) {
        console.error('항공편 로드 실패:', error);
        alert('항공편 정보를 불러오는데 실패했습니다.');
      }
    }

    // 저장
    async function saveFlight() {
      const form = document.getElementById('flightForm');
      if (!form.checkValidity()) {
        form.reportValidity();
        return;
      }

      // 운항요일 수집
      const days = [];
      for (let i = 1; i <= 7; i++) {
        if (document.getElementById(`day${i}`).checked) {
          days.push(i);
        }
      }

      const data = {
        airline: document.getElementById('airline').value,
        flight_number: document.getElementById('flightNumber').value.toUpperCase(),
        departure_airport: document.getElementById('departureAirport').value,
        arrival_airport: document.getElementById('arrivalAirport').value,
        departure_time: document.getElementById('departureTime').value,
        arrival_time: document.getElementById('arrivalTime').value,
        days_of_week: days.length > 0 ? days.join(',') : '1,2,3,4,5,6,7',
        notes: document.getElementById('notes').value,
        is_active: document.getElementById('isActive').checked
      };

      try {
        const url = editingId 
          ? `/pickup/api/flights/${editingId}`
          : '/pickup/api/flights';
        
        const method = editingId ? 'PUT' : 'POST';
        
        const res = await fetch(url, {
          method,
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });

        if (!res.ok) {
          const error = await res.json();
          throw new Error(error.error || '저장 실패');
        }

        alert(editingId ? '항공편이 수정되었습니다.' : '항공편이 추가되었습니다.');
        modal.hide();
        loadFlights();
      } catch (error) {
        console.error('저장 실패:', error);
        alert('저장에 실패했습니다: ' + error.message);
      }
    }

    // 삭제
    async function deleteFlight(id, flightNumber) {
      if (!confirm(`${flightNumber} 항공편을 삭제하시겠습니까?`)) return;

      try {
        const res = await fetch(`/pickup/api/flights/${id}`, {
          method: 'DELETE'
        });

        if (!res.ok) throw new Error('삭제 실패');

        alert('항공편이 삭제되었습니다.');
        loadFlights();
      } catch (error) {
        console.error('삭제 실패:', error);
        alert('삭제에 실패했습니다.');
      }
    }
  </script>
</body>
</html>
