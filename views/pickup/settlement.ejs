<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>정산 관리</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    .settlement-card {
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 10px;
      transition: all 0.2s;
    }
    .settlement-card:hover {
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    .settlement-card.selected {
      background: #e3f2fd;
      border-color: #2196f3;
      border-width: 2px;
    }
  </style>
</head>
<body>
  <div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h2>💰 정산 관리</h2>
      <button class="btn btn-secondary" onclick="location.href='/pickup'">
        <i class="bi bi-arrow-left"></i> 픽업 관리로 돌아가기
      </button>
    </div>

    <!-- 탭 -->
    <ul class="nav nav-tabs mb-3" id="settlementTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="pending-tab" data-bs-toggle="tab" data-bs-target="#pending" type="button">
          ⏳ 정산 전 픽업건 <span class="badge bg-warning" id="pendingCount">0</span>
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="completed-tab" data-bs-toggle="tab" data-bs-target="#completed" type="button">
          ✅ 정산 완료 픽업건 <span class="badge bg-success" id="completedCount">0</span>
        </button>
      </li>
    </ul>

    <!-- 탭 내용 -->
    <div class="tab-content" id="settlementTabContent">
      <!-- 정산 전 -->
      <div class="tab-pane fade show active" id="pending" role="tabpanel">
        <!-- 검색 필터 -->
        <div class="card mb-3">
          <div class="card-body">
            <div class="row g-3">
              <div class="col-md-3">
                <label class="form-label">업체</label>
                <select class="form-select" id="pendingAgency">
                  <option value="">전체 업체</option>
                </select>
              </div>
              <div class="col-md-3">
                <label class="form-label">출발일 시작</label>
                <input type="date" class="form-control" id="pendingStartDate">
              </div>
              <div class="col-md-3">
                <label class="form-label">출발일 종료</label>
                <input type="date" class="form-control" id="pendingEndDate">
              </div>
              <div class="col-md-3 d-flex align-items-end gap-2">
                <button class="btn btn-primary flex-fill" onclick="searchPending()">
                  <i class="bi bi-search"></i> 검색
                </button>
                <button class="btn btn-outline-secondary flex-fill" onclick="resetPendingFilter()">
                  <i class="bi bi-arrow-clockwise"></i> 초기화
                </button>
              </div>
            </div>
          </div>
        </div>

        <div class="d-flex justify-content-between align-items-center mb-3">
          <div>
            <button class="btn btn-sm btn-outline-secondary" onclick="toggleSelectAll()">
              <i class="bi bi-check-square"></i> 전체 선택
            </button>
            <span class="ms-2 text-muted" id="selectedInfo">선택: 0건</span>
          </div>
          <button class="btn btn-success" onclick="completeSettlement()" id="completeBtn" disabled>
            <i class="bi bi-check-circle"></i> 정산 완료 처리
          </button>
        </div>
        
        <div id="pendingList">
          <div class="text-center text-muted py-5">
            <i class="bi bi-hourglass-split" style="font-size: 3rem;"></i>
            <p class="mt-2">로딩중...</p>
          </div>
        </div>
        
        <!-- 통계 -->
        <div class="card mt-3 bg-light">
          <div class="card-body">
            <h6>📊 총 통계</h6>
            <div id="pendingStats">
              <span class="badge bg-primary me-2">총 건수: 0건</span>
              <span class="badge bg-info me-2">총 인원: 0명</span>
              <span class="badge bg-success me-2">성인: 0명</span>
              <span class="badge bg-warning me-2">소아: 0명</span>
              <span class="badge bg-secondary">유아: 0명</span>
            </div>
          </div>
        </div>
      </div>

      <!-- 정산 완료 -->
      <div class="tab-pane fade" id="completed" role="tabpanel">
        <!-- 검색 필터 -->
        <div class="card mb-3">
          <div class="card-body">
            <div class="row g-3">
              <div class="col-md-3">
                <label class="form-label">업체</label>
                <select class="form-select" id="completedAgency">
                  <option value="">전체 업체</option>
                </select>
              </div>
              <div class="col-md-3">
                <label class="form-label">출발일 시작</label>
                <input type="date" class="form-control" id="completedStartDate">
              </div>
              <div class="col-md-3">
                <label class="form-label">출발일 종료</label>
                <input type="date" class="form-control" id="completedEndDate">
              </div>
              <div class="col-md-3 d-flex align-items-end gap-2">
                <button class="btn btn-primary flex-fill" onclick="searchCompleted()">
                  <i class="bi bi-search"></i> 검색
                </button>
                <button class="btn btn-outline-secondary flex-fill" onclick="resetCompletedFilter()">
                  <i class="bi bi-arrow-clockwise"></i> 초기화
                </button>
              </div>
            </div>
          </div>
        </div>

        <div id="completedList">
          <div class="text-center text-muted py-5">
            <i class="bi bi-hourglass-split" style="font-size: 3rem;"></i>
            <p class="mt-2">로딩중...</p>
          </div>
        </div>
        
        <!-- 통계 -->
        <div class="card mt-3 bg-light">
          <div class="card-body">
            <h6>📊 총 통계</h6>
            <div id="completedStats">
              <span class="badge bg-primary me-2">총 건수: 0건</span>
              <span class="badge bg-info me-2">총 인원: 0명</span>
              <span class="badge bg-success me-2">성인: 0명</span>
              <span class="badge bg-warning me-2">소아: 0명</span>
              <span class="badge bg-secondary">유아: 0명</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let pendingPickups = [];
    let completedPickups = [];
    let selectedIds = new Set();

    let allPendingPickups = []; // 전체 데이터
    let allCompletedPickups = []; // 전체 데이터
    let agencies = []; // 업체 목록

    document.addEventListener('DOMContentLoaded', () => {
      loadAgencies();
      loadPending();
      
      // 정산 완료 탭 초기 메시지
      document.getElementById('completedList').innerHTML = `
        <div class="text-center text-muted py-5">
          <i class="bi bi-info-circle" style="font-size: 3rem;"></i>
          <p class="mt-2">검색 조건을 선택하고 검색 버튼을 클릭하세요</p>
        </div>
      `;
    });

    // 업체 목록 로드
    async function loadAgencies() {
      try {
        const res = await fetch('/pickup/api/agencies');
        const data = await res.json();
        agencies = data.agencies || [];
        
        // 정산 전 업체 드롭다운
        let options = '<option value="">전체 업체</option>';
        agencies.forEach(a => {
          options += `<option value="${a.id}">${a.agency_name}</option>`;
        });
        document.getElementById('pendingAgency').innerHTML = options;
        document.getElementById('completedAgency').innerHTML = options;
      } catch (error) {
        console.error('❌ 업체 목록 조회 실패:', error);
      }
    }

    // 정산 전 목록 로드 (초기 로드 - 전체)
    async function loadPending() {
      document.getElementById('pendingList').innerHTML = `
        <div class="text-center text-muted py-5">
          <i class="bi bi-info-circle" style="font-size: 3rem;"></i>
          <p class="mt-2">검색 조건을 선택하고 검색 버튼을 클릭하세요</p>
        </div>
      `;
      updatePendingStats([]);
    }

    // 정산 전 검색
    async function searchPending() {
      const agencyId = document.getElementById('pendingAgency').value;
      const startDate = document.getElementById('pendingStartDate').value;
      const endDate = document.getElementById('pendingEndDate').value;
      
      try {
        // 쿼리 파라미터 구성
        let url = '/pickup/api/settlement/pending?';
        const params = [];
        
        if (agencyId) params.push(`agency_id=${agencyId}`);
        if (startDate) params.push(`start_date=${startDate}`);
        if (endDate) params.push(`end_date=${endDate}`);
        
        url += params.join('&');
        
        const res = await fetch(url);
        const data = await res.json();
        pendingPickups = data.pickups || [];
        
        renderPending();
      } catch (error) {
        console.error('❌ 정산 전 목록 조회 실패:', error);
        document.getElementById('pendingList').innerHTML = `
          <div class="alert alert-danger">데이터 조회 실패: ${error.message}</div>
        `;
      }
    }

    // 정산 전 렌더링
    function renderPending() {
      document.getElementById('pendingCount').textContent = pendingPickups.length;
      
      if (pendingPickups.length === 0) {
        document.getElementById('pendingList').innerHTML = `
          <div class="text-center text-muted py-5">
            <i class="bi bi-check-circle" style="font-size: 3rem; color: #28a745;"></i>
            <p class="mt-2">정산할 픽업건이 없습니다</p>
          </div>
        `;
        updatePendingStats([]);
        return;
      }
      
      let html = '';
      pendingPickups.forEach(p => {
        const isSelected = selectedIds.has(p.id);
        html += `
          <div class="settlement-card ${isSelected ? 'selected' : ''}" id="card-${p.id}">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="${p.id}" 
                     id="check-${p.id}" onchange="toggleSelect(${p.id})" ${isSelected ? 'checked' : ''}>
              <label class="form-check-label w-100" for="check-${p.id}">
                <div class="row">
                  <div class="col-md-6">
                    <strong>${p.flight_number || '-'}</strong> 
                    <span class="badge bg-primary">출발</span>
                    <span class="badge bg-info">${p.passenger_count}명</span>
                    <br>
                    <small class="text-muted">
                      ${p.departure_airport} → ${p.arrival_airport} | 
                      ${p.display_date?.split('T')[0]} ${p.display_time?.substring(0,5)}
                    </small>
                  </div>
                  <div class="col-md-4">
                    <small>
                      👤 ${p.customer_name}<br>
                      🏨 ${p.hotel_name}<br>
                      ${p.agency_name ? `🏢 ${p.agency_name}` : ''}
                    </small>
                  </div>
                  <div class="col-md-2 text-end">
                    <small class="text-muted">
                      성인: ${p.adult_count || 0}<br>
                      소아: ${p.child_count || 0}<br>
                      유아: ${p.infant_count || 0}
                    </small>
                  </div>
                </div>
                ${p.memo ? `<div class="mt-2 p-2 bg-light rounded"><small>📝 ${p.memo}</small></div>` : ''}
              </label>
            </div>
          </div>
        `;
      });
      
      document.getElementById('pendingList').innerHTML = html;
      updateSelectedInfo();
      updatePendingStats(pendingPickups);
    }

    // 정산 전 통계 업데이트
    function updatePendingStats(pickups) {
      const totalCount = pickups.length;
      const totalPax = pickups.reduce((sum, p) => sum + (p.passenger_count || 0), 0);
      const totalAdults = pickups.reduce((sum, p) => sum + (p.adult_count || 0), 0);
      const totalChildren = pickups.reduce((sum, p) => sum + (p.child_count || 0), 0);
      const totalInfants = pickups.reduce((sum, p) => sum + (p.infant_count || 0), 0);
      
      document.getElementById('pendingStats').innerHTML = `
        <span class="badge bg-primary me-2">총 건수: ${totalCount}건</span>
        <span class="badge bg-info me-2">총 인원: ${totalPax}명</span>
        <span class="badge bg-success me-2">성인: ${totalAdults}명</span>
        <span class="badge bg-warning me-2">소아: ${totalChildren}명</span>
        <span class="badge bg-secondary">유아: ${totalInfants}명</span>
      `;
    }

    // 정산 전 필터 초기화
    function resetPendingFilter() {
      document.getElementById('pendingAgency').value = '';
      document.getElementById('pendingStartDate').value = '';
      document.getElementById('pendingEndDate').value = '';
      pendingPickups = [];
      selectedIds.clear();
      document.getElementById('pendingList').innerHTML = `
        <div class="text-center text-muted py-5">
          <i class="bi bi-info-circle" style="font-size: 3rem;"></i>
          <p class="mt-2">검색 조건을 선택하고 검색 버튼을 클릭하세요</p>
        </div>
      `;
      updatePendingStats([]);
      updateSelectedInfo();
    }

    // 정산 완료 검색
    async function searchCompleted() {
      const agencyId = document.getElementById('completedAgency').value;
      const startDate = document.getElementById('completedStartDate').value;
      const endDate = document.getElementById('completedEndDate').value;
      
      try {
        // 쿼리 파라미터 구성
        let url = '/pickup/api/settlement/completed?';
        const params = [];
        
        if (agencyId) params.push(`agency_id=${agencyId}`);
        if (startDate) params.push(`start_date=${startDate}`);
        if (endDate) params.push(`end_date=${endDate}`);
        
        url += params.join('&');
        
        const res = await fetch(url);
        const data = await res.json();
        completedPickups = data.pickups || [];
        
        renderCompleted();
      } catch (error) {
        console.error('❌ 정산 완료 목록 조회 실패:', error);
        document.getElementById('completedList').innerHTML = `
          <div class="alert alert-danger">데이터 조회 실패: ${error.message}</div>
        `;
      }
    }

    // 정산 완료 렌더링
    function renderCompleted() {
      document.getElementById('completedCount').textContent = completedPickups.length;
      
      if (completedPickups.length === 0) {
        document.getElementById('completedList').innerHTML = `
          <div class="text-center text-muted py-5">
            <i class="bi bi-inbox" style="font-size: 3rem;"></i>
            <p class="mt-2">정산 완료된 픽업건이 없습니다</p>
          </div>
        `;
        updateCompletedStats([]);
        return;
      }
      
      let html = '';
      completedPickups.forEach(p => {
        const settlementDate = p.settlement_date ? new Date(p.settlement_date).toLocaleDateString('ko-KR') : '-';
        html += `
          <div class="settlement-card">
            <div class="row">
              <div class="col-md-5">
                <strong>${p.flight_number || '-'}</strong>
                <span class="badge bg-primary">출발</span>
                <span class="badge bg-info">${p.passenger_count}명</span>
                <br>
                <small class="text-muted">
                  ${p.departure_airport} → ${p.arrival_airport} | 
                  ${p.display_date?.split('T')[0]} ${p.display_time?.substring(0,5)}
                </small>
              </div>
              <div class="col-md-4">
                <small>
                  👤 ${p.customer_name}<br>
                  🏨 ${p.hotel_name}<br>
                  ${p.agency_name ? `🏢 ${p.agency_name}` : ''}
                </small>
              </div>
              <div class="col-md-3 text-end">
                <span class="badge bg-success">✅ 정산 완료</span><br>
                <small class="text-muted">${settlementDate}</small><br>
                <small class="text-muted">
                  성인: ${p.adult_count || 0} | 소아: ${p.child_count || 0} | 유아: ${p.infant_count || 0}
                </small>
              </div>
            </div>
            ${p.memo ? `<div class="mt-2 p-2 bg-light rounded"><small>📝 ${p.memo}</small></div>` : ''}
          </div>
        `;
      });
      
      document.getElementById('completedList').innerHTML = html;
      updateCompletedStats(completedPickups);
    }

    // 정산 완료 통계 업데이트
    function updateCompletedStats(pickups) {
      const totalCount = pickups.length;
      const totalPax = pickups.reduce((sum, p) => sum + (p.passenger_count || 0), 0);
      const totalAdults = pickups.reduce((sum, p) => sum + (p.adult_count || 0), 0);
      const totalChildren = pickups.reduce((sum, p) => sum + (p.child_count || 0), 0);
      const totalInfants = pickups.reduce((sum, p) => sum + (p.infant_count || 0), 0);
      
      document.getElementById('completedStats').innerHTML = `
        <span class="badge bg-primary me-2">총 건수: ${totalCount}건</span>
        <span class="badge bg-info me-2">총 인원: ${totalPax}명</span>
        <span class="badge bg-success me-2">성인: ${totalAdults}명</span>
        <span class="badge bg-warning me-2">소아: ${totalChildren}명</span>
        <span class="badge bg-secondary">유아: ${totalInfants}명</span>
      `;
    }

    // 정산 완료 필터 초기화
    function resetCompletedFilter() {
      document.getElementById('completedAgency').value = '';
      document.getElementById('completedStartDate').value = '';
      document.getElementById('completedEndDate').value = '';
      completedPickups = [];
      document.getElementById('completedList').innerHTML = `
        <div class="text-center text-muted py-5">
          <i class="bi bi-info-circle" style="font-size: 3rem;"></i>
          <p class="mt-2">검색 조건을 선택하고 검색 버튼을 클릭하세요</p>
        </div>
      `;
      updateCompletedStats([]);
    }

    // 선택 토글
    function toggleSelect(id) {
      if (selectedIds.has(id)) {
        selectedIds.delete(id);
        document.getElementById(`card-${id}`).classList.remove('selected');
      } else {
        selectedIds.add(id);
        document.getElementById(`card-${id}`).classList.add('selected');
      }
      updateSelectedInfo();
    }

    // 전체 선택/해제
    function toggleSelectAll() {
      if (pendingPickups.length === 0) {
        alert('선택할 픽업건이 없습니다');
        return;
      }
      
      const allChecked = selectedIds.size === pendingPickups.length && pendingPickups.length > 0;
      
      if (allChecked) {
        // 전체 해제
        pendingPickups.forEach(p => selectedIds.delete(p.id));
        document.querySelectorAll('#pending input[type="checkbox"]').forEach(cb => {
          cb.checked = false;
        });
        document.querySelectorAll('#pending .settlement-card').forEach(card => {
          card.classList.remove('selected');
        });
      } else {
        // 전체 선택
        pendingPickups.forEach(p => selectedIds.add(p.id));
        document.querySelectorAll('#pending input[type="checkbox"]').forEach(cb => {
          cb.checked = true;
        });
        document.querySelectorAll('#pending .settlement-card').forEach(card => {
          card.classList.add('selected');
        });
      }
      
      updateSelectedInfo();
    }

    // 선택 정보 업데이트
    function updateSelectedInfo() {
      document.getElementById('selectedInfo').textContent = `선택: ${selectedIds.size}건`;
      document.getElementById('completeBtn').disabled = selectedIds.size === 0;
    }

    // 정산 완료 처리
    async function completeSettlement() {
      if (selectedIds.size === 0) {
        alert('정산할 픽업건을 선택해주세요');
        return;
      }

      if (!confirm(`선택한 ${selectedIds.size}건을 정산 완료 처리하시겠습니까?`)) {
        return;
      }

      try {
        const res = await fetch('/pickup/api/settlement/complete', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ ids: Array.from(selectedIds) })
        });

        if (res.ok) {
          const result = await res.json();
          alert(`✅ ${result.count}건 정산 완료 처리되었습니다`);
          selectedIds.clear();
          // 검색 재실행
          searchPending();
        } else {
          const error = await res.json();
          alert('❌ 정산 처리 실패: ' + error.error);
        }
      } catch (error) {
        console.error('❌ 정산 처리 실패:', error);
        alert('❌ 정산 처리 실패: ' + error.message);
      }
    }
  </script>
</body>
</html>
