<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>업체 관리</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
</head>
<body>
  <div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <div>
        <h2>🏢 픽업 업체 관리</h2>
        <p class="text-muted mb-0">각 업체는 고유 코드로 직접 예약을 등록할 수 있습니다</p>
      </div>
      <div>
        <button class="btn btn-secondary me-2" onclick="location.href='/pickup'">
          <i class="bi bi-arrow-left"></i> 픽업 관리로
        </button>
        <button class="btn btn-warning me-2" onclick="showPendingModal()">
          <i class="bi bi-exclamation-circle"></i> 신규예약 <span class="badge bg-danger" id="pendingCount">0</span>
        </button>
        <button class="btn btn-primary" onclick="showAddModal()">+ 업체 추가</button>
      </div>
    </div>
    
    <div class="table-responsive">
      <table class="table table-hover">
        <thead>
          <tr>
            <th>업체명</th>
            <th>업체 코드</th>
            <th>담당자</th>
            <th>연락처</th>
            <th>이메일</th>
            <th>상태</th>
            <th>등록일</th>
            <th>관리</th>
          </tr>
        </thead>
        <tbody id="agenciesList"></tbody>
      </table>
    </div>
  </div>
  
  <!-- 추가/수정 모달 -->
  <div class="modal fade" id="agencyModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modalTitle">업체 추가</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form id="agencyForm">
            <input type="hidden" id="agencyId">
            <div class="mb-3">
              <label class="form-label">업체명 *</label>
              <input type="text" class="form-control" id="agencyName" required>
            </div>
            <div class="mb-3">
              <label class="form-label">담당자</label>
              <input type="text" class="form-control" id="contactPerson">
            </div>
            <div class="mb-3">
              <label class="form-label">연락처</label>
              <input type="text" class="form-control" id="phone">
            </div>
            <div class="mb-3">
              <label class="form-label">이메일</label>
              <input type="email" class="form-control" id="email">
            </div>
            <div class="mb-3">
              <label class="form-check-label">
                <input type="checkbox" class="form-check-input" id="isActive" checked>
                활성 상태
              </label>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
          <button type="button" class="btn btn-primary" onclick="saveAgency()">저장</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 신규예약 관리 모달 -->
  <div class="modal fade" id="pendingModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">
            <i class="bi bi-exclamation-circle text-warning"></i> 신규예약 확정 관리
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <!-- 탭 네비게이션 -->
          <ul class="nav nav-tabs mb-3" id="pendingTabs" role="tablist">
            <li class="nav-item" role="presentation">
              <button class="nav-link active" id="pending-tab" data-bs-toggle="tab" data-bs-target="#pendingList" type="button">
                <i class="bi bi-clock-history"></i> 검수 대기 <span class="badge bg-warning text-dark" id="pendingTabCount">0</span>
              </button>
            </li>
            <li class="nav-item" role="presentation">
              <button class="nav-link" id="rejected-tab" data-bs-toggle="tab" data-bs-target="#rejectedList" type="button">
                <i class="bi bi-x-circle"></i> 미확정 <span class="badge bg-danger" id="rejectedTabCount">0</span>
              </button>
            </li>
          </ul>

          <!-- 탭 내용 -->
          <div class="tab-content" id="pendingTabContent">
            <!-- 검수 대기 리스트 -->
            <div class="tab-pane fade show active" id="pendingList" role="tabpanel">
              <div id="pendingReservations">
                <div class="text-center text-muted py-5">
                  <i class="bi bi-inbox" style="font-size: 3rem;"></i>
                  <p class="mt-2">검수 대기 중인 예약이 없습니다</p>
                </div>
              </div>
            </div>

            <!-- 미확정 리스트 -->
            <div class="tab-pane fade" id="rejectedList" role="tabpanel">
              <div id="rejectedReservations">
                <div class="text-center text-muted py-5">
                  <i class="bi bi-inbox" style="font-size: 3rem;"></i>
                  <p class="mt-2">미확정 예약이 없습니다</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- 예약 수정 모달 -->
  <div class="modal fade" id="editReservationModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">예약 수정</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form id="editReservationForm">
            <input type="hidden" id="editPickupId">
            
            <div class="row mb-3">
              <div class="col-md-6">
                <label class="form-label">고객명</label>
                <input type="text" class="form-control" id="editCustomerName">
              </div>
              <div class="col-md-6">
                <label class="form-label">호텔</label>
                <input type="text" class="form-control" id="editHotelName">
              </div>
            </div>
            
            <div class="row mb-3">
              <div class="col-md-6">
                <label class="form-label">연락처</label>
                <input type="text" class="form-control" id="editPhone">
              </div>
              <div class="col-md-6">
                <label class="form-label">카톡ID</label>
                <input type="text" class="form-control" id="editKakaoId">
              </div>
            </div>
            
            <div class="row mb-3">
              <div class="col-md-3">
                <label class="form-label">성인</label>
                <input type="number" class="form-control" id="editAdultCount" min="0">
              </div>
              <div class="col-md-3">
                <label class="form-label">소아</label>
                <input type="number" class="form-control" id="editChildCount" min="0">
              </div>
              <div class="col-md-3">
                <label class="form-label">유아</label>
                <input type="number" class="form-control" id="editInfantCount" min="0">
              </div>
              <div class="col-md-3">
                <label class="form-label">짐</label>
                <input type="number" class="form-control" id="editLuggageCount" min="0">
              </div>
            </div>
            
            <div class="mb-3">
              <label class="form-label">메모</label>
              <textarea class="form-control" id="editMemo" rows="3"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
          <button type="button" class="btn btn-primary" onclick="saveReservationEdit()">저장</button>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let modalInstance;
    let pendingModalInstance;
    let editReservationModalInstance;
    
    document.addEventListener('DOMContentLoaded', () => {
      modalInstance = new bootstrap.Modal(document.getElementById('agencyModal'));
      pendingModalInstance = new bootstrap.Modal(document.getElementById('pendingModal'));
      editReservationModalInstance = new bootstrap.Modal(document.getElementById('editReservationModal'));
      loadAgencies();
      loadPendingCount();
      
      // 5초마다 신규예약 카운트 갱신
      setInterval(loadPendingCount, 5000);
    });
    
    async function loadAgencies() {
      const res = await fetch('/pickup/api/agencies/all');
      const agencies = await res.json();
      
      document.getElementById('agenciesList').innerHTML = agencies.map(a => `
        <tr class="${!a.is_active ? 'table-secondary' : ''}">
          <td>
            <strong>${a.agency_name}</strong>
            ${!a.is_active ? '<small class="text-muted"> (사용중인 픽업건 있음)</small>' : ''}
          </td>
          <td>
            ${a.agency_code ? `
              <div class="d-flex align-items-center gap-2">
                <code class="bg-light px-2 py-1 rounded" style="font-size: 1.1rem; font-weight: bold;">${a.agency_code}</code>
                <button class="btn btn-sm btn-outline-primary" onclick="copyCode('${a.agency_code}')" title="코드 복사">
                  <i class="bi bi-clipboard"></i>
                </button>
                <a href="/pickup/agency/${a.agency_code}" target="_blank" class="btn btn-sm btn-outline-success" title="예약 페이지 열기">
                  <i class="bi bi-box-arrow-up-right"></i>
                </a>
              </div>
            ` : '<small class="text-muted">코드 없음</small>'}
          </td>
          <td>${a.contact_person || '-'}</td>
          <td>${a.phone || '-'}</td>
          <td>${a.email || '-'}</td>
          <td>
            <span class="badge ${a.is_active ? 'bg-success' : 'bg-secondary'}">
              ${a.is_active ? '활성' : '비활성'}
            </span>
          </td>
          <td>${new Date(a.created_at).toLocaleDateString()}</td>
          <td>
            <button class="btn btn-sm btn-warning" onclick='editAgency(${JSON.stringify(a)})'>수정</button>
            ${a.is_active 
              ? `<button class="btn btn-sm btn-danger" onclick="deleteAgency(${a.id})">삭제</button>`
              : `<button class="btn btn-sm btn-success" onclick="activateAgency(${a.id})">활성화</button>`
            }
          </td>
        </tr>
      `).join('');
    }
    
    function showAddModal() {
      document.getElementById('modalTitle').textContent = '업체 추가';
      document.getElementById('agencyForm').reset();
      document.getElementById('agencyId').value = '';
      document.getElementById('isActive').checked = true;
      modalInstance.show();
    }
    
    function editAgency(agency) {
      document.getElementById('modalTitle').textContent = '업체 수정';
      document.getElementById('agencyId').value = agency.id;
      document.getElementById('agencyName').value = agency.agency_name;
      document.getElementById('contactPerson').value = agency.contact_person || '';
      document.getElementById('phone').value = agency.phone || '';
      document.getElementById('email').value = agency.email || '';
      document.getElementById('isActive').checked = agency.is_active;
      modalInstance.show();
    }
    
    async function saveAgency() {
      const id = document.getElementById('agencyId').value;
      const data = {
        agency_name: document.getElementById('agencyName').value,
        contact_person: document.getElementById('contactPerson').value,
        phone: document.getElementById('phone').value,
        email: document.getElementById('email').value,
        is_active: document.getElementById('isActive').checked
      };
      
      const url = id ? `/pickup/api/agencies/${id}` : '/pickup/api/agencies';
      const method = id ? 'PUT' : 'POST';
      
      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      
      if (res.ok) {
        alert('✅ 저장 완료!');
        modalInstance.hide();
        loadAgencies();
      } else {
        alert('❌ 오류 발생');
      }
    }
    
    async function deleteAgency(id) {
      if (!confirm('정말 삭제하시겠습니까?\n\n※ 해당 업체를 사용하는 픽업 예약이 있으면 비활성화 처리됩니다.')) return;
      
      try {
        const res = await fetch(`/pickup/api/agencies/${id}`, { method: 'DELETE' });
        const result = await res.json();
        
        if (res.ok) {
          if (result.deactivated) {
            alert('⚠️ ' + result.message + '\n\n비활성 상태로 전환되었습니다.');
          } else {
            alert('✅ ' + result.message);
          }
          loadAgencies();
        } else {
          alert('❌ 삭제 실패\n\n' + (result.error || '알 수 없는 오류'));
          if (result.hint) {
            alert('💡 ' + result.hint);
          }
        }
      } catch (error) {
        console.error('삭제 오류:', error);
        alert('❌ 삭제 실패: ' + error.message);
      }
    }
    
    async function activateAgency(id) {
      if (!confirm('이 업체를 다시 활성화하시겠습니까?')) return;
      
      try {
        const res = await fetch(`/pickup/api/agencies/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ is_active: true })
        });
        
        if (res.ok) {
          alert('✅ 업체가 활성화되었습니다.');
          loadAgencies();
        } else {
          alert('❌ 활성화 실패');
        }
      } catch (error) {
        console.error('활성화 오류:', error);
        alert('❌ 활성화 실패: ' + error.message);
      }
    }
    
    // 업체 코드 복사
    function copyCode(code) {
      navigator.clipboard.writeText(code).then(() => {
        alert(`✅ 업체 코드 "${code}" 가 복사되었습니다!\n\n업체에게 이 코드를 알려주세요.`);
      }).catch(err => {
        console.error('복사 실패:', err);
        prompt('코드를 복사하세요:', code);
      });
    }
    
    // ==================== 신규예약 관리 ====================
    
    // 신규예약 카운트 로드
    async function loadPendingCount() {
      try {
        const res = await fetch('/pickup/api/pending-count');
        const data = await res.json();
        document.getElementById('pendingCount').textContent = data.pending || 0;
      } catch (error) {
        console.error('카운트 로드 실패:', error);
      }
    }
    
    // 신규예약 모달 열기
    async function showPendingModal() {
      await loadPendingReservations();
      pendingModalInstance.show();
    }
    
    // 신규예약 리스트 로드
    async function loadPendingReservations() {
      try {
        const res = await fetch('/pickup/api/pending-reservations');
        const data = await res.json();
        
        // 검수 대기 리스트
        const pendingList = data.pending || [];
        const rejectedList = data.rejected || [];
        
        // 연결된 예약 그룹화 (departure만 표시, arrival은 포함)
        const groupedPending = groupLinkedReservations(pendingList);
        const groupedRejected = groupLinkedReservations(rejectedList);
        
        document.getElementById('pendingTabCount').textContent = groupedPending.length;
        document.getElementById('rejectedTabCount').textContent = groupedRejected.length;
        
        // 검수 대기 렌더링
        if (groupedPending.length === 0) {
          document.getElementById('pendingReservations').innerHTML = `
            <div class="text-center text-muted py-5">
              <i class="bi bi-inbox" style="font-size: 3rem;"></i>
              <p class="mt-2">검수 대기 중인 예약이 없습니다</p>
            </div>
          `;
        } else {
          document.getElementById('pendingReservations').innerHTML = groupedPending.map(p => renderReservationCard(p, 'pending')).join('');
        }
        
        // 미확정 렌더링
        if (groupedRejected.length === 0) {
          document.getElementById('rejectedReservations').innerHTML = `
            <div class="text-center text-muted py-5">
              <i class="bi bi-inbox" style="font-size: 3rem;"></i>
              <p class="mt-2">미확정 예약이 없습니다</p>
            </div>
          `;
        } else {
          document.getElementById('rejectedReservations').innerHTML = groupedRejected.map(p => renderReservationCard(p, 'rejected')).join('');
        }
        
        loadPendingCount();
      } catch (error) {
        console.error('예약 로드 실패:', error);
        alert('예약 목록을 불러올 수 없습니다.');
      }
    }
    
    // 연결된 예약 그룹화 (출발+도착을 하나로)
    function groupLinkedReservations(reservations) {
      const grouped = [];
      const processedIds = new Set();
      
      reservations.forEach(reservation => {
        // 이미 처리된 예약은 건너뛰기
        if (processedIds.has(reservation.id)) return;
        
        // departure 레코드만 메인으로 표시
        if (reservation.record_type === 'departure') {
          // 연결된 arrival 레코드 찾기
          const linkedArrival = reservations.find(r => r.id === reservation.linked_id);
          
          // departure에 arrival 정보 추가
          reservation.arrival_record = linkedArrival;
          grouped.push(reservation);
          
          processedIds.add(reservation.id);
          if (linkedArrival) {
            processedIds.add(linkedArrival.id);
          }
        } 
        // linked_id가 없는 arrival 레코드 (연결 안된 단독 예약)
        else if (!reservation.linked_id) {
          grouped.push(reservation);
          processedIds.add(reservation.id);
        }
      });
      
      return grouped;
    }
    
    // 공항 코드를 도시 이름으로 변환
    function getAirportName(code) {
      const airportNames = {
        'ICN': '인천',
        'GMP': '김포',
        'PUS': '부산',
        'CJU': '제주',
        'GUM': '괌'
      };
      return airportNames[code] || code;
    }
    
    // 날짜 포맷 (YYYY-MM-DD만 추출)
    function formatDate(dateStr) {
      if (!dateStr) return '';
      if (dateStr.includes('T') || dateStr.includes('Z')) {
        return dateStr.split('T')[0];
      }
      return dateStr;
    }
    
    // 예약 카드 렌더링 (출발편만 표시)
    function renderReservationCard(pickup, type) {
      const hasRoundtrip = pickup.arrival_record;
      const depAirport = pickup.departure_airport || 'GUM';
      const depCity = getAirportName(depAirport);
      
      return `
        <div class="card mb-3" style="border-left: 4px solid #2196f3;">
          <div class="card-body" style="background: #e3f2fd;">
            <div class="d-flex justify-content-between align-items-start mb-2">
              <div class="flex-grow-1">
                <h6 class="mb-1" style="color: #2196f3;">✈️ <strong>${depCity}출발</strong></h6>
                <div class="mt-1">
                  <span class="badge bg-secondary me-2">📅 ${formatDate(pickup.display_date)}</span>
                  <span class="badge bg-primary me-2">✈️ ${pickup.flight_number}</span>
                  <span class="badge bg-info">👤 ${pickup.customer_name}</span>
                  ${pickup.agency_name ? `<span class="badge bg-success ms-2">🏢 ${pickup.agency_name}</span>` : ''}
                </div>
              </div>
              <span class="badge bg-secondary">ID: ${pickup.id}</span>
            </div>
            
            <div class="text-muted small mb-3">
              📅 ${pickup.display_date} ${pickup.display_time}<br>
              🏨 ${pickup.hotel_name}<br>
              👥 ${pickup.passenger_count}명 (성인:${pickup.adult_count}, 소아:${pickup.child_count}, 유아:${pickup.infant_count})<br>
              🧳 ${pickup.luggage_count}개<br>
              ${pickup.phone ? `📞 ${pickup.phone}<br>` : ''}
              ${pickup.kakao_id ? `💬 ${pickup.kakao_id}<br>` : ''}
              ${pickup.memo ? `📝 ${pickup.memo}` : ''}
            </div>
            
            <div class="btn-group w-100" role="group">
              ${type === 'pending' ? `
                <button class="btn btn-primary" onclick="confirmReservation(${pickup.id}, ${pickup.linked_id || 'null'})">
                  <i class="bi bi-check-circle-fill"></i> 예약 확정
                </button>
                <button class="btn btn-danger" onclick="rejectReservation(${pickup.id}, ${pickup.linked_id || 'null'})">
                  <i class="bi bi-x-circle-fill"></i> 미확정
                </button>
              ` : `
                <button class="btn btn-success" onclick="confirmReservation(${pickup.id}, ${pickup.linked_id || 'null'})">
                  <i class="bi bi-arrow-clockwise"></i> 확정으로 변경
                </button>
                <button class="btn btn-danger" onclick="deleteReservation(${pickup.id}, ${pickup.linked_id || 'null'})">
                  <i class="bi bi-trash-fill"></i> 예약 삭제
                </button>
              `}
              <button class="btn btn-warning" onclick="editReservation(${pickup.id})">
                <i class="bi bi-pencil-fill"></i> 수정
              </button>
            </div>
          </div>
        </div>
      `;
    }
    
    // 예약 확정 처리
    async function confirmReservation(id, linkedId) {
      if (!confirm('이 예약을 확정하시겠습니까?\n\n확정 시 달력에 표시됩니다.')) return;
      
      try {
        const res = await fetch(`/pickup/api/confirm-reservation`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id, linkedId })
        });
        
        if (res.ok) {
          alert('✅ 예약이 확정되었습니다!');
          loadPendingReservations();
        } else {
          const error = await res.json();
          alert('❌ 확정 실패: ' + (error.error || '알 수 없는 오류'));
        }
      } catch (error) {
        console.error('확정 오류:', error);
        alert('❌ 확정 실패: ' + error.message);
      }
    }
    
    // 예약 미확정 처리
    async function rejectReservation(id, linkedId) {
      const reason = prompt('미확정 사유를 입력하세요 (선택):');
      
      try {
        const res = await fetch(`/pickup/api/reject-reservation`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id, linkedId, reason })
        });
        
        if (res.ok) {
          alert('⚠️ 예약이 미확정 처리되었습니다.');
          loadPendingReservations();
        } else {
          const error = await res.json();
          alert('❌ 처리 실패: ' + (error.error || '알 수 없는 오류'));
        }
      } catch (error) {
        console.error('미확정 오류:', error);
        alert('❌ 처리 실패: ' + error.message);
      }
    }
    
    // 예약 삭제
    async function deleteReservation(id, linkedId) {
      if (!confirm('이 예약을 완전히 삭제하시겠습니까?\n\n삭제 후 복구할 수 없습니다.')) return;
      
      try {
        const res = await fetch(`/pickup/api/delete-reservation`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id, linkedId })
        });
        
        if (res.ok) {
          alert('✅ 예약이 삭제되었습니다.');
          loadPendingReservations();
        } else {
          const error = await res.json();
          alert('❌ 삭제 실패: ' + (error.error || '알 수 없는 오류'));
        }
      } catch (error) {
        console.error('삭제 오류:', error);
        alert('❌ 삭제 실패: ' + error.message);
      }
    }
    
    // 예약 수정 모달 열기
    async function editReservation(id) {
      try {
        const res = await fetch(`/pickup/api/pickup/${id}`);
        const pickup = await res.json();
        
        document.getElementById('editPickupId').value = pickup.id;
        document.getElementById('editCustomerName').value = pickup.customer_name || '';
        document.getElementById('editHotelName').value = pickup.hotel_name || '';
        document.getElementById('editPhone').value = pickup.phone || '';
        document.getElementById('editKakaoId').value = pickup.kakao_id || '';
        document.getElementById('editAdultCount').value = pickup.adult_count || 0;
        document.getElementById('editChildCount').value = pickup.child_count || 0;
        document.getElementById('editInfantCount').value = pickup.infant_count || 0;
        document.getElementById('editLuggageCount').value = pickup.luggage_count || 0;
        document.getElementById('editMemo').value = pickup.memo || '';
        
        editReservationModalInstance.show();
      } catch (error) {
        console.error('예약 로드 실패:', error);
        alert('예약 정보를 불러올 수 없습니다.');
      }
    }
    
    // 예약 수정 저장
    async function saveReservationEdit() {
      const id = document.getElementById('editPickupId').value;
      const data = {
        customer_name: document.getElementById('editCustomerName').value,
        hotel_name: document.getElementById('editHotelName').value,
        phone: document.getElementById('editPhone').value,
        kakao_id: document.getElementById('editKakaoId').value,
        adult_count: parseInt(document.getElementById('editAdultCount').value) || 0,
        child_count: parseInt(document.getElementById('editChildCount').value) || 0,
        infant_count: parseInt(document.getElementById('editInfantCount').value) || 0,
        luggage_count: parseInt(document.getElementById('editLuggageCount').value) || 0,
        memo: document.getElementById('editMemo').value
      };
      
      data.passenger_count = data.adult_count + data.child_count + data.infant_count;
      
      try {
        const res = await fetch(`/pickup/api/pickup/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        
        if (res.ok) {
          alert('✅ 예약이 수정되었습니다.');
          editReservationModalInstance.hide();
          loadPendingReservations();
        } else {
          const error = await res.json();
          alert('❌ 수정 실패: ' + (error.error || '알 수 없는 오류'));
        }
      } catch (error) {
        console.error('수정 오류:', error);
        alert('❌ 수정 실패: ' + error.message);
      }
    }
  </script>
</body>
</html>
