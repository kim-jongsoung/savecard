<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>오늘의 픽업</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body { background: #f5f5f5; padding: 10px; }
    .flight-card { 
      background: white; 
      border: 3px solid #ddd; 
      border-radius: 10px; 
      padding: 20px; 
      margin-bottom: 20px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    .flight-title { font-size: 24px; font-weight: bold; margin-bottom: 10px; }
    .passenger-item { 
      background: #f8f9fa; 
      padding: 15px; 
      margin: 10px 0; 
      border-radius: 8px;
      border-left: 5px solid #007bff;
    }
    .early-morning { 
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
      color: white;
      border-color: #5a67d8;
    }
    .early-morning .passenger-item { 
      background: rgba(255,255,255,0.2); 
      color: white;
      border-left-color: #fbbf24;
    }
    .vehicle-select { font-size: 20px; padding: 12px; }
    .stats { font-size: 18px; padding: 15px; background: #e3f2fd; border-radius: 8px; }
    .date-nav { margin-bottom: 20px; }
  </style>
</head>
<body>
  <div class="container-fluid">
    <h2 class="text-center mb-3">🚗 기사 화면</h2>
    
    <!-- 달력 뷰 (유일한 화면) -->
    <div id="calendarView" class="mb-4">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <button class="btn btn-sm btn-secondary" onclick="changeMonth(-1)">◀ 이전달</button>
        <h4 id="currentMonth"></h4>
        <button class="btn btn-sm btn-secondary" onclick="changeMonth(1)">다음달 ▶</button>
      </div>
      <div id="calendar" style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 5px; font-size: 12px;"></div>
    </div>
  </div>
  
  <!-- 상세 보기 모달 -->
  <div class="modal fade" id="detailModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">픽업 상세</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body" id="detailBody">
          <!-- 동적 내용 -->
        </div>
        <div class="modal-footer">
          <select class="form-select w-auto me-auto" id="modalVehicle" onchange="updateVehicleFromModal()">
            <option value="">차량 선택</option>
            <option value="세단">세단</option>
            <option value="SUV">SUV</option>
            <option value="밴">밴</option>
            <option value="버스">버스</option>
          </select>
          <div class="form-check me-3">
            <input class="form-check-input" type="checkbox" id="modalReady" onchange="updateReadyFromModal()">
            <label class="form-check-label" for="modalReady">준비완료</label>
          </div>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
        </div>
      </div>
    </div>
  </div>
  
  <div style="display:none;">
    <div id="detailView" style="display:none;">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <button class="btn btn-secondary" onclick="backToCalendar()">← 달력으로</button>
        <h4 id="detailDate" class="mb-0"></h4>
        <div>
          <button class="btn btn-sm btn-secondary" onclick="changeDetailDate(-1)">← 전날</button>
          <button class="btn btn-sm btn-secondary" onclick="changeDetailDate(1)">다음날 →</button>
        </div>
      </div>
      
      <!-- 통계 -->
      <div class="stats text-center mb-3">
        <div>📊 전체: <strong id="totalCount">0명</strong></div>
      </div>
      
      <!-- 공항 픽업 -->
      <h3 class="text-primary">🛬 공항 픽업</h3>
      <div id="arrivalsList"></div>
      
      <!-- 호텔 픽업 -->
      <h3 class="text-danger mt-4">🏨 호텔 픽업</h3>
      <div id="departuresList"></div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let detailModalInstance;
    let currentPickupData = null;
    let currentCalendarYear = new Date().getFullYear();
    let currentCalendarMonth = new Date().getMonth() + 1;
    
    // 페이지 로드
    document.addEventListener('DOMContentLoaded', () => {
      detailModalInstance = new bootstrap.Modal(document.getElementById('detailModal'));
      loadCalendar(); // 달력을 기본으로
      
      // 3초마다 자동 새로고침
      setInterval(loadCalendar, 3000);
    });
    
    // 달력으로 돌아가기
    function backToCalendar() {
      // 자동 새로고침 중지
      if (autoRefreshInterval) {
        clearInterval(autoRefreshInterval);
        autoRefreshInterval = null;
      }
      document.getElementById('detailView').style.display = 'none';
      document.getElementById('calendarView').style.display = 'block';
      loadCalendar();
    }
    
    // 날짜 클릭 시 상세 보기
    function viewDate(date) {
      currentDetailDate = date;
      document.getElementById('calendarView').style.display = 'none';
      document.getElementById('detailView').style.display = 'block';
      updateDetailDate();
      loadPickups();
      
      // 3초마다 자동 새로고침 시작
      if (autoRefreshInterval) clearInterval(autoRefreshInterval);
      autoRefreshInterval = setInterval(loadPickups, 3000);
    }
    
    // 상세 날짜 변경
    function changeDetailDate(days) {
      const date = new Date(currentDetailDate);
      date.setDate(date.getDate() + days);
      currentDetailDate = date.toISOString().split('T')[0];
      updateDetailDate();
      loadPickups();
    }
    
    // 상세 날짜 표시
    function updateDetailDate() {
      const date = new Date(currentDetailDate);
      const days = ['일', '월', '화', '수', '목', '금', '토'];
      const dayName = days[date.getDay()];
      document.getElementById('detailDate').textContent = 
        `${currentDetailDate} (${dayName})`;
    }
    
    function changeMonth(delta) {
      currentCalendarMonth += delta;
      if (currentCalendarMonth > 12) {
        currentCalendarMonth = 1;
        currentCalendarYear++;
      } else if (currentCalendarMonth < 1) {
        currentCalendarMonth = 12;
        currentCalendarYear--;
      }
      loadCalendar();
    }
    
    async function loadCalendar() {
      const res = await fetch(`/pickup/api/calendar?year=${currentCalendarYear}&month=${currentCalendarMonth}`);
      const { arrivals, departures } = await res.json();
      
      document.getElementById('currentMonth').textContent = `${currentCalendarYear}년 ${currentCalendarMonth}월`;
      
      const daysInMonth = new Date(currentCalendarYear, currentCalendarMonth, 0).getDate();
      const firstDay = new Date(currentCalendarYear, currentCalendarMonth - 1, 1).getDay();
      
      let html = '';
      ['일', '월', '화', '수', '목', '금', '토'].forEach(day => {
        html += `<div style="font-weight:bold;text-align:center;padding:5px;background:#f0f0f0;">${day}</div>`;
      });
      
      for (let i = 0; i < firstDay; i++) {
        html += '<div></div>';
      }
      
      const arrivalMap = {};
      arrivals.forEach(a => { arrivalMap[a.date] = a; });
      const departureMap = {};
      departures.forEach(d => { departureMap[d.date] = d; });
      
      const today = new Date().toISOString().split('T')[0];
      for (let day = 1; day <= daysInMonth; day++) {
        const dateStr = `${currentCalendarYear}-${String(currentCalendarMonth).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        const arr = arrivalMap[dateStr];
        const dep = departureMap[dateStr];
        const hasPickup = arr || dep;
        const isToday = dateStr === today;
        
        const bgColor = isToday ? '#fff3cd' : (hasPickup ? '#e3f2fd' : '#fff');
        const border = isToday ? '2px solid #ff9800' : '1px solid #ddd';
        
        html += `
          <div style="border:${border};padding:5px;background:${bgColor};border-radius:5px;min-height:100px;max-height:100px;overflow-y:auto;">
            <div style="font-size:14px;font-weight:bold;margin-bottom:3px;position:sticky;top:0;background:${bgColor};">${day}일</div>
            ${hasPickup ? `<div style="background:#fff3cd;padding:2px;border-radius:2px;margin:2px 0;font-size:9px;font-weight:bold;">📊 ${(arr ? arr.count : 0) + (dep ? dep.count : 0)}건 | ${(arr ? arr.total_passengers : 0) + (dep ? dep.total_passengers : 0)}명</div>` : ''}
          </div>
        `;
      }
      
      // 날짜별로 예약 추가
      const pickupsByDate = {};
      arrivals.forEach(p => {
        const date = p.guam_arrival_date;
        if (!pickupsByDate[date]) pickupsByDate[date] = { arrivals: [], departures: [] };
        pickupsByDate[date].arrivals.push(p);
      });
      departures.forEach(p => {
        const date = p.hotel_pickup_date;
        if (!pickupsByDate[date]) pickupsByDate[date] = { arrivals: [], departures: [] };
        pickupsByDate[date].departures.push(p);
      });
      
      // 달력에 예약 목록 추가
      const days = document.querySelectorAll('.calendar-day');
      days.forEach((dayEl, index) => {
        if (index < firstDay + 7) return; // 헤더 및 빈칸 건너뛰기
        
        const day = index - firstDay - 6;
        if (day < 1 || day > daysInMonth) return;
        
        const dateStr = `${currentCalendarYear}-${String(currentCalendarMonth).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        const dayPickups = pickupsByDate[dateStr];
        if (!dayPickups) return;
        
        let itemsHtml = '';
        
        // 공항 픽업
        dayPickups.arrivals.forEach(p => {
          itemsHtml += `<div style="background:#e3f2fd;padding:2px 3px;margin:2px 0;border-radius:2px;font-size:9px;cursor:pointer;border-left:2px solid #2196f3;color:#1565c0;" onclick='showPickupDetail(${JSON.stringify(p).replace(/'/g, "\\'")})'>🛬 ${p.guam_arrival_time} ${p.customer_name} (${p.passenger_count}명)</div>`;
        });
        
        // 호텔 픽업
        dayPickups.departures.forEach(p => {
          const isEarly = p.is_early_morning;
          const bg = isEarly ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' : '#fce4ec';
          const color = isEarly ? 'white' : '#c2185b';
          itemsHtml += `<div style="background:${bg};padding:2px 3px;margin:2px 0;border-radius:2px;font-size:9px;cursor:pointer;border-left:2px solid ${isEarly ? '#fbbf24' : '#e91e63'};color:${color};" onclick='showPickupDetail(${JSON.stringify(p).replace(/'/g, "\\'")})'>${ isEarly ? '🌙' : '🏨'} ${p.hotel_pickup_time} ${p.customer_name} (${p.passenger_count}명)</div>`;
        });
        
        dayEl.innerHTML += itemsHtml;
      });
    }
    
    // 예약 상세 보기
    function showPickupDetail(pickup) {
      currentPickupData = pickup;
      const isArrival = pickup.guam_arrival_date;
      
      let html = `
        <div class="row">
          <div class="col-md-6">
            <h6>👤 고객 정보</h6>
            <p><strong>이름:</strong> ${pickup.customer_name}</p>
            <p><strong>업체:</strong> ${pickup.agency_name || '-'}</p>
            <p><strong>호텔:</strong> ${pickup.hotel_name}</p>
            <p><strong>전화:</strong> ${pickup.phone || '-'}</p>
          </div>
          <div class="col-md-6">
            <h6>👥 인원</h6>
            <p><strong>성인:</strong> ${pickup.adult_count || 0}명</p>
            <p><strong>소아:</strong> ${pickup.child_count || 0}명</p>
            <p><strong>유아:</strong> ${pickup.infant_count || 0}명</p>
            <p><strong>짐:</strong> ${pickup.luggage_count || 0}개</p>
            <p><strong>총:</strong> ${pickup.passenger_count}명</p>
          </div>
        </div>
      `;
      
      if (isArrival) {
        html += `<hr><h6>✈️ 공항 픽업</h6><p>한국: ${pickup.kr_departure_date} ${pickup.kr_departure_time} (${pickup.kr_flight_number})</p><p>괌: ${pickup.guam_arrival_date} ${pickup.guam_arrival_time}</p>`;
      } else {
        html += `<hr><h6>🏨 호텔 픽업</h6><p>픽업: ${pickup.hotel_pickup_date} ${pickup.hotel_pickup_time}</p><p>비행기: ${pickup.guam_departure_date} ${pickup.guam_departure_time} (${pickup.departure_flight_number})</p>`;
        if (pickup.is_early_morning) html += '<p class="text-danger"><strong>⚠️ 새벽 비행기</strong></p>';
      }
      if (pickup.memo) html += `<p><strong>메모:</strong> ${pickup.memo}</p>`;
      
      document.getElementById('detailBody').innerHTML = html;
      document.getElementById('modalVehicle').value = pickup.vehicle_type || '';
      document.getElementById('modalReady').checked = pickup.vehicle_ready || false;
      detailModalInstance.show();
    }
    
    // 모달에서 차량 업데이트
    async function updateVehicleFromModal() {
      if (!currentPickupData) return;
      const vehicle = document.getElementById('modalVehicle').value;
      await fetch(`/pickup/api/${currentPickupData.id}/vehicle`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ vehicle_type: vehicle })
      });
      currentPickupData.vehicle_type = vehicle;
    }
    
    // 모달에서 준비완료 업데이트
    async function updateReadyFromModal() {
      if (!currentPickupData) return;
      const ready = document.getElementById('modalReady').checked;
      await fetch(`/pickup/api/${currentPickupData.id}/vehicle`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ vehicle_ready: ready })
      });
      currentPickupData.vehicle_ready = ready;
    }
    
    async function loadPickups() {
      try {
        const res = await fetch(`/pickup/api/list?date=${currentDetailDate}`);
        const { arrivals, departures } = await res.json();
        
        // 총 인원수
        const totalArr = arrivals.reduce((sum, p) => sum + (p.passenger_count || 0), 0);
        const totalDep = departures.reduce((sum, p) => sum + (p.passenger_count || 0), 0);
        document.getElementById('totalCount').textContent = 
          `공항픽업 ${totalArr}명 | 호텔픽업 ${totalDep}명`;
        
        // 공항 픽업
        if (arrivals.length === 0) {
          document.getElementById('arrivalsList').innerHTML = 
            '<p class="text-muted text-center">예약 없음</p>';
        } else {
          // 비행편별로 그룹화
          const grouped = {};
          arrivals.forEach(p => {
            const key = `${p.kr_flight_number}_${p.guam_arrival_time}`;
            if (!grouped[key]) grouped[key] = { flight: p, passengers: [] };
            grouped[key].passengers.push(p);
          });
          
          document.getElementById('arrivalsList').innerHTML = 
            Object.values(grouped).map(renderArrivalFlight).join('');
        }
        
        // 호텔 픽업
        if (departures.length === 0) {
          document.getElementById('departuresList').innerHTML = 
            '<p class="text-muted text-center">예약 없음</p>';
        } else {
          const grouped = {};
          departures.forEach(p => {
            const key = `${p.hotel_pickup_time}`;
            if (!grouped[key]) grouped[key] = { flight: p, passengers: [] };
            grouped[key].passengers.push(p);
          });
          
          document.getElementById('departuresList').innerHTML = 
            Object.values(grouped).map(renderDepartureFlight).join('');
        }
      } catch (error) {
        console.error('로드 실패:', error);
      }
    }
    
    // 공항 픽업 렌더링
    function renderArrivalFlight(group) {
      const p = group.flight;
      const passengers = group.passengers;
      const totalPax = passengers.reduce((sum, x) => sum + (x.passenger_count || 0), 0);
      
      return `
        <div class="flight-card">
          <div class="flight-title">
            ✈️ ${p.kr_flight_number} ${p.guam_arrival_time} 도착
          </div>
          <div class="mb-2">
            <strong>👥 총 ${totalPax}명 (${passengers.length}팀)</strong>
          </div>
          <div class="mb-3">
            🚗 차량: 
            <select class="vehicle-select" onchange="updateVehicle(${p.id}, this.value)">
              <option value="">선택</option>
              <option value="sedan" ${p.vehicle_type === 'sedan' ? 'selected' : ''}>세단 (1-4명)</option>
              <option value="van" ${p.vehicle_type === 'van' ? 'selected' : ''}>밴 (5-8명)</option>
              <option value="bus12" ${p.vehicle_type === 'bus12' ? 'selected' : ''}>12인승 (9-12명)</option>
            </select>
            <label class="ms-3">
              <input type="checkbox" ${p.vehicle_ready ? 'checked' : ''} 
                onchange="updateReady(${p.id}, this.checked)"> ✅ 준비완료
            </label>
          </div>
          ${passengers.map(renderPassenger).join('')}
          <small class="text-muted">한국 ${p.kr_departure_date} ${p.kr_departure_time} 출발</small>
        </div>
      `;
    }
    
    // 호텔 픽업 렌더링
    function renderDepartureFlight(group) {
      const p = group.flight;
      const passengers = group.passengers;
      const totalPax = passengers.reduce((sum, x) => sum + (x.passenger_count || 0), 0);
      const isEarly = p.is_early_morning;
      
      return `
        <div class="flight-card ${isEarly ? 'early-morning' : ''}">
          <div class="flight-title">
            ⏰ ${p.hotel_pickup_time} 픽업 ${isEarly ? '🌙' : ''}
          </div>
          ${isEarly ? '<div class="mb-2">⚠️ 새벽 비행기 - 전날 밤 픽업</div>' : ''}
          <div class="mb-2">
            <strong>👥 총 ${totalPax}명 (${passengers.length}팀)</strong>
          </div>
          <div class="mb-3">
            🚗 차량: 
            <select class="vehicle-select" onchange="updateVehicle(${p.id}, this.value)">
              <option value="">선택</option>
              <option value="sedan" ${p.vehicle_type === 'sedan' ? 'selected' : ''}>세단</option>
              <option value="van" ${p.vehicle_type === 'van' ? 'selected' : ''}>밴</option>
              <option value="bus12" ${p.vehicle_type === 'bus12' ? 'selected' : ''}>12인승</option>
            </select>
            <label class="ms-3">
              <input type="checkbox" ${p.vehicle_ready ? 'checked' : ''} 
                onchange="updateReady(${p.id}, this.checked)"> ✅ 준비완료
            </label>
          </div>
          ${passengers.map(renderPassenger).join('')}
          <small ${isEarly ? '' : 'class="text-muted"'}>
            비행기: ${p.guam_departure_date} ${p.guam_departure_time} 출발
          </small>
        </div>
      `;
    }
    
    // 승객 렌더링
    function renderPassenger(p) {
      return `
        <div class="passenger-item">
          <strong>${p.customer_name} ${p.passenger_count}명</strong>
          → ${p.hotel_name}
          ${p.memo ? `<br>📝 ${p.memo}` : ''}
          ${p.phone ? `<br>📞 ${p.phone}` : ''}
        </div>
      `;
    }
    
    // 차량 업데이트
    async function updateVehicle(id, vehicle_type) {
      await fetch(`/pickup/api/${id}/vehicle`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ vehicle_type, vehicle_ready: false })
      });
      loadPickups();
    }
    
    // 준비완료 업데이트
    async function updateReady(id, vehicle_ready) {
      const card = event.target.closest('.flight-card');
      const select = card.querySelector('.vehicle-select');
      const vehicle_type = select.value;
      
      await fetch(`/pickup/api/${id}/vehicle`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ vehicle_type, vehicle_ready })
      });
      loadPickups();
    }
  </script>
</body>
</html>
