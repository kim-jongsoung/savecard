<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>HKT 픽업 스케줄 관리</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Arial, sans-serif;
      background: #f5f5f5;
      padding: 20px;
    }
    
    .container {
      max-width: 1600px;
      margin: 0 auto;
      background: white;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 8px 15px;
      text-align: center;
    }
    
    .header h1 {
      font-size: 16px;
      margin: 0 0 3px 0;
    }
    
    .header .date-display {
      font-size: 13px;
      font-weight: bold;
      margin: 0 0 3px 0;
    }
    
    .nav-buttons {
      display: flex;
      gap: 5px;
      justify-content: center;
      flex-wrap: wrap;
    }
    
    .nav-buttons button {
      padding: 5px 10px;
      border: 1px solid rgba(255,255,255,0.5);
      background: rgba(255,255,255,0.2);
      color: white;
      border-radius: 15px;
      cursor: pointer;
      font-size: 11px;
      font-weight: 600;
      transition: all 0.3s;
    }
    
    .nav-buttons button:hover {
      background: rgba(255,255,255,0.3);
      transform: scale(1.05);
    }
    
    .input-section {
      background: #f8f9fa;
      padding: 20px;
      border-bottom: 2px solid #e0e0e0;
    }
    
    .input-tabs {
      display: flex;
      gap: 10px;
      margin-bottom: 15px;
    }
    
    .tab-btn {
      padding: 10px 20px;
      border: none;
      background: white;
      cursor: pointer;
      border-radius: 5px 5px 0 0;
      font-weight: bold;
      transition: all 0.3s;
    }
    
    .tab-btn.active {
      background: #667eea;
      color: white;
    }
    
    .tab-content {
      background: white;
      padding: 20px;
      border-radius: 0 5px 5px 5px;
      display: none;
    }
    
    .tab-content.active {
      display: block;
    }
    
    .ai-parse-area {
      width: 100%;
      min-height: 100px;
      padding: 15px;
      border: 2px solid #e0e0e0;
      border-radius: 5px;
      font-size: 14px;
      font-family: monospace;
      resize: vertical;
    }
    
    .ai-parse-area:focus {
      border-color: #667eea;
      outline: none;
    }
    
    .manual-form {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
    }
    
    .form-group {
      display: flex;
      flex-direction: column;
    }
    
    .form-group label {
      font-weight: bold;
      margin-bottom: 5px;
      font-size: 13px;
      color: #555;
    }
    
    .form-group input,
    .form-group select {
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 14px;
    }
    
    .form-group input:focus,
    .form-group select:focus {
      border-color: #667eea;
      outline: none;
    }
    
    .btn-primary {
      background: #667eea;
      color: white;
      border: none;
      padding: 12px 30px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
      font-weight: bold;
      margin-top: 10px;
      transition: all 0.3s;
    }
    
    .btn-primary:hover {
      background: #5568d3;
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    .info-bar {
      background: #f8f9fa;
      padding: 20px;
      border-bottom: 2px solid #e0e0e0;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 15px;
    }
    
    .summary {
      display: flex;
      gap: 20px;
      flex-wrap: wrap;
    }
    
    .summary-item {
      background: white;
      padding: 10px 20px;
      border-radius: 5px;
      border: 2px solid #e0e0e0;
    }
    
    .summary-item strong {
      color: #667eea;
      font-size: 20px;
    }
    
    .edit-hint {
      color: #666;
      font-size: 14px;
      font-style: italic;
    }
    
    .table-container {
      overflow-x: auto;
      padding: 20px;
    }
    
    #multiTableContainer {
      margin-top: 20px;
    }
    
    #multiTableContainer > div {
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      font-size: 13px;
    }
    
    thead {
      background: #6B8E23;
      color: white;
      position: sticky;
      top: 0;
      z-index: 10;
    }
    
    th {
      padding: 12px 8px;
      text-align: left;
      font-weight: bold;
      border-right: 1px solid rgba(255,255,255,0.2);
      white-space: nowrap;
    }
    
    th:last-child {
      border-right: none;
    }
    
    td {
      padding: 10px 8px;
      border-bottom: 1px solid #e0e0e0;
      vertical-align: middle;
      cursor: pointer;
      transition: background 0.2s;
    }
    
    td.editable {
      position: relative;
    }
    
    td.editable::after {
      content: '✏️';
      position: absolute;
      right: 2px;
      top: 50%;
      transform: translateY(-50%);
      font-size: 10px;
      opacity: 0;
      transition: opacity 0.2s;
      pointer-events: none; /* 클릭 이벤트를 차단하지 않음 */
    }
    
    td.editable:hover {
      background: #fff3cd !important;
      cursor: text !important;
    }
    
    td.editable:hover::after {
      opacity: 0.5;
    }
    
    td input {
      width: 100%;
      padding: 6px;
      border: 2px solid #667eea;
      border-radius: 3px;
      font-size: 13px;
      box-sizing: border-box;
    }
    
    tbody tr:hover {
      background: #f8f9fa;
    }
    
    /* 편집 가능한 셀 hover가 row hover보다 우선되도록 */
    tbody tr:hover td.editable:hover {
      background: #fff3cd !important;
    }
    
    .status-badge {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 12px;
      font-size: 11px;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s;
    }
    
    .status-badge:hover {
      transform: scale(1.1);
    }
    
    .status-contacted {
      background: #d4edda;
      color: #155724;
    }
    
    .status-pending {
      background: #fff3cd;
      color: #856404;
    }
    
    .time-col {
      font-weight: bold;
      font-size: 15px;
      color: #667eea;
    }
    
    .source-badge {
      display: inline-block;
      padding: 2px 8px;
      border-radius: 3px;
      font-size: 10px;
      font-weight: bold;
      margin-left: 5px;
    }
    
    .source-system {
      background: #e3f2fd;
      color: #1976d2;
    }
    
    .source-manual {
      background: #fff3e0;
      color: #f57c00;
    }
    
    .delete-btn {
      background: #dc3545;
      color: white;
      border: none;
      padding: 4px 8px;
      border-radius: 3px;
      cursor: pointer;
      font-size: 11px;
      transition: all 0.3s;
    }
    
    .delete-btn:hover {
      background: #c82333;
      transform: scale(1.05);
    }
    
    .delete-btn:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
    
    .empty-state {
      text-align: center;
      padding: 60px 20px;
      color: #999;
    }
    
    .empty-state h2 {
      font-size: 24px;
      margin-bottom: 10px;
    }
    
    .loading {
      text-align: center;
      padding: 40px;
      font-size: 18px;
      color: #667eea;
    }
    
    .toast {
      position: fixed;
      top: 20px;
      right: 20px;
      background: #28a745;
      color: white;
      padding: 15px 25px;
      border-radius: 5px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
      z-index: 1000;
      animation: slideIn 0.3s ease-out;
    }
    
    .toast.error {
      background: #dc3545;
    }
    
    @keyframes slideIn {
      from {
        transform: translateX(400px);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>🚗 HKT 픽업 스케줄 관리</h1>
      <div class="date-display" id="dateDisplay">Loading...</div>
      <div class="nav-buttons">
        <button onclick="changeDate(-1)">◀</button>
        <button onclick="goToday()">Today</button>
        <button onclick="changeDate(1)">▶</button>
      </div>
      <div class="nav-buttons" style="margin-top: 3px;">
        <button onclick="loadMultipleDays(0, 1)" style="background: #4CAF50; border-color: #4CAF50;">오늘+내일</button>
        <button onclick="loadMultipleDays(1, 2)" style="background: #2196F3; border-color: #2196F3;">내일+모레</button>
        <button onclick="loadMultipleDays(0, 2)" style="background: #FF9800; border-color: #FF9800;">3일</button>
      </div>
      <div class="nav-buttons" style="margin-top: 5px; border-top: 1px solid rgba(255,255,255,0.3); padding-top: 5px;">
        <button onclick="downloadExcel()" style="background: #10B981; border-color: #10B981;">엑셀</button>
        <button onclick="sharePublicLink()" style="background: #3B82F6; border-color: #3B82F6;">공유링크</button>
      </div>
    </div>
    
    <div class="input-section">
      <div class="input-tabs">
        <button class="tab-btn active" onclick="switchTab('ai')">📊 엑셀 가져오기</button>
        <button class="tab-btn" onclick="switchTab('manual')">✏️ 수동 입력</button>
      </div>
      
      <div id="aiTab" class="tab-content active">
        <div style="margin-bottom: 10px;">
          <label style="font-weight: bold; margin-right: 10px;">픽업 날짜:</label>
          <input type="date" id="excelImportDate" style="padding: 5px; border: 1px solid #ddd; border-radius: 4px;">
        </div>
        <textarea 
          id="aiParseText" 
          class="ai-parse-area" 
          placeholder="엑셀에서 복사한 데이터를 붙여넣으세요..."
        ></textarea>
        <button class="btn-primary" onclick="parseAndAdd()">📊 엑셀 데이터 추가</button>
      </div>
      
      <div id="manualTab" class="tab-content">
        <div class="manual-form">
          <div class="form-group">
            <label>픽업 날짜 *</label>
            <input type="date" id="manualDate" required>
          </div>
          <div class="form-group">
            <label>픽업 시간 *</label>
            <input type="time" id="manualTime" required>
          </div>
          <div class="form-group">
            <label>호텔명</label>
            <input type="text" id="manualHotel" placeholder="Hilton">
          </div>
          <div class="form-group">
            <label>고객명 *</label>
            <input type="text" id="manualName" required placeholder="김철수">
          </div>
          <div class="form-group">
            <label>영문명</label>
            <input type="text" id="manualEngName" placeholder="KIM CHUL SOO">
          </div>
          <div class="form-group">
            <label>인원</label>
            <input type="number" id="manualPerson" placeholder="3">
          </div>
          <div class="form-group">
            <label>차량명 (VEHICLE)</label>
            <input type="text" id="manualVehicle" placeholder="K5">
          </div>
          <div class="form-group">
            <label>차량번호 (NUM)</label>
            <input type="text" id="manualNumber" placeholder="12가3456">
          </div>
          <div class="form-group">
            <label>대여시간 (DER)</label>
            <input type="text" id="manualDuration" placeholder="3시간">
          </div>
          <div class="form-group">
            <label>항공편</label>
            <input type="text" id="manualFlight" placeholder="KE111">
          </div>
          <div class="form-group">
            <label>연락처</label>
            <input type="text" id="manualPhone" placeholder="010-1234-5678">
          </div>
          <div class="form-group">
            <label>비고</label>
            <input type="text" id="manualRemark" placeholder="특이사항">
          </div>
        </div>
        <button class="btn-primary" onclick="addManualPickup()">➕ 수동 추가</button>
      </div>
    </div>
    
    <div class="info-bar">
      <div class="summary" id="summary">
        <div class="summary-item">Total: <strong id="totalCount">0</strong></div>
        <div class="summary-item">✅ Contacted: <strong id="contactedCount">0</strong></div>
        <div class="summary-item">⏳ Pending: <strong id="pendingCount">0</strong></div>
        <div class="summary-item">👥 Passengers: <strong id="passengerCount">0</strong></div>
      </div>
      <div class="edit-hint">💡 노란색으로 표시되는 셀을 클릭하면 수정할 수 있습니다 (연필 아이콘 표시)</div>
    </div>
    
    <div id="loadingIndicator" class="loading">
      Loading schedule...
    </div>
    
    <!-- 여러 날짜를 표시할 컨테이너 -->
    <div id="multiTableContainer"></div>
    
    <div id="emptyState" class="empty-state" style="display: none;">
      <h2>📭 No pickups scheduled for this date</h2>
      <p>Add pickups using AI parsing or manual input above</p>
    </div>
  </div>

  <script>
    // 서버에서 전달받은 날짜 사용 (없으면 오늘)
    let initialDate = '<%= typeof initialDate !== "undefined" ? initialDate : "today" %>';
    let currentDate = initialDate === 'today' ? new Date().toISOString().split('T')[0] : initialDate;
    let editingCell = null;
    
    document.addEventListener('DOMContentLoaded', () => {
      // 엑셀 가져오기 날짜 필드에 현재 페이지 날짜 자동 설정
      document.getElementById('excelImportDate').value = currentDate;
      
      loadSchedule(currentDate);
      // 날짜 입력 필드에 현재 날짜 설정
      document.getElementById('manualDate').value = currentDate;
    });
    
    function switchTab(tab) {
      document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
      document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
      
      if (tab === 'ai') {
        document.querySelector('.tab-btn:nth-child(1)').classList.add('active');
        document.getElementById('aiTab').classList.add('active');
      } else {
        document.querySelector('.tab-btn:nth-child(2)').classList.add('active');
        document.getElementById('manualTab').classList.add('active');
      }
    }
    
    function changeDate(days) {
      const date = new Date(currentDate);
      date.setDate(date.getDate() + days);
      currentDate = date.toISOString().split('T')[0];
      loadSchedule(currentDate);
    }
    
    function goToday() {
      currentDate = new Date().toISOString().split('T')[0];
      loadSchedule(currentDate);
    }
    
    // 여러 날짜를 동시에 로드
    async function loadMultipleDays(startOffset, endOffset) {
      try {
        document.getElementById('loadingIndicator').style.display = 'block';
        document.getElementById('multiTableContainer').innerHTML = '';
        document.getElementById('emptyState').style.display = 'none';
        
        const today = new Date();
        const dates = [];
        
        // 날짜 배열 생성
        for (let i = startOffset; i <= endOffset; i++) {
          const date = new Date(today);
          date.setDate(date.getDate() + i);
          dates.push(date.toISOString().split('T')[0]);
        }
        
        // 모든 날짜 데이터 로드
        const allData = await Promise.all(
          dates.map(date => fetch(`/pickup/api/schedule/${date}`).then(r => r.json()))
        );
        
        // 날짜 표시 업데이트
        const dateLabels = dates.map((d, i) => {
          if (startOffset + i === 0) return '오늘';
          if (startOffset + i === 1) return '내일';
          if (startOffset + i === 2) return '모레';
          return d;
        });
        document.getElementById('dateDisplay').textContent = dateLabels.join(' + ');
        
        // 전체 통계 계산
        const totalSummary = {
          total: allData.reduce((sum, d) => sum + (d.summary?.total || 0), 0),
          contacted: allData.reduce((sum, d) => sum + (d.summary?.contacted || 0), 0),
          pending: allData.reduce((sum, d) => sum + (d.summary?.pending || 0), 0),
          total_passengers: allData.reduce((sum, d) => sum + (d.summary?.total_passengers || 0), 0)
        };
        updateSummary(totalSummary);
        
        // 날짜별 테이블 렌더링
        renderMultipleDayTables(dates, allData);
        
        document.getElementById('loadingIndicator').style.display = 'none';
        
      } catch (error) {
        console.error('스케줄 로드 실패:', error);
        showToast('스케줄 로드 실패', 'error');
      }
    }
    
    // 단일 날짜 로드 (기존 기능)
    async function loadSchedule(date) {
      try {
        document.getElementById('loadingIndicator').style.display = 'block';
        document.getElementById('multiTableContainer').innerHTML = '';
        document.getElementById('emptyState').style.display = 'none';
        
        const response = await fetch(`/pickup/api/schedule/${date}`);
        const data = await response.json();
        
        updateDateDisplay(date);
        updateSummary(data.summary);
        
        if (data.pickups && data.pickups.length > 0) {
          renderMultipleDayTables([date], [data]);
        } else {
          document.getElementById('emptyState').style.display = 'block';
        }
        
        document.getElementById('loadingIndicator').style.display = 'none';
        
      } catch (error) {
        console.error('스케줄 로드 실패:', error);
        showToast('스케줄 로드 실패', 'error');
      }
    }
    
    function updateDateDisplay(dateStr) {
      const date = new Date(dateStr);
      const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      const dayName = days[date.getDay()];
      document.getElementById('dateDisplay').textContent = `${dateStr} (${dayName})`;
    }
    
    function updateSummary(summary) {
      document.getElementById('totalCount').textContent = summary.total || 0;
      document.getElementById('contactedCount').textContent = summary.contacted || 0;
      document.getElementById('pendingCount').textContent = summary.pending || 0;
      document.getElementById('passengerCount').textContent = summary.total_passengers || 0;
    }
    
    // 여러 날짜의 테이블을 렌더링
    function renderMultipleDayTables(dates, allData) {
      const container = document.getElementById('multiTableContainer');
      container.innerHTML = '';
      
      dates.forEach((date, index) => {
        const data = allData[index];
        const pickups = data.pickups || [];
        
        if (pickups.length === 0 && dates.length === 1) {
          return; // 단일 날짜이고 데이터 없으면 empty state 표시
        }
        
        // 날짜별 섹션 생성
        const section = document.createElement('div');
        section.style.marginBottom = '30px';
        
        // 날짜 헤더
        const dateHeader = document.createElement('h2');
        const dateObj = new Date(date);
        const days = ['일', '월', '화', '수', '목', '금', '토'];
        const dayName = days[dateObj.getDay()];
        dateHeader.textContent = `📅 ${date} (${dayName}) - ${pickups.length}건`;
        dateHeader.style.cssText = 'background: #6B8E23; color: white; padding: 15px; margin: 0; border-radius: 8px 8px 0 0;';
        section.appendChild(dateHeader);
        
        if (pickups.length === 0) {
          const emptyMsg = document.createElement('div');
          emptyMsg.textContent = '예약 없음';
          emptyMsg.style.cssText = 'padding: 20px; text-align: center; color: #999; background: #f5f5f5;';
          section.appendChild(emptyMsg);
        } else {
          // 테이블 생성
          const tableContainer = document.createElement('div');
          tableContainer.className = 'table-container';
          tableContainer.style.display = 'block';
          
          const table = document.createElement('table');
          table.innerHTML = `
            <thead>
              <tr>
                <th>STATUS</th>
                <th>TIME</th>
                <th>HOTEL</th>
                <th>PERSON</th>
                <th>DER</th>
                <th>VEHICLE</th>
                <th>NUM</th>
                <th>NAME</th>
                <th>ENG NAME</th>
                <th>CONTACT</th>
                <th>FLIGHT</th>
                <th>AGENCY</th>
                <th>PAY</th>
                <th>REQUEST</th>
                <th>REMARK</th>
                <th>ACTION</th>
              </tr>
            </thead>
            <tbody></tbody>
          `;
          
          const tbody = table.querySelector('tbody');
          renderPickupsToTbody(tbody, pickups);
          
          tableContainer.appendChild(table);
          section.appendChild(tableContainer);
        }
        
        container.appendChild(section);
      });
    }
    
    // tbody에 픽업 데이터 렌더링 (재사용 가능)
    function renderPickupsToTbody(tbody, pickups) {
      tbody.innerHTML = '';
      
      pickups.forEach(pickup => {
        const row = document.createElement('tr');
        row.dataset.id = pickup.id;
        row.dataset.source = pickup.pickup_source;
        
        const statusClass = pickup.contact_status === 'CONTACTED' ? 'status-contacted' : 'status-pending';
        const statusText = pickup.contact_status === 'CONTACTED' ? 'CONTACTED' : 'PENDING';
        
        const sourceClass = pickup.pickup_source === 'manual' ? 'source-manual' : 'source-system';
        const sourceText = pickup.pickup_source === 'manual' ? '✏️ Manual' : 'System';
        
        const timeDisplay = pickup.actual_pickup_time || pickup.display_time || '';
        const rentalNumber = pickup.rental_number || '-';
        const rentalDuration = pickup.rental_duration || '-';
        
        // VEHICLE 컬럼: 수동 입력값 우선, 없으면 자동 생성된 루팅 정보
        let vehicleWithRoute = '-';
        
        // 1순위: 사용자가 직접 입력한 rental_vehicle 값
        if (pickup.rental_vehicle && pickup.rental_vehicle.trim() !== '') {
          vehicleWithRoute = pickup.rental_vehicle;
        }
        // 2순위: 자동 생성된 루팅 정보
        else if (pickup.hotel_name) {
          if (pickup.record_type === 'departure') {
            vehicleWithRoute = `(${pickup.hotel_name} → AIRPORT)`;
          } else if (pickup.record_type === 'arrival') {
            vehicleWithRoute = `(AIRPORT → ${pickup.hotel_name})`;
          }
        }
        
        // FLIGHT 컬럼: 항공편 번호만
        const flightNumber = pickup.flight_number || '-';
        
        const canDelete = pickup.pickup_source === 'manual' && pickup.record_type === 'manual';
        
        // row에 data-id 추가
        row.dataset.id = pickup.id;
        
        row.innerHTML = `
          <td onclick="toggleStatus(${pickup.id}, '${pickup.contact_status}')">
            <span class="status-badge ${statusClass}">${statusText}</span>
          </td>
          <td class="time-col editable" data-field="actual_pickup_time">${timeDisplay.substring(0, 5)}</td>
          <td class="editable" data-field="hotel_name">${pickup.hotel_name || '-'}</td>
          <td class="editable" data-field="passenger_count">${pickup.passenger_count || '-'}</td>
          <td class="editable" data-field="rental_duration">${rentalDuration}</td>
          <td class="editable" data-field="rental_vehicle">${vehicleWithRoute}<span class="source-badge ${sourceClass}">${sourceText}</span></td>
          <td class="editable" data-field="rental_number">${rentalNumber}</td>
          <td>${pickup.customer_name || '-'}</td>
          <td>${pickup.english_name || '-'}</td>
          <td class="editable" data-field="phone">${pickup.phone || '-'}</td>
          <td>${flightNumber}</td>
          <td>${pickup.agency_name || '-'}</td>
          <td class="editable" data-field="payment_status">${pickup.payment_status || '-'}</td>
          <td>${pickup.special_request || '-'}</td>
          <td class="editable" data-field="remark">${pickup.remark || ''}</td>
          <td>
            <button class="delete-btn" onclick="deletePickup(${pickup.id})" ${!canDelete ? 'disabled' : ''}>
              ${canDelete ? '❌' : '🔒'}
            </button>
          </td>
        `;
        
        tbody.appendChild(row);
      });
      
      // 편집 가능한 셀에 이벤트 추가 (tbody 내의 셀만 선택)
      const editableCells = tbody.querySelectorAll('td.editable');
      console.log(`✅ ${editableCells.length}개의 편집 가능한 셀에 이벤트 리스너 등록`);
      
      editableCells.forEach((cell, index) => {
        cell.style.cursor = 'pointer';
        
        // 기존 이벤트 리스너 제거를 위해 새로운 함수 사용
        const clickHandler = function(e) {
          e.stopPropagation(); // 이벤트 전파 중지
          console.log(`셀 클릭됨 [${index}]:`, this.dataset.field, 'ID:', this.closest('tr')?.dataset.id);
          makeEditable(this);
        };
        
        cell.addEventListener('click', clickHandler);
      });
    }
    
    function makeEditable(cell) {
      // 현재 편집 중인지 확인
      if (editingCell === cell) {
        console.log('현재 셀이 이미 편집 중입니다.');
        return;
      }
      
      if (editingCell && editingCell !== cell) {
        console.log('다른 셀이 편집 중입니다. 편집을 종료합니다.');
        editingCell = null;
      }
      
      editingCell = cell;
      const currentValue = cell.textContent.trim();
      const field = cell.dataset.field;
      const row = cell.closest('tr');
      const id = row.dataset.id;
      
      console.log(`✏️ 편집 모드 진입: ID=${id}, Field=${field}, Value="${currentValue}"`);
      
      // 배지 제거
      const badge = cell.querySelector('.source-badge');
      const cleanValue = badge ? currentValue.replace(badge.textContent, '').trim() : currentValue;
      
      console.log(`정제된 값: "${cleanValue}"`);
      
      // 원본 HTML 저장
      const originalHTML = cell.innerHTML;
      
      const input = document.createElement('input');
      input.type = 'text';
      input.value = cleanValue === '-' ? '' : cleanValue;
      input.style.width = '100%';
      input.style.boxSizing = 'border-box';
      
      console.log('입력 필드 생성 완료');
      
      let isProcessing = false; // 중복 처리 방지 플래그
      
      const handleBlur = async function() {
        if (isProcessing) {
          console.log('이미 처리 중입니다. 중복 실행 방지.');
          return;
        }
        
        isProcessing = true;
        console.log('blur 이벤트 발생');
        const newValue = this.value.trim();
        
        if (newValue !== cleanValue && newValue !== (cleanValue === '-' ? '' : cleanValue)) {
          console.log(`값 변경 감지: "${cleanValue}" → "${newValue}"`);
          await updateField(id, field, newValue);
        } else {
          console.log('값이 변경되지 않음');
          cell.innerHTML = originalHTML;
        }
        editingCell = null;
        isProcessing = false;
      };
      
      input.addEventListener('blur', handleBlur, { once: true }); // once 옵션으로 한 번만 실행
      
      input.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          console.log('Enter 키 입력');
          e.preventDefault();
          this.blur();
        } else if (e.key === 'Escape') {
          console.log('Escape 키 입력 - 취소');
          input.removeEventListener('blur', handleBlur); // blur 이벤트 제거
          cell.innerHTML = originalHTML;
          editingCell = null;
        }
      });
      
      try {
        cell.innerHTML = '';
        cell.appendChild(input);
        input.focus();
        input.select(); // 텍스트 전체 선택
        console.log('✅ 입력 필드 포커스 완료');
      } catch (error) {
        console.error('❌ 입력 필드 생성 실패:', error);
        cell.innerHTML = originalHTML;
        editingCell = null;
      }
    }
    
    let isUpdating = false; // 전역 업데이트 진행 중 플래그
    
    async function updateField(id, field, value) {
      if (isUpdating) {
        console.log('⚠️ 이미 업데이트 진행 중입니다. 중복 요청 차단.');
        return;
      }
      
      isUpdating = true;
      console.log(`🔄 API 요청 시작: ID=${id}, Field=${field}, Value="${value}"`);
      
      try {
        const response = await fetch(`/pickup/api/${id}/update-field`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ field, value })
        });
        
        if (response.ok) {
          console.log('✅ 업데이트 성공');
          showToast('수정되었습니다');
          await loadSchedule(currentDate);
        } else {
          console.error('❌ 업데이트 실패:', response.status);
          throw new Error('Update failed');
        }
      } catch (error) {
        console.error('❌ 업데이트 오류:', error);
        showToast('수정 실패', 'error');
        await loadSchedule(currentDate);
      } finally {
        isUpdating = false;
        console.log('🔄 업데이트 완료');
      }
    }
    
    async function toggleStatus(id, currentStatus) {
      const newStatus = currentStatus === 'CONTACTED' ? 'PENDING' : 'CONTACTED';
      await updateField(id, 'contact_status', newStatus);
    }
    
    async function parseAndAdd() {
      const text = document.getElementById('aiParseText').value.trim();
      if (!text) {
        showToast('엑셀 데이터를 붙여넣어주세요', 'error');
        return;
      }
      
      const selectedDate = document.getElementById('excelImportDate').value;
      
      try {
        showToast('엑셀 데이터 처리 중...', 'info');
        
        const response = await fetch('/pickup/api/ai-parse', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            text,
            date: selectedDate || null  // 선택된 날짜 전송 (없으면 null)
          })
        });
        
        if (response.ok) {
          const result = await response.json();
          showToast(`✅ ${result.count || 1}건의 픽업이 추가되었습니다`);
          document.getElementById('aiParseText').value = '';
          document.getElementById('excelImportDate').value = '';
          loadSchedule(currentDate);
        } else {
          const error = await response.json();
          showToast('파싱 실패: ' + (error.error || '알 수 없는 오류'), 'error');
        }
      } catch (error) {
        console.error('엑셀 파싱 오류:', error);
        showToast('엑셀 데이터 처리 실패', 'error');
      }
    }
    
    async function addManualPickup() {
      const data = {
        pickup_date: document.getElementById('manualDate').value,
        pickup_time: document.getElementById('manualTime').value,
        hotel_name: document.getElementById('manualHotel').value,
        customer_name: document.getElementById('manualName').value,
        english_name: document.getElementById('manualEngName').value,
        passenger_count: document.getElementById('manualPerson').value,
        rental_vehicle: document.getElementById('manualVehicle').value,
        rental_number: document.getElementById('manualNumber').value,
        rental_duration: document.getElementById('manualDuration').value,
        flight_number: document.getElementById('manualFlight').value,
        phone: document.getElementById('manualPhone').value,
        remark: document.getElementById('manualRemark').value
      };
      
      if (!data.pickup_date || !data.pickup_time || !data.customer_name) {
        showToast('필수 항목을 입력해주세요', 'error');
        return;
      }
      
      try {
        const response = await fetch('/pickup/api/manual-pickup', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        
        if (response.ok) {
          showToast('픽업이 추가되었습니다');
          clearManualForm();
          loadSchedule(currentDate);
        } else {
          throw new Error('Add failed');
        }
      } catch (error) {
        showToast('추가 실패', 'error');
      }
    }
    
    async function deletePickup(id) {
      if (!confirm('정말 삭제하시겠습니까?')) return;
      
      try {
        const response = await fetch(`/pickup/api/manual-pickup/${id}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          showToast('삭제되었습니다');
          loadSchedule(currentDate);
        } else {
          const result = await response.json();
          throw new Error(result.error || 'Delete failed');
        }
      } catch (error) {
        showToast(error.message || '삭제 실패', 'error');
      }
    }
    
    function clearManualForm() {
      document.getElementById('manualHotel').value = '';
      document.getElementById('manualName').value = '';
      document.getElementById('manualEngName').value = '';
      document.getElementById('manualPerson').value = '';
      document.getElementById('manualVehicle').value = '';
      document.getElementById('manualNumber').value = '';
      document.getElementById('manualDuration').value = '';
      document.getElementById('manualFlight').value = '';
      document.getElementById('manualPhone').value = '';
      document.getElementById('manualRemark').value = '';
    }
    
    // 엑셀 다운로드
    function downloadExcel() {
      const date = currentDate;
      console.log('📥 엑셀 다운로드 시작');
      showToast('엑셀 파일 생성 중...', 'info');
      
      // 현재 화면에 표시된 모든 테이블 찾기
      const tables = document.querySelectorAll('.table-container table');
      console.log(`테이블 개수: ${tables.length}`);
      
      if (tables.length === 0) {
        console.error('❌ 테이블을 찾을 수 없습니다.');
        showToast('표시된 스케줄이 없습니다', 'error');
        return;
      }
      
      let csv = '\uFEFF'; // UTF-8 BOM for Excel
      
      // 헤더
      csv += 'DATE,STATUS,TIME,HOTEL,PERSON,DER,VEHICLE,NUM,NAME,ENG NAME,CONTACT,FLIGHT,AGENCY,PAY,REQUEST,REMARK\n';
      
      let totalRows = 0;
      
      // 모든 테이블의 데이터 수집
      tables.forEach((table, tableIndex) => {
        // 날짜 정보 가져오기 (섹션 제목에서)
        const section = table.closest('.date-section');
        const dateTitle = section?.querySelector('h2')?.textContent || date;
        console.log(`테이블 ${tableIndex + 1} 처리 중: ${dateTitle}`);
        
        const rows = table.querySelectorAll('tbody tr');
        console.log(`  행 개수: ${rows.length}`);
        
        rows.forEach((row, rowIndex) => {
          const cells = row.querySelectorAll('td');
          if (cells.length > 0) {
            const rowData = [
              dateTitle,                                                             // DATE
              cells[0]?.textContent.trim() || '',                                   // STATUS
              cells[1]?.textContent.trim() || '',                                   // TIME
              cells[2]?.textContent.trim() || '',                                   // HOTEL
              cells[3]?.textContent.trim() || '',                                   // PERSON
              cells[4]?.textContent.trim() || '',                                   // DER
              cells[5]?.textContent.replace(/✏️ Manual|System/g, '').trim() || '', // VEHICLE
              cells[6]?.textContent.trim() || '',                                   // NUM
              cells[7]?.textContent.trim() || '',                                   // NAME
              cells[8]?.textContent.trim() || '',                                   // ENG NAME
              cells[9]?.textContent.trim() || '',                                   // CONTACT
              cells[10]?.textContent.trim() || '',                                  // FLIGHT
              cells[11]?.textContent.trim() || '',                                  // AGENCY
              cells[12]?.textContent.trim() || '',                                  // PAY
              cells[13]?.textContent.trim() || '',                                  // REQUEST
              cells[14]?.textContent.trim() || ''                                   // REMARK
            ];
            
            // CSV 이스케이프 처리
            const escapedRow = rowData.map(cell => {
              if (cell.includes(',') || cell.includes('"') || cell.includes('\n')) {
                return '"' + cell.replace(/"/g, '""') + '"';
              }
              return cell;
            });
            
            csv += escapedRow.join(',') + '\n';
            totalRows++;
          }
        });
      });
      
      console.log(`총 ${totalRows}개 행 처리 완료`);
      
      if (totalRows === 0) {
        console.warn('⚠️ 데이터가 없습니다.');
        showToast('내보낼 데이터가 없습니다', 'error');
        return;
      }
      
      // 다운로드
      try {
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `pickup_schedule_${date}.csv`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        console.log('✅ 다운로드 완료');
        showToast(`✅ ${totalRows}건의 데이터를 엑셀로 다운로드했습니다`);
      } catch (error) {
        console.error('❌ 다운로드 실패:', error);
        showToast('다운로드 실패', 'error');
      }
    }
    
    // 공개 링크 공유
    function sharePublicLink() {
      const date = currentDate;
      const publicUrl = `${window.location.origin}/pickup/schedule/public/${date}`;
      
      // 클립보드에 복사
      navigator.clipboard.writeText(publicUrl).then(() => {
        showToast('📋 링크가 클립보드에 복사되었습니다');
        
        // 링크를 모달로 표시
        const modal = document.createElement('div');
        modal.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 20px rgba(0,0,0,0.3); z-index: 10000; max-width: 500px;';
        modal.innerHTML = `
          <h3 style="margin: 0 0 15px 0; color: #333;">🔗 운전수 공유 링크</h3>
          <p style="margin: 0 0 10px 0; color: #666;">이 링크를 운전수들에게 공유하세요:</p>
          <div style="background: #f5f5f5; padding: 10px; border-radius: 5px; word-break: break-all; margin-bottom: 15px; font-size: 14px;">
            ${publicUrl}
          </div>
          <div style="display: flex; gap: 10px;">
            <button onclick="window.open('${publicUrl}', '_blank')" style="flex: 1; padding: 10px; background: #3B82F6; color: white; border: none; border-radius: 5px; cursor: pointer; font-weight: bold;">
              새 창에서 열기
            </button>
            <button onclick="this.closest('div').parentElement.remove(); document.querySelector('.modal-backdrop').remove();" style="flex: 1; padding: 10px; background: #6B7280; color: white; border: none; border-radius: 5px; cursor: pointer; font-weight: bold;">
              닫기
            </button>
          </div>
        `;
        
        // 배경 오버레이
        const backdrop = document.createElement('div');
        backdrop.className = 'modal-backdrop';
        backdrop.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999;';
        backdrop.onclick = () => {
          modal.remove();
          backdrop.remove();
        };
        
        document.body.appendChild(backdrop);
        document.body.appendChild(modal);
      }).catch(() => {
        showToast('클립보드 복사 실패. 수동으로 복사해주세요.', 'error');
        alert(`운전수 공유 링크:\n${publicUrl}`);
      });
    }
    
    function showToast(message, type = 'success') {
      const toast = document.createElement('div');
      toast.className = `toast ${type}`;
      toast.textContent = message;
      document.body.appendChild(toast);
      
      setTimeout(() => {
        toast.remove();
      }, 3000);
    }
  </script>
</body>
</html>
