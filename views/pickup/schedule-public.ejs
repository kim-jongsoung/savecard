<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>HKT Pickup Schedule</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Arial, sans-serif;
      background: #f5f5f5;
      padding: 20px;
    }
    
    .container {
      max-width: 1400px;
      margin: 0 auto;
      background: white;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      text-align: center;
    }
    
    .header h1 {
      font-size: 32px;
      margin-bottom: 10px;
    }
    
    .header .date-display {
      font-size: 24px;
      font-weight: bold;
      margin: 15px 0;
    }
    
    .nav-buttons {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-top: 20px;
    }
    
    .nav-buttons button {
      background: rgba(255,255,255,0.2);
      border: 2px solid white;
      color: white;
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
      font-weight: bold;
      transition: all 0.3s;
    }
    
    .nav-buttons button:hover {
      background: rgba(255,255,255,0.3);
      transform: scale(1.05);
    }
    
    .info-bar {
      background: #f8f9fa;
      padding: 10px;
      border-bottom: 2px solid #e0e0e0;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 15px;
    }
    
    .summary {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }
    
    .summary-item {
      background: white;
      padding: 5px 10px;
      border-radius: 5px;
      border: 2px solid #e0e0e0;
      font-size: 12px;
    }
    
    .summary-item strong {
      color: #667eea;
      font-size: 16px;
    }
    
    .last-updated {
      color: #666;
      font-size: 11px;
      font-style: italic;
    }
    
    .table-container {
      overflow-x: auto;
      padding: 10px;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      font-size: 14px;
    }
    
    thead {
      background: #6B8E23;
      color: white;
      position: sticky;
      top: 0;
      z-index: 10;
    }
    
    th {
      padding: 12px 8px;
      text-align: left;
      font-weight: bold;
      border-right: 1px solid rgba(255,255,255,0.2);
      white-space: nowrap;
    }
    
    th:last-child {
      border-right: none;
    }
    
    td {
      padding: 12px 8px;
      border-bottom: 1px solid #e0e0e0;
      vertical-align: middle;
    }
    
    tbody tr:hover {
      background: #f8f9fa;
      cursor: pointer;
    }
    
    /* Ïô∏Î∂Ä Îç∞Ïù¥ÌÑ∞ Ìñâ Î∞∞Í≤Ω (Ïó∞Ìïú ÌöåÏÉâ) */
    tbody tr.external-data-row {
      background: #f5f5f5;
    }
    
    tbody tr.external-data-row:hover {
      background: #ececec;
    }
    
    .status-badge {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 12px;
      font-size: 12px;
      font-weight: bold;
    }
    
    .status-contacted {
      background: #d4edda;
      color: #155724;
    }
    
    .status-pending {
      background: #fff3cd;
      color: #856404;
    }
    
    .time-col {
      font-weight: bold;
      font-size: 16px;
      color: #667eea;
    }
    
    .source-badge {
      display: inline-block;
      padding: 2px 8px;
      border-radius: 3px;
      font-size: 11px;
      font-weight: bold;
      margin-left: 5px;
    }
    
    .source-system {
      background: #e3f2fd;
      color: #1976d2;
    }
    
    .source-manual {
      background: #fff3e0;
      color: #f57c00;
    }
    
    .source-excel {
      background: #e8f5e9;
      color: #2e7d32;
    }
    
    .empty-state {
      text-align: center;
      padding: 60px 20px;
      color: #999;
    }
    
    .empty-state h2 {
      font-size: 24px;
      margin-bottom: 10px;
    }
    
    .footer {
      background: #f8f9fa;
      padding: 20px;
      text-align: center;
      color: #666;
      border-top: 2px solid #e0e0e0;
    }
    
    .loading {
      text-align: center;
      padding: 40px;
      font-size: 18px;
      color: #667eea;
    }
    
    @media print {
      .nav-buttons, .footer {
        display: none;
      }
      
      body {
        padding: 0;
      }
      
      .container {
        box-shadow: none;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üöó HKT Pickup Schedule</h1>
      <div class="date-display" id="dateDisplay">Loading...</div>
      <div class="nav-buttons" style="margin-top: 10px; gap: 10px; display: flex; align-items: center; justify-content: center; flex-wrap: wrap;">
        <button onclick="load3Days()" style="background: #FF9800; border-color: #FF9800; padding: 8px 20px;">üìÖ 3 Days</button>
        <div style="display: flex; align-items: center; gap: 5px;">
          <label style="color: white; font-size: 14px; font-weight: bold;">üìÜ Í∏∞Í∞Ñ:</label>
          <input type="date" id="dateRangeStart" style="padding: 5px; border-radius: 4px; border: 1px solid #ddd;">
          <span style="color: white;">~</span>
          <input type="date" id="dateRangeEnd" style="padding: 5px; border-radius: 4px; border: 1px solid #ddd;">
          <button onclick="loadDateRange()" style="background: #8B5CF6; border-color: #8B5CF6; padding: 8px 20px;">Ï°∞Ìöå</button>
        </div>
      </div>
    </div>
    
    <div class="info-bar">
      <div class="summary" id="summary">
        <div class="summary-item">Total Pickups: <strong id="totalCount">0</strong></div>
        <div class="summary-item">‚úÖ Contacted: <strong id="contactedCount">0</strong></div>
        <div class="summary-item">‚è≥ Pending: <strong id="pendingCount">0</strong></div>
        <div class="summary-item">üë• Total Passengers: <strong id="passengerCount">0</strong></div>
      </div>
      <div class="last-updated" id="lastUpdated">Last updated: ...</div>
    </div>
    
    <div id="loadingIndicator" class="loading">
      Loading schedule...
    </div>
    
    <div class="table-container" id="tableContainer" style="display: none;">
      <table>
        <thead>
          <tr>
            <th>DATE</th>
            <th>STATUS</th>
            <th>TIME</th>
            <th>Pickup Loc</th>
            <th>PERSON</th>
            <th>DER</th>
            <th>VEHICLE</th>
            <th>NUM</th>
            <th>NAME</th>
            <th>ENG NAME</th>
            <th>CONTACT</th>
            <th>FLIGHT</th>
            <th>AGENCY</th>
            <th>PAY</th>
            <th>REQUEST</th>
            <th>REMARK</th>
          </tr>
        </thead>
        <tbody id="scheduleBody">
        </tbody>
      </table>
    </div>
    
    <div id="emptyState" class="empty-state" style="display: none;">
      <h2>üì≠ No pickups scheduled</h2>
      <p>Check another date using the navigation buttons above</p>
    </div>
    
    <div class="footer">
      <p>üîó Bookmark this page for quick access</p>
    </div>
  </div>

  <script>
    let currentDate = '<%= initialDate %>';
    
    // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî
    document.addEventListener('DOMContentLoaded', () => {
      if (currentDate === 'today') {
        currentDate = getTodayDate();
      }
      // Í∏∞Î≥∏ÏúºÎ°ú 3Ïùº Î≥¥Í∏∞ (Ïñ¥Ï†ú-Ïò§Îäò-ÎÇ¥Ïùº)
      load3Days();
    });
    
    // Ïò§Îäò ÎÇ†Ïßú Íµ¨ÌïòÍ∏∞
    function getTodayDate() {
      const today = new Date();
      return today.toISOString().split('T')[0];
    }
    
    // ÎÇ†Ïßú ÌëúÏãú ÏóÖÎç∞Ïù¥Ìä∏
    function updateDateDisplay(dateStr) {
      const date = new Date(dateStr);
      const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      const dayName = days[date.getDay()];
      document.getElementById('dateDisplay').textContent = 
        `${dateStr} (${dayName})`;
    }
    
    // Ïä§ÏºÄÏ§Ñ Î°úÎìú
    async function loadSchedule(date) {
      try {
        document.getElementById('loadingIndicator').style.display = 'block';
        document.getElementById('tableContainer').style.display = 'none';
        document.getElementById('emptyState').style.display = 'none';
        
        const response = await fetch(`/pickup/api/schedule/${date}`);
        const data = await response.json();
        
        // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        updateSummary(data.summary);
        
        // ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏
        if (data.pickups && data.pickups.length > 0) {
          renderScheduleTable(data.pickups);
          document.getElementById('tableContainer').style.display = 'block';
        } else {
          document.getElementById('emptyState').style.display = 'block';
        }
        
        document.getElementById('loadingIndicator').style.display = 'none';
        
        // ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Ñ
        updateLastUpdatedTime();
        
      } catch (error) {
        console.error('Ïä§ÏºÄÏ§Ñ Î°úÎìú Ïã§Ìå®:', error);
        document.getElementById('loadingIndicator').innerHTML = 
          '<p style="color: red;">‚ùå Failed to load schedule. Please try again.</p>';
      }
    }
    
    // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
    function updateSummary(summary) {
      document.getElementById('totalCount').textContent = summary.total || 0;
      document.getElementById('contactedCount').textContent = summary.contacted || 0;
      document.getElementById('pendingCount').textContent = summary.pending || 0;
      document.getElementById('passengerCount').textContent = summary.total_passengers || 0;
    }
    
    // ÌÖåÏù¥Î∏î Î†åÎçîÎßÅ
    function renderScheduleTable(pickups) {
      const tbody = document.getElementById('scheduleBody');
      tbody.innerHTML = '';
      
      // ÎÇ†Ïßú+ÏãúÍ∞Ñ ÎπÑÍµê Ìï®Ïàò
      const getDateTimeValue = (pickup) => {
        const date = pickup.display_date || '';
        const time = pickup.actual_pickup_time || pickup.display_time || '';
        return `${date} ${time}`; // "2025-10-27 14:00" ÌòïÏãù
      };
      
      // Ï†ÑÏ≤¥ ÌîΩÏóÖÏùÑ ÎÇ†Ïßú+ÏãúÍ∞ÑÏàúÏúºÎ°ú Ï†ïÎ†¨ (Ïô∏Î∂Ä/ÏãúÏä§ÌÖú Íµ¨Î∂Ñ ÏóÜÏù¥)
      const sortedPickups = pickups.sort((a, b) => {
        return getDateTimeValue(a).localeCompare(getDateTimeValue(b));
      });
      
      console.log(`üìä Ï¥ù ${sortedPickups.length}Í±¥ Îç∞Ïù¥ÌÑ∞ (ÎÇ†Ïßú+ÏãúÍ∞ÑÏàú Ï†ïÎ†¨)`);
      
      let lastDate = null;
      sortedPickups.forEach(pickup => {
        const currentDate = pickup.display_date;
        const isExternalData = pickup.pickup_source === 'manual' || pickup.pickup_source === 'excel_import';
        const row = document.createElement('tr');
        
        // ÎÇ†ÏßúÍ∞Ä Î∞îÎÄî Îïå ÏÉÅÎã®Ïóê ÏßÑÌïú ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
        if (lastDate && currentDate !== lastDate) {
          row.style.borderTop = '3px solid #667eea';
        }
        lastDate = currentDate;
        
        // Ïô∏Î∂Ä Îç∞Ïù¥ÌÑ∞ Íµ¨Î∂Ñ ÌÅ¥ÎûòÏä§ Ï∂îÍ∞Ä
        if (isExternalData) {
          row.classList.add('external-data-row');
        }
        
        // STATUS
        const statusClass = pickup.contact_status === 'CONTACTED' ? 'status-contacted' : 'status-pending';
        const statusText = pickup.contact_status === 'CONTACTED' ? 'CONTACTED' : 'PENDING';
        
        // SOURCE BADGE: Ïô∏Î∂Ä Îç∞Ïù¥ÌÑ∞(ÏàòÎèô/ÏóëÏÖÄ)ÏôÄ ÏãúÏä§ÌÖú Îç∞Ïù¥ÌÑ∞ Íµ¨Î∂Ñ
        let sourceClass, sourceText;
        if (pickup.pickup_source === 'manual') {
          sourceClass = 'source-manual';
          sourceText = '‚úèÔ∏è Manual Input';
        } else if (pickup.pickup_source === 'excel_import') {
          sourceClass = 'source-excel';
          sourceText = 'üìä Excel Import';
        } else {
          sourceClass = 'source-system';
          sourceText = 'ü§ñ System Data';
        }
        
        // TIME
        const timeDisplay = pickup.actual_pickup_time || pickup.display_time || '';
        
        // Î†åÌä∏Ïπ¥ Ï†ïÎ≥¥
        const rentalNumber = pickup.rental_number || '-';
        const rentalDuration = pickup.rental_duration || '-';
        
        // VEHICLE Ïª¨Îüº: ÏàòÎèô ÏûÖÎ†•Í∞í Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ ÏûêÎèô ÏÉùÏÑ±Îêú Î£®ÌåÖ Ï†ïÎ≥¥
        let vehicleWithRoute = '-';
        
        // 1ÏàúÏúÑ: ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë ÏûÖÎ†•Ìïú rental_vehicle Í∞í
        if (pickup.rental_vehicle && pickup.rental_vehicle.trim() !== '') {
          vehicleWithRoute = pickup.rental_vehicle;
        }
        // 2ÏàúÏúÑ: ÏûêÎèô ÏÉùÏÑ±Îêú Î£®ÌåÖ Ï†ïÎ≥¥
        else if (pickup.hotel_name) {
          if (pickup.record_type === 'departure') {
            vehicleWithRoute = `${pickup.hotel_name} ‚Üí AIRPORT`;
          } else if (pickup.record_type === 'arrival') {
            vehicleWithRoute = `AIRPORT ‚Üí ${pickup.hotel_name}`;
          }
        }
        
        // FLIGHT Ïª¨Îüº: Ìï≠Í≥µÌé∏ Î≤àÌò∏Îßå
        const flightNumber = pickup.flight_number || '-';
        
        // AGENCY: ÏóÖÏ≤¥Î™Ö ÌëúÏãú
        const agencyDisplay = pickup.agency_name || '-';
        
        // PAY: payment_status
        const payDisplay = pickup.payment_status || '-';
        
        // REQUEST: special_request
        const requestDisplay = pickup.special_request || '-';
        
        // PERSON Ïª¨Îüº: ÏÑ±Ïù∏+ÏÜåÏïÑ+Ïú†ÏïÑ ÌòïÏãù (Ïòà: 2+1+3)
        const adultCount = pickup.adult_count || 0;
        const childCount = pickup.child_count || 0;
        const infantCount = pickup.infant_count || 0;
        const personDisplay = `${adultCount}+${childCount}+${infantCount}`;
        
        // Pickup Loc Ïª¨Îüº: Ïö¥Ï†ÑÏàò ÌîΩÏóÖ Ïû•ÏÜå
        let pickupLocation = '-';
        if (pickup.record_type === 'arrival') {
          // Í¥å ÎèÑÏ∞© ‚Üí Í≥µÌï≠ÏóêÏÑú ÌîΩÏóÖ
          pickupLocation = 'AIRPORT';
        } else if (pickup.record_type === 'departure') {
          // Í¥å Ï∂úÎ∞ú ‚Üí Ìò∏ÌÖîÏóêÏÑú ÌîΩÏóÖ
          pickupLocation = pickup.hotel_name || '-';
        } else {
          // ÏàòÎèô ÏûÖÎ†• ‚Üí Ìò∏ÌÖî Ïù¥Î¶Ñ
          pickupLocation = pickup.hotel_name || '-';
        }
        
        // ÎÇ†Ïßú ÌëúÏãú (MM/DD ÌòïÏãù) - pickupÏùò display_date ÏÇ¨Ïö©
        const pickupDate = pickup.display_date || currentDate;
        const dateObj = new Date(pickupDate);
        const dateDisplay = `${String(dateObj.getMonth() + 1).padStart(2, '0')}/${String(dateObj.getDate()).padStart(2, '0')}`;
        
        row.innerHTML = `
          <td>${dateDisplay}</td>
          <td><span class="status-badge ${statusClass}">${statusText}</span></td>
          <td class="time-col">${timeDisplay.substring(0, 5)}</td>
          <td>${pickupLocation}</td>
          <td>${personDisplay}</td>
          <td>${rentalDuration}</td>
          <td>${vehicleWithRoute}</td>
          <td>${rentalNumber}</td>
          <td>${pickup.customer_name || '-'}</td>
          <td>${pickup.english_name || '-'}</td>
          <td>${pickup.phone ? maskPhone(pickup.phone) : '-'}</td>
          <td>${flightNumber}</td>
          <td>${agencyDisplay}</td>
          <td>${payDisplay}</td>
          <td>${requestDisplay}</td>
          <td>${pickup.remark || ''}</td>
        `;
        
        tbody.appendChild(row);
      });
    }
    
    // Ï†ÑÌôîÎ≤àÌò∏ ÎßàÏä§ÌÇπ (Î≥¥Ïïà)
    function maskPhone(phone) {
      if (!phone) return '-';
      if (phone.length > 4) {
        return phone.substring(0, phone.length - 4) + '****';
      }
      return phone;
    }
    
    // ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Ñ
    function updateLastUpdatedTime() {
      const now = new Date();
      const timeStr = now.toLocaleTimeString('en-US');
      document.getElementById('lastUpdated').textContent = `Last updated: ${timeStr}`;
    }
    
    // 3Ïùº Î≥¥Í∏∞ (Ïñ¥Ï†ú-Ïò§Îäò-ÎÇ¥Ïùº) - currentDate Í∏∞Ï§Ä
    async function load3Days() {
      try {
        document.getElementById('loadingIndicator').style.display = 'block';
        document.getElementById('tableContainer').style.display = 'none';
        document.getElementById('emptyState').style.display = 'none';
        
        const baseDate = new Date(currentDate);
        const dates = [];
        
        // Ïñ¥Ï†ú, Ïò§Îäò, ÎÇ¥Ïùº (currentDate Í∏∞Ï§Ä -1, 0, +1)
        for (let i = -1; i <= 1; i++) {
          const date = new Date(baseDate);
          date.setDate(date.getDate() + i);
          dates.push(date.toISOString().split('T')[0]);
        }
        
        // Î™®Îì† ÎÇ†Ïßú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        const allData = await Promise.all(
          dates.map(date => fetch(`/pickup/api/schedule/${date}`).then(r => r.json()))
        );
        
        // ÎÇ†Ïßú ÌëúÏãú ÏóÖÎç∞Ïù¥Ìä∏ (Ïñ¥Ï†ú + Ïò§Îäò + ÎÇ¥Ïùº)
        const yesterday = dates[0];
        const today = dates[1];
        const tomorrow = dates[2];
        
        document.getElementById('dateDisplay').textContent = 
          `Ïñ¥Ï†ú (${yesterday}) + Ïò§Îäò (${today}) + ÎÇ¥Ïùº (${tomorrow})`;
        
        // Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
        const totalSummary = {
          total: allData.reduce((sum, d) => sum + (d.summary?.total || 0), 0),
          contacted: allData.reduce((sum, d) => sum + (d.summary?.contacted || 0), 0),
          pending: allData.reduce((sum, d) => sum + (d.summary?.pending || 0), 0),
          total_passengers: allData.reduce((sum, d) => sum + (d.summary?.total_passengers || 0), 0)
        };
        updateSummary(totalSummary);
        
        // Î™®Îì† ÌîΩÏóÖ Ìï©ÏπòÍ∏∞ (ÎÇ†ÏßúÏàú Ï†ïÎ†¨: Ïñ¥Ï†ú ‚Üí Ïò§Îäò ‚Üí ÎÇ¥Ïùº)
        const allPickups = [];
        
        // ÎÇ†Ïßú ÏàúÏÑúÎåÄÎ°ú Ìï©ÏπòÍ∏∞ (Ïñ¥Ï†ú[0], Ïò§Îäò[1], ÎÇ¥Ïùº[2])
        for (let i = 0; i < allData.length; i++) {
          const data = allData[i];
          const currentDate = dates[i];
          
          if (data.pickups && data.pickups.length > 0) {
            // Í∞Å ÌîΩÏóÖÏóê ÎÇ†Ïßú Î≥¥Ïû•
            data.pickups.forEach(pickup => {
              if (!pickup.display_date) {
                pickup.display_date = currentDate;
              }
            });
            
            // Ìï¥Îãπ ÎÇ†ÏßúÏùò ÌîΩÏóÖÎì§ÏùÑ ÏãúÍ∞ÑÏàúÏúºÎ°ú Ï†ïÎ†¨
            const sortedPickups = data.pickups.sort((a, b) => {
              const timeA = a.actual_pickup_time || a.display_time || '';
              const timeB = b.actual_pickup_time || b.display_time || '';
              return timeA.localeCompare(timeB);
            });
            
            allPickups.push(...sortedPickups);
          }
        }
        
        // ÌÖåÏù¥Î∏î Î†åÎçîÎßÅ
        if (allPickups.length > 0) {
          renderScheduleTable(allPickups);
          document.getElementById('tableContainer').style.display = 'block';
        } else {
          document.getElementById('emptyState').style.display = 'block';
        }
        
        document.getElementById('loadingIndicator').style.display = 'none';
        updateLastUpdatedTime();
        
      } catch (error) {
        console.error('Ïä§ÏºÄÏ§Ñ Î°úÎìú Ïã§Ìå®:', error);
        document.getElementById('loadingIndicator').innerHTML = 
          '<p style="color: red;">‚ùå Failed to load schedule. Please try again.</p>';
      }
    }
    
    // Í∏∞Í∞Ñ ÏÑ†ÌÉù Í∏∞Îä•
    async function loadDateRange() {
      const startDate = document.getElementById('dateRangeStart').value;
      const endDate = document.getElementById('dateRangeEnd').value;
      
      if (!startDate || !endDate) {
        alert('ÏãúÏûëÏùºÍ≥º Ï¢ÖÎ£åÏùºÏùÑ Î™®Îëê ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
        return;
      }
      
      if (startDate > endDate) {
        alert('ÏãúÏûëÏùºÏù¥ Ï¢ÖÎ£åÏùºÎ≥¥Îã§ ÌÅ¥ Ïàò ÏóÜÏäµÎãàÎã§.');
        return;
      }
      
      try {
        document.getElementById('loadingIndicator').style.display = 'block';
        document.getElementById('tableContainer').style.display = 'none';
        document.getElementById('emptyState').style.display = 'none';
        
        // ÎÇ†Ïßú Î≤îÏúÑ ÏÉùÏÑ±
        const start = new Date(startDate);
        const end = new Date(endDate);
        const dates = [];
        
        for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
          dates.push(d.toISOString().split('T')[0]);
        }
        
        // ÎÇ†Ïßú ÌëúÏãú
        document.getElementById('dateDisplay').textContent = `${startDate} ~ ${endDate} (${dates.length}Ïùº)`;
        
        // Î™®Îì† ÎÇ†ÏßúÏùò Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        const allData = await Promise.all(
          dates.map(date => fetch(`/pickup/api/schedule/${date}`).then(r => r.json()))
        );
        
        // Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
        const totalSummary = {
          total: allData.reduce((sum, d) => sum + (d.summary?.total || 0), 0),
          contacted: allData.reduce((sum, d) => sum + (d.summary?.contacted || 0), 0),
          pending: allData.reduce((sum, d) => sum + (d.summary?.pending || 0), 0),
          total_passengers: allData.reduce((sum, d) => sum + (d.summary?.total_passengers || 0), 0)
        };
        updateSummary(totalSummary);
        
        // Î™®Îì† ÌîΩÏóÖ Ìï©ÏπòÍ∏∞ (ÎÇ†ÏßúÏàú Ï†ïÎ†¨)
        const allPickups = [];
        
        // ÎÇ†Ïßú ÏàúÏÑúÎåÄÎ°ú Ìï©ÏπòÍ∏∞
        for (let i = 0; i < allData.length; i++) {
          const data = allData[i];
          const currentDate = dates[i];
          
          if (data.pickups && data.pickups.length > 0) {
            data.pickups.forEach(pickup => {
              if (!pickup.display_date) {
                pickup.display_date = currentDate;
              }
            });
            
            // Ìï¥Îãπ ÎÇ†ÏßúÏùò ÌîΩÏóÖÎì§ÏùÑ ÏãúÍ∞ÑÏàúÏúºÎ°ú Ï†ïÎ†¨
            const sortedPickups = data.pickups.sort((a, b) => {
              const timeA = a.actual_pickup_time || a.display_time || '';
              const timeB = b.actual_pickup_time || b.display_time || '';
              return timeA.localeCompare(timeB);
            });
            
            allPickups.push(...sortedPickups);
          }
        }
        
        // ÌÖåÏù¥Î∏î Î†åÎçîÎßÅ
        if (allPickups.length > 0) {
          renderScheduleTable(allPickups);
          document.getElementById('tableContainer').style.display = 'block';
        } else {
          document.getElementById('emptyState').style.display = 'block';
        }
        
        document.getElementById('loadingIndicator').style.display = 'none';
        updateLastUpdatedTime();
        
      } catch (error) {
        console.error('Í∏∞Í∞Ñ Ï°∞Ìöå Ïã§Ìå®:', error);
        document.getElementById('loadingIndicator').innerHTML = 
          '<p style="color: red;">‚ùå Í∏∞Í∞Ñ Ï°∞Ìöå Ïã§Ìå®. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.</p>';
      }
    }
    
    // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
    window.addEventListener('DOMContentLoaded', () => {
      const today = new Date();
      const weekLater = new Date(today);
      weekLater.setDate(weekLater.getDate() + 7);
      
      document.getElementById('dateRangeStart').value = today.toISOString().split('T')[0];
      document.getElementById('dateRangeEnd').value = weekLater.toISOString().split('T')[0];
    });
  </script>
</body>
</html>
