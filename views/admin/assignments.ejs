<!doctype html>
<html lang="ko">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>수배관리 - 괌세이브카드 관리자</title>
    <!-- Bootstrap 5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body { background:#f7f7f9; }
        .page-header { position: sticky; top: 0; z-index: 10; background:#fff; border-bottom:1px solid #eee; }
        .status-badge { font-weight:600; }
        .row-card { background:#fff; border:1px solid #ececf1; border-radius:12px; padding:14px 16px; margin-bottom:10px; display:flex; align-items:center; gap:12px; cursor:pointer; transition: all 0.2s ease; }
        .row-card:hover { box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
        .row-main { display:flex; flex-wrap:wrap; gap:10px; align-items:center; flex:1; }
        .row-main > .chip { background:#f1f3f5; border-radius:999px; padding:4px 10px; font-size:0.9rem; }
        .row-main .dim { color:#6c757d; }
        .money { font-weight:700; }
        .btn-manage { margin-left:auto; }
        .row-card .btn-group { flex-shrink: 0; }
        .toolbar { display:flex; gap:8px; }
        .table-like { font-size:0.95rem; }
        .form-note { font-size:.85rem; color:#6c757d; }
        .divider { height:1px; background:#eee; margin:12px 0; }
        .tab-pane { padding-top:12px; }
        .copy-btn { white-space:nowrap; }
        
        /* 상태별 배지 색상 */
        .status-pending { background-color: #6c757d !important; }
        .status-in-progress { background-color: #ffc107 !important; color: #000 !important; }
        .status-confirmed { background-color: #28a745 !important; }
        .status-voucher-sent { background-color: #17a2b8 !important; }
        .status-cancelled { background-color: #dc3545 !important; }
        .status-refunded { background-color: #6f42c1 !important; }
        
        /* 수배서 모달 개선 */
        .assignment-modal .modal-body {
            padding: 1rem;
            font-size: 0.85rem;
        }
        
        .assignment-modal .card {
            margin-bottom: 0.75rem;
            border: 1px solid #e9ecef;
        }
        
        .assignment-modal .card-header {
            padding: 0.5rem 0.75rem;
            font-size: 0.9rem;
            font-weight: 600;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }
        
        .assignment-modal .card-body {
            padding: 0.75rem;
        }
        
        .assignment-modal .form-label {
            font-size: 0.75rem;
            font-weight: 600;
            color: #6c757d;
            margin-bottom: 0.25rem;
        }
        
        .assignment-modal .fw-bold,
        .assignment-modal div:not(.form-label) {
            font-size: 0.8rem;
            line-height: 1.3;
        }
        
        .assignment-modal .badge {
            font-size: 0.7rem;
            padding: 0.25rem 0.5rem;
        }
        
        .assignment-modal .btn {
            padding: 0.375rem 0.75rem;
            font-size: 0.8rem;
        }
        
        .assignment-modal .btn i {
            font-size: 0.75rem;
        }
        
        .assignment-modal .input-group-text {
            font-size: 0.8rem;
            padding: 0.375rem 0.5rem;
        }
        
        .assignment-modal .form-control {
            font-size: 0.8rem;
            padding: 0.375rem 0.5rem;
        }
        
        /* 칸 형태 구분 */
        .assignment-info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 0.5rem;
            margin-bottom: 0.75rem;
        }
        
        .assignment-info-item {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 0.375rem;
            padding: 0.5rem;
        }
        
        .assignment-info-item .label {
            font-size: 0.7rem;
            color: #6c757d;
            font-weight: 600;
            margin-bottom: 0.25rem;
            display: block;
        }
        
        .assignment-info-item .value {
            font-size: 0.8rem;
            color: #212529;
            font-weight: 500;
        }
        
        /* 버튼 및 아이콘 크기 줄이기 */
        .btn-group-sm > .btn {
            padding: 4px 8px !important;
            font-size: 0.75rem !important;
            border-radius: 4px;
        }
        
        .btn-group-sm > .btn i {
            font-size: 0.7rem !important;
        }
    </style>
</head>
<body>
    <%- include('../partials/navbar', { currentPage: 'assignments' }) %>
    
    <header class="page-header py-3">
        <div class="container d-flex align-items-center justify-content-between">
            <h1 class="h4 m-0">수배관리</h1>
            <div class="toolbar">
                <button class="btn btn-outline-secondary btn-sm" onclick="toggleFilters()">
                    <i class="bi bi-funnel me-1"></i>필터
                </button>
                <button class="btn btn-outline-secondary btn-sm" onclick="loadAssignments()">
                    <i class="bi bi-arrow-repeat me-1"></i>새로고침
                </button>
            </div>
        </div>
    </header>

    <main class="container my-3">
        <!-- 필터 패널 (숨김/표시) -->
        <div id="filterPanel" class="card mb-3" style="display: none;">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-2">
                        <label class="form-label">업체명</label>
                        <input type="text" class="form-control" id="searchCompany" placeholder="업체명 검색">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">상품명</label>
                        <input type="text" class="form-control" id="searchProduct" placeholder="상품명 검색">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">예약자명</label>
                        <input type="text" class="form-control" id="searchCustomer" placeholder="예약자명 검색">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">출발일</label>
                        <input type="date" class="form-control" id="searchDepartureDate">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">예약상태</label>
                        <select class="form-select" id="searchStatus">
                            <option value="">전체</option>
                            <option value="in_progress">수배중</option>
                            <option value="confirmed">확정</option>
                            <option value="voucher_sent">바우처전송완료</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">수배업체</label>
                        <input type="text" class="form-control" id="searchVendor" placeholder="수배업체 검색">
                    </div>
                </div>
                <div class="mt-3">
                    <button class="btn btn-primary me-2" onclick="searchAssignments()">
                        <i class="bi bi-search me-1"></i>검색
                    </button>
                    <button class="btn btn-outline-secondary" onclick="clearSearch()">
                        <i class="bi bi-x me-1"></i>초기화
                    </button>
                </div>
            </div>
        </div>

        <!-- 압축 가로 리스트 -->
        <div id="assignmentsList">
            <!-- 데이터가 여기에 로드됩니다 -->
        </div>

        <!-- 로딩 상태 -->
        <div id="loadingState" class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">로딩 중...</span>
            </div>
            <div class="mt-2">수배 목록을 불러오는 중...</div>
        </div>

        <!-- 빈 상태 -->
        <div id="emptyState" class="text-center py-5" style="display: none;">
            <i class="bi bi-inbox display-1 text-muted"></i>
            <h5 class="text-muted mt-3">수배 중인 예약이 없습니다</h5>
            <p class="text-muted">예약관리에서 수배서를 생성하면 여기에 표시됩니다.</p>
        </div>
    </main>

    <!-- 수배서 관리 모달 -->
    <div class="modal fade assignment-modal" id="assignmentModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="w-100">
                        <div class="d-flex align-items-center justify-content-between">
                            <h2 class="h5 mb-1"><i class="bi bi-file-text me-2"></i>수배서 관리</h2>
                            <span class="badge rounded-pill bg-secondary" id="m-status">상태</span>
                        </div>
                        <div class="small text-muted" id="m-brief">예약 요약</div>
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="닫기"></button>
                </div>
                <div class="modal-body">
                    <!-- 수배서 관리 내용 -->

                        <!-- 수배서 상태 및 정보 -->
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0"><i class="bi bi-info-circle me-2"></i>수배서 상태</h6>
                            </div>
                            <div class="card-body">
                                <div class="assignment-info-grid">
                                    <div class="assignment-info-item">
                                        <span class="label">수배서 번호</span>
                                        <div class="value" id="assignment-number">-</div>
                                    </div>
                                    <div class="assignment-info-item">
                                        <span class="label">수배 상태</span>
                                        <div class="value" id="assignment-status">
                                            <span class="badge bg-warning">대기중</span>
                                        </div>
                                    </div>
                                    <div class="assignment-info-item">
                                        <span class="label">수배업체</span>
                                        <div class="value" id="assignment-vendor">-</div>
                                    </div>
                                    <div class="assignment-info-item">
                                        <span class="label">생성일시</span>
                                        <div class="value" id="assignment-created">-</div>
                                    </div>
                                    <div class="assignment-info-item">
                                        <span class="label">전송일시</span>
                                        <div class="value" id="assignment-sent">-</div>
                                    </div>
                                    <div class="assignment-info-item">
                                        <span class="label">확인일시</span>
                                        <div class="value" id="assignment-viewed">-</div>
                                    </div>
                                    <div class="assignment-info-item">
                                        <span class="label">응답일시</span>
                                        <div class="value" id="assignment-responded">-</div>
                                    </div>
                                    <div class="assignment-info-item">
                                        <span class="label">수배서 링크</span>
                                        <div class="value" id="assignment-link-status">
                                            <span class="text-muted">미생성</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="assignment-info-item" style="grid-column: 1 / -1;">
                                    <span class="label">수배 메모</span>
                                    <div class="value" id="assignment-notes">-</div>
                                </div>
                            </div>
                        </div>

                        <!-- 예약 정보 요약 (접을 수 있는 형태) -->
                        <div class="card mt-3">
                            <div class="card-header">
                                <button class="btn btn-link text-decoration-none p-0 w-100 text-start" type="button" data-bs-toggle="collapse" data-bs-target="#reservationSummary" aria-expanded="false">
                                    <h6 class="mb-0"><i class="bi bi-chevron-right me-2"></i>예약 정보 요약</h6>
                                </button>
                            </div>
                            <div class="collapse" id="reservationSummary">
                                <div class="card-body">
                                    <div class="row g-3">
                                        <div class="col-md-3">
                                            <label class="form-label text-muted">예약번호</label>
                                            <div class="fw-bold" id="detail-reservation-number">-</div>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label text-muted">예약자명</label>
                                            <div id="detail-customer-name">-</div>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label text-muted">고객연락처</label>
                                            <div id="detail-phone">-</div>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label text-muted">업체명</label>
                                            <div id="detail-platform">-</div>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label text-muted">상품명</label>
                                            <div id="detail-product-name">-</div>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label text-muted">패키지(옵션명)</label>
                                            <div id="detail-package-type">-</div>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label text-muted">사용일자</label>
                                            <div id="detail-usage-date">-</div>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label text-muted">인원</label>
                                            <div id="detail-people">-</div>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label text-muted">메모</label>
                                            <div id="detail-memo" class="text-muted">-</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                            <!-- 수배서 관리 버튼들 -->
                            <div class="card mt-3">
                                <div class="card-header">
                                    <h6 class="mb-0"><i class="bi bi-gear me-2"></i>수배서 관리</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row g-3">
                                        <div class="col-md-6">
                                            <div class="d-grid gap-2">
                                                <button class="btn btn-outline-primary" onclick="previewAssignment()">
                                                    <i class="bi bi-eye me-1"></i>수배서 미리보기
                                                </button>
                                                <button class="btn btn-success" onclick="generateAssignmentLink()">
                                                    <i class="bi bi-link-45deg me-1"></i>수배서 링크 생성
                                                </button>
                                                <div class="input-group" id="assignmentLinkGroup" style="display: none;">
                                                    <input type="text" class="form-control" id="assignmentLinkUrl" readonly>
                                                    <button class="btn btn-outline-secondary copy-btn" onclick="copyAssignmentLink()">
                                                        <i class="bi bi-clipboard"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="d-grid gap-2">
                                                <button class="btn btn-primary" onclick="sendAssignmentEmail()">
                                                    <i class="bi bi-envelope me-1"></i>수배업체로 메일 전송
                                                </button>
                                                <button class="btn btn-outline-info" onclick="downloadAssignmentWord()">
                                                    <i class="bi bi-file-word me-1"></i>워드파일 다운로드
                                                </button>
                                                <button class="btn btn-outline-secondary" onclick="downloadAssignmentPdf()">
                                                    <i class="bi bi-file-pdf me-1"></i>PDF 다운로드
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- 수배 히스토리 -->
                            <div class="card mt-3">
                                <div class="card-header">
                                    <h6 class="mb-0"><i class="bi bi-clock-history me-2"></i>수배 업무 히스토리</h6>
                                </div>
                                <div class="card-body">
                                    <div id="assignmentHistory">
                                        <!-- 히스토리가 여기에 로드됩니다 -->
                                    </div>
                                </div>
                            </div>
                        </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-1"></i>닫기
                    </button>
                    <button type="button" class="btn btn-primary" onclick="saveAllChanges()">
                        <i class="fas fa-save me-1"></i>전체 저장
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentPage = 1;
        let currentStatus = '';
        let currentSearch = '';

        // 페이지 로드 시 초기화
        document.addEventListener('DOMContentLoaded', function() {
            loadAssignments();
        });

        // 수배 목록 로드
        async function loadAssignments(page = 1) {
            try {
                currentPage = page;
                const params = new URLSearchParams({
                    page: page,
                    status: currentStatus,
                    search: currentSearch
                });

                const response = await fetch(`/api/assignments?${params}`);
                const data = await response.json();

                console.log('수배관리 API 응답:', data);
                
                if (data.success) {
                    console.log('예약 데이터 샘플:', data.data.assignments[0]);
                    
                    // 전역 변수에 데이터 저장
                    window.reservations = data.data.assignments;
                    
                    renderAssignments(data.data.assignments);
                } else {
                    console.error('API 오류:', data.message);
                    showAlert('데이터를 불러오는데 실패했습니다: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('수배 목록 로드 실패:', error);
                showAlert('수배 목록을 불러오는데 실패했습니다.', 'danger');
            }
        }

        // 수배관리 목록 렌더링 (카드 형태)
        function renderAssignments(assignments) {
            const assignmentsList = document.getElementById('assignmentsList');
            const loadingState = document.getElementById('loadingState');
            const emptyState = document.getElementById('emptyState');
            
            // 로딩 상태 숨기기
            loadingState.style.display = 'none';
            
            if (assignments.length === 0) {
                assignmentsList.style.display = 'none';
                emptyState.style.display = 'block';
                return;
            }
            
            emptyState.style.display = 'none';
            assignmentsList.style.display = 'block';

            const html = assignments.map(reservation => {
                console.log('예약 상태 정보:', {
                    id: reservation.id,
                    payment_status: reservation.payment_status,
                    reservation_number: reservation.reservation_number
                });
                
                const statusClass = getStatusClass(reservation.payment_status);
                const statusText = getReservationStatusText(reservation.payment_status);
                const bootstrapClass = getBootstrapStatusClass(reservation.payment_status);
                const amount = reservation.total_price ? parseInt(reservation.total_price).toLocaleString('ko-KR') + '원' : '-';
                const pax = `성인 ${reservation.people_adult || 0}명, 아동 ${reservation.people_child || 0}명`;
                
                console.log('상태 변환 결과:', {
                    original: reservation.payment_status,
                    statusText: statusText,
                    bootstrapClass: bootstrapClass
                });
                
                return `
                    <article class="row-card table-like">
                        <span class="badge bg-${getBootstrapStatusClass(reservation.payment_status)} status-badge">${statusText}</span>
                        <div class="row-main">
                            <span><strong>${reservation.platform_name || '-'}</strong><span class="dim">(${reservation.korean_name || '-'})</span></span>
                            <span class="chip">${reservation.product_name || '-'}</span>
                            <span class="dim"><i class="bi bi-calendar2 me-1"></i>출발일 ${formatDate(reservation.usage_date) || '-'}</span>
                            <span class="dim"><i class="bi bi-building me-1"></i>수배업체: ${reservation.vendor_name || '미지정'}</span>
                            <span class="money"><i class="bi bi-cash-coin me-1"></i>${amount}</span>
                        </div>
                        <div class="btn-group btn-group-sm ms-auto" role="group">
                            <button class="btn btn-sm ${getAssignmentIconClass(reservation)}" 
                                    onclick="openAssignmentModal(${reservation.id})" 
                                    data-reservation='${JSON.stringify(reservation)}'
                                    title="${getAssignmentTooltip(reservation)}">
                                <i class="bi bi-file-text"></i>
                            </button>
                            <button class="btn btn-outline-info" onclick="viewVoucher(${reservation.id})" title="바우처 보기">
                                <i class="bi bi-ticket-perforated"></i>
                            </button>
                            <button class="btn btn-primary btn-manage" data-bs-toggle="modal" data-bs-target="#manageModal" 
                                    data-resv='${JSON.stringify({
                                        id: reservation.reservation_number || reservation.id,
                                        status: statusText,
                                        vendor: reservation.platform_name || '-',
                                        guest: reservation.korean_name || '-',
                                        product: reservation.product_name || '-',
                                        dep: formatDate(reservation.usage_date) || '-',
                                        use: formatDate(reservation.usage_date) || '-',
                                        pax: {adult: reservation.people_adult || 0, child: reservation.people_child || 0},
                                        amount: reservation.total_price || 0,
                                        handler: reservation.vendor_name || '미지정'
                                    })}' title="관리">
                                <i class="bi bi-gear"></i>
                            </button>
                        </div>
                    </article>
                `;
            }).join('');
            
            assignmentsList.innerHTML = html;
        }

        // 검색 함수
        function searchAssignments() {
            const company = document.getElementById('searchCompany').value;
            const product = document.getElementById('searchProduct').value;
            const customer = document.getElementById('searchCustomer').value;
            const status = document.getElementById('searchStatus').value;
            
            currentStatus = status;
            currentSearch = [company, product, customer].filter(s => s.trim()).join(' ');
            
            loadAssignments(1);
        }

        // 검색 초기화
        function clearSearch() {
            document.getElementById('searchCompany').value = '';
            document.getElementById('searchProduct').value = '';
            document.getElementById('searchCustomer').value = '';
            document.getElementById('searchDepartureDate').value = '';
            document.getElementById('searchStatus').value = '';
            document.getElementById('searchVendor').value = '';
            
            currentStatus = '';
            currentSearch = '';
            
            loadAssignments(1);
        }

        // 필터 토글 함수
        function toggleFilters() {
            const filterPanel = document.getElementById('filterPanel');
            if (filterPanel.style.display === 'none') {
                filterPanel.style.display = 'block';
            } else {
                filterPanel.style.display = 'none';
            }
        }

        // 새로운 디자인용 모달 이벤트 리스너 추가
        document.addEventListener('DOMContentLoaded', function() {
            // 모달 이벤트 리스너
            const manageModal = document.getElementById('manageModal');
            if (manageModal) {
                manageModal.addEventListener('show.bs.modal', function(e) {
                    const btn = e.relatedTarget;
                    const payload = btn?.getAttribute('data-resv');
                    if (!payload) return;
                    
                    try {
                        const r = JSON.parse(payload);
                        document.getElementById('m-status').textContent = r.status || '-';
                        document.getElementById('m-id').textContent = r.id || '-';
                        document.getElementById('m-vendor').textContent = r.vendor || '-';
                        document.getElementById('m-guest').textContent = r.guest || '-';
                        document.getElementById('m-product').textContent = r.product || '-';
                        document.getElementById('m-dates').textContent = (r.dep || '-') + ' / ' + (r.use || '-');
                        const paxText = `성인 ${r.pax?.adult ?? '-'}명, 아동 ${r.pax?.child ?? '-'}명`;
                        document.getElementById('m-pax').textContent = paxText;
                        document.getElementById('m-handler').textContent = r.handler || '-';
                        const amount = (typeof r.amount === 'number') ? r.amount.toLocaleString('ko-KR') + '원' : '-';
                        document.getElementById('m-amount').textContent = amount;
                        document.getElementById('m-brief').textContent = `${r.vendor ?? ''} / ${r.guest ?? ''} / ${r.product ?? ''}`.trim();

                        // 예약변경 탭 초기값
                        document.getElementById('f-guest').value = r.guest || '';
                        document.getElementById('f-adult').value = r.pax?.adult ?? 0;
                        document.getElementById('f-child').value = r.pax?.child ?? 0;
                        document.getElementById('f-dep').value = r.dep || '';
                        document.getElementById('f-product').value = r.product || '';
                        document.getElementById('f-handler').value = r.handler || '';

                        // 상태/컨펌 탭 초기값
                        const statusSelect = document.getElementById('f-status');
                        if (statusSelect) statusSelect.value = r.status || '수배중(현지수배)';
                        
                        const confirmInput = document.getElementById('f-confirm');
                        if (confirmInput) confirmInput.value = r.confirmNo || '';

                    } catch (err) {
                        console.warn('예약 데이터 파싱 오류', err);
                    }
                });
            }
        });

        // 예약 변경사항 저장
        function saveReservationChanges() {
            showAlert('예약 변경사항이 저장되었습니다.', 'success');
        }

        // 수배서 미리보기
        function previewAssignment() {
            showAlert('수배서 미리보기 기능은 준비 중입니다.', 'info');
        }

        // 수배서 수정
        function editAssignment() {
            showAlert('수배서 수정 기능은 준비 중입니다.', 'info');
        }

        // 수배서 전송
        function sendAssignment() {
            showAlert('수배서가 전송되었습니다.', 'success');
        }

        // 수배서 이메일 전송
        function sendAssignmentEmail() {
            showAlert('수배서가 이메일로 전송되었습니다.', 'success');
        }

        // 수배서 카카오톡 전송
        function sendAssignmentKakao() {
            showAlert('수배서가 카카오톡으로 전송되었습니다.', 'success');
        }

        // 수배서 다운로드
        function downloadAssignment() {
            showAlert('수배서 다운로드 기능은 준비 중입니다.', 'info');
        }

        // 수배서 아이콘 클래스 결정
        function getAssignmentIconClass(reservation) {
            // 수배서 상태에 따른 아이콘 색상
            if (reservation.assignment_status === 'confirmed' || reservation.confirmation_number) {
                return 'btn-primary'; // 파란색 - 확정 완료
            } else if (reservation.assignment_status === 'sent' || reservation.assignment_token) {
                return 'btn-warning'; // 노란색 - 전송 완료
            } else {
                return 'btn-outline-secondary'; // 투명 - 미생성/미전송
            }
        }

        // 수배서 툴팁 텍스트 결정
        function getAssignmentTooltip(reservation) {
            if (reservation.assignment_status === 'confirmed' || reservation.confirmation_number) {
                return '수배서 확정 완료 - 클릭하여 확정 정보 보기';
            } else if (reservation.assignment_status === 'sent' || reservation.assignment_token) {
                return '수배서 전송 완료 - 클릭하여 전송 로그 보기';
            } else {
                return '수배서 생성/전송 - 클릭하여 수배서 관리';
            }
        }

        // 수배서 보기 (모달)
        function viewAssignment(reservationId) {
            console.log('🔍 수배서 보기 요청:', reservationId);
            
            // 전역 reservations 배열에서 예약 정보 조회
            let reservation = null;
            if (window.reservations && Array.isArray(window.reservations)) {
                reservation = window.reservations.find(r => r.id === reservationId);
            }
            
            // 전역 배열에서 찾지 못했다면 현재 페이지의 데이터에서 찾기
            if (!reservation && typeof reservations !== 'undefined') {
                reservation = reservations.find(r => r.id === reservationId);
            }
            
            // 그래도 없으면 기본값 설정
            if (!reservation) {
                console.warn('예약 정보를 찾을 수 없어 기본값 사용:', reservationId);
                reservation = {
                    id: reservationId,
                    korean_name: '정보없음',
                    platform_name: '정보없음',
                    product_name: '정보없음',
                    package_type: '정보없음',
                    vendor_name: '미지정',
                    payment_status: 'pending',
                    confirmation_number: null,
                    assignment_status: null,
                    assignment_token: null
                };
            }
            
            // 상태별 모달 버튼 구성
            let modalButtons = '';
            if (reservation.assignment_status === 'confirmed' || reservation.confirmation_number) {
                // 파란색 - 확정 완료 상태
                modalButtons = `
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                    <button type="button" class="btn btn-primary" onclick="printAssignment()">
                        <i class="bi bi-printer me-1"></i>인쇄
                    </button>
                    <button type="button" class="btn btn-success" onclick="createVoucher(${reservationId})">
                        <i class="bi bi-ticket-perforated me-1"></i>바우처 생성
                    </button>
                `;
            } else if (reservation.assignment_status === 'sent' || reservation.assignment_token) {
                // 노란색 - 전송 완료 상태
                modalButtons = `
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                    <button type="button" class="btn btn-outline-primary" onclick="saveAssignmentFile(${reservationId})">
                        <i class="bi bi-download me-1"></i>파일저장
                    </button>
                    <button type="button" class="btn btn-primary" onclick="printAssignment()">
                        <i class="bi bi-printer me-1"></i>인쇄
                    </button>
                    <button type="button" class="btn btn-warning" onclick="resendAssignment(${reservationId})">
                        <i class="bi bi-send me-1"></i>재전송
                    </button>
                    <button type="button" class="btn btn-info" onclick="sendAssignmentLink(${reservationId})">
                        <i class="bi bi-link-45deg me-1"></i>링크전송
                    </button>
                `;
            } else {
                // 투명 - 미생성/미전송 상태
                modalButtons = `
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                    <button type="button" class="btn btn-success" onclick="saveAndSendAssignment(${reservationId})">
                        <i class="bi bi-save me-1"></i>저장하기
                    </button>
                    <button type="button" class="btn btn-primary" onclick="sendAssignmentNow(${reservationId})">
                        <i class="bi bi-send me-1"></i>전송하기
                    </button>
                `;
            }
            
            // 수배서 모달 HTML 생성
            const modalHtml = `
                <div class="modal fade" id="assignmentViewModal" tabindex="-1">
                    <div class="modal-dialog modal-xl">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title"><i class="bi bi-file-text me-2"></i>수배서 관리 - ${reservation.korean_name || reservation.platform_name}</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <div class="col-md-8">
                                        <!-- 수배서 내용 직접 표시 -->
                                        <div class="card">
                                            <div class="card-header bg-primary text-white">
                                                <h5 class="mb-0"><i class="bi bi-file-earmark-text me-2"></i>수배서</h5>
                                            </div>
                                            <div class="card-body">
                                                <div class="row mb-3">
                                                    <div class="col-md-6">
                                                        <h6 class="text-primary"><i class="bi bi-person me-1"></i>고객 정보</h6>
                                                        <table class="table table-sm table-borderless">
                                                            <tr><td class="fw-bold">성명:</td><td>${reservation.korean_name || reservation.platform_name || '-'}</td></tr>
                                                            <tr><td class="fw-bold">연락처:</td><td>${reservation.phone || '-'}</td></tr>
                                                            <tr><td class="fw-bold">이메일:</td><td>${reservation.email || '-'}</td></tr>
                                                            <tr><td class="fw-bold">인원:</td><td>${reservation.adult_count || 0}명 (성인) ${reservation.child_count ? `+ ${reservation.child_count}명 (아동)` : ''}</td></tr>
                                                        </table>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <h6 class="text-success"><i class="bi bi-calendar-event me-1"></i>예약 정보</h6>
                                                        <table class="table table-sm table-borderless">
                                                            <tr><td class="fw-bold">예약번호:</td><td class="text-primary">${reservation.id}</td></tr>
                                                            <tr><td class="fw-bold">예약일:</td><td>${reservation.travel_date ? new Date(reservation.travel_date).toLocaleDateString('ko-KR') : '-'}</td></tr>
                                                            <tr><td class="fw-bold">결제금액:</td><td class="text-danger fw-bold">${reservation.total_amount ? reservation.total_amount.toLocaleString() : '0'}원</td></tr>
                                                            <tr><td class="fw-bold">상태:</td><td><span class="badge bg-${getBootstrapStatusClass(reservation.payment_status)}">${getStatusText(reservation.payment_status)}</span></td></tr>
                                                        </table>
                                                    </div>
                                                </div>
                                                
                                                <div class="row mb-3">
                                                    <div class="col-12">
                                                        <h6 class="text-info"><i class="bi bi-box me-1"></i>상품 정보</h6>
                                                        <div class="alert alert-light">
                                                            <div class="row">
                                                                <div class="col-md-8">
                                                                    <h5 class="text-success mb-2">${reservation.product_name || '상품명 없음'}</h5>
                                                                    ${reservation.package_type ? `<p class="mb-1"><strong>패키지 타입:</strong> <span class="badge bg-info">${reservation.package_type}</span></p>` : ''}
                                                                    ${reservation.product_description ? `<p class="mb-0 text-muted">${reservation.product_description}</p>` : ''}
                                                                </div>
                                                                <div class="col-md-4 text-end">
                                                                    <p class="mb-1"><strong>수배업체:</strong></p>
                                                                    <span class="badge bg-warning text-dark">${reservation.vendor_name || '미지정'}</span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                ${reservation.confirmation_number ? `
                                                <div class="row mb-3">
                                                    <div class="col-12">
                                                        <div class="alert alert-success">
                                                            <h6><i class="bi bi-check-circle me-1"></i>확정 정보</h6>
                                                            <p class="mb-0"><strong>컨펌번호:</strong> <span class="fw-bold">${reservation.confirmation_number}</span></p>
                                                        </div>
                                                    </div>
                                                </div>
                                                ` : ''}

                                                <div class="row">
                                                    <div class="col-12">
                                                        <div id="assignmentLinkSection" style="display: none;" class="alert alert-info">
                                                            <h6><i class="bi bi-link me-1"></i>수배서 링크</h6>
                                                            <div class="input-group">
                                                                <input type="text" class="form-control" id="assignmentLinkInput" readonly>
                                                                <button class="btn btn-outline-secondary" type="button" onclick="copyAssignmentLink()">
                                                                    <i class="bi bi-clipboard"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="card">
                                            <div class="card-header">
                                                <h6 class="mb-0"><i class="bi bi-info-circle me-1"></i>수배 정보</h6>
                                            </div>
                                            <div class="card-body">
                                                <div id="assignmentInfo">
                                                    <p><strong>상품명:</strong> ${reservation.product_name || '-'}</p>
                                                    <p><strong>패키지타입:</strong> <span class="text-primary">${reservation.package_type || '정보없음'}</span></p>
                                                    <p><strong>수배업체:</strong> ${reservation.vendor_name || '미지정'}</p>
                                                    <p><strong>상태:</strong> <span class="badge bg-${getBootstrapStatusClass(reservation.payment_status)}">${getStatusText(reservation.payment_status)}</span></p>
                                                    ${reservation.confirmation_number ? `<p><strong>컨펌번호:</strong> <span class="text-success">${reservation.confirmation_number}</span></p>` : ''}
                                                </div>
                                                <hr>
                                                <div id="assignmentLogs">
                                                    <h6><i class="bi bi-clock-history me-1"></i>처리 로그</h6>
                                                    <div id="logContainer" style="max-height: 200px; overflow-y: auto;">
                                                        <small class="text-muted">로그를 불러오는 중...</small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                ${modalButtons}
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // 기존 모달 제거
            const existingModal = document.getElementById('assignmentViewModal');
            if (existingModal) {
                existingModal.remove();
            }
            
            // 새 모달 추가
            document.body.insertAdjacentHTML('beforeend', modalHtml);
            
            // 모달 표시
            const modal = new bootstrap.Modal(document.getElementById('assignmentViewModal'));
            modal.show();
            
            // 로그만 로드 (수배서는 이미 표시됨)
            loadAssignmentLogs(reservationId);
        }

        // 수배 로그 로드
        async function loadAssignmentLogs(reservationId) {
            try {
                const response = await fetch(`/api/assignments/logs/${reservationId}`);
                const data = await response.json();
                
                const logContainer = document.getElementById('logContainer');
                if (data.success && data.logs.length > 0) {
                    logContainer.innerHTML = data.logs.map(log => `
                        <div class="mb-2 p-2 border-start border-3 border-${log.type === 'success' ? 'success' : log.type === 'error' ? 'danger' : 'info'}">
                            <small class="text-muted">${formatDateTime(log.created_at)}</small>
                            <div class="fw-bold">${log.action}</div>
                            ${log.details ? `<small class="text-muted">${log.details}</small>` : ''}
                        </div>
                    `).join('');
                } else {
                    logContainer.innerHTML = '<small class="text-muted">처리 로그가 없습니다.</small>';
                }
            } catch (error) {
                console.error('로그 로드 실패:', error);
                document.getElementById('logContainer').innerHTML = '<small class="text-danger">로그 로드 실패</small>';
            }
        }

        // 수배서 저장하기
        async function saveAndSendAssignment(reservationId) {
            try {
                const response = await fetch(`/api/assignments/${reservationId}/save`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await response.json();
                
                if (result.success) {
                    showAlert('수배서가 저장되었습니다.', 'success');
                    loadAssignments(); // 목록 새로고침
                    bootstrap.Modal.getInstance(document.getElementById('assignmentViewModal')).hide();
                } else {
                    showAlert(result.message || '수배서 저장에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('수배서 저장 실패:', error);
                showAlert('수배서 저장 중 오류가 발생했습니다.', 'error');
            }
        }

        // 수배서 전송하기
        async function sendAssignmentNow(reservationId) {
            try {
                const response = await fetch(`/api/assignments/${reservationId}/send`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await response.json();
                
                if (result.success) {
                    showAlert('수배서가 전송되었습니다.', 'success');
                    loadAssignments(); // 목록 새로고침
                    loadAssignmentLogs(reservationId); // 로그 새로고침
                } else {
                    showAlert(result.message || '수배서 전송에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('수배서 전송 실패:', error);
                showAlert('수배서 전송 중 오류가 발생했습니다.', 'error');
            }
        }

        // 수배서 재전송
        async function resendAssignment(reservationId) {
            if (!confirm('수배서를 재전송하시겠습니까?')) return;
            
            try {
                const response = await fetch(`/api/assignments/${reservationId}/resend`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await response.json();
                
                if (result.success) {
                    showAlert('수배서가 재전송되었습니다.', 'success');
                    loadAssignmentLogs(reservationId); // 로그 새로고침
                } else {
                    showAlert(result.message || '수배서 재전송에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('수배서 재전송 실패:', error);
                showAlert('수배서 재전송 중 오류가 발생했습니다.', 'error');
            }
        }

        // 수배서 링크 생성 및 표시
        async function sendAssignmentLink(reservationId) {
            try {
                // 토큰 생성 및 링크 생성
                const response = await fetch(`/api/assignments/${reservationId}/generate-link`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await response.json();
                
                if (result.success && result.link) {
                    // 링크를 모달에 표시
                    const linkSection = document.getElementById('assignmentLinkSection');
                    const linkInput = document.getElementById('assignmentLinkInput');
                    
                    if (linkSection && linkInput) {
                        linkInput.value = result.link;
                        linkSection.style.display = 'block';
                    }
                    
                    showAlert('수배서 링크가 생성되었습니다. 링크를 복사하여 전송하세요.', 'success');
                    loadAssignmentLogs(reservationId); // 로그 새로고침
                } else {
                    showAlert(result.message || '링크 생성에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('링크 생성 실패:', error);
                showAlert('링크 생성 중 오류가 발생했습니다.', 'error');
            }
        }

        // 수배서 파일 저장
        async function saveAssignmentFile(reservationId) {
            try {
                const response = await fetch(`/api/assignments/${reservationId}/download`);
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `수배서_${reservationId}.pdf`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                    showAlert('수배서 파일이 저장되었습니다.', 'success');
                } else {
                    showAlert('파일 저장에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('파일 저장 실패:', error);
                showAlert('파일 저장 중 오류가 발생했습니다.', 'error');
            }
        }

        // 바우처 생성
        async function createVoucher(reservationId) {
            try {
                const response = await fetch(`/api/reservations/${reservationId}/voucher`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await response.json();
                
                if (result.success) {
                    showAlert('바우처가 생성되었습니다.', 'success');
                    loadAssignments(); // 목록 새로고침
                } else {
                    showAlert(result.message || '바우처 생성에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('바우처 생성 실패:', error);
                showAlert('바우처 생성 중 오류가 발생했습니다.', 'error');
            }
        }

        // 날짜시간 포맷팅
        function formatDateTime(dateString) {
            if (!dateString) return '-';
            const date = new Date(dateString);
            return date.toLocaleDateString('ko-KR') + ' ' + date.toLocaleTimeString('ko-KR');
        }

        // 상태 텍스트 변환
        function getStatusText(status) {
            const statusMap = {
                'pending': '대기중',
                'in_progress': '수배중', 
                'confirmed': '확정',
                'voucher_sent': '바우처전송완료',
                'cancelled': '취소',
                'refunded': '환불'
            };
            return statusMap[status] || status;
        }

        // Bootstrap 상태 클래스 변환
        function getBootstrapStatusClass(status) {
            const classMap = {
                'pending': 'warning',
                'in_progress': 'info',
                'confirmed': 'success', 
                'voucher_sent': 'primary',
                'cancelled': 'danger',
                'refunded': 'secondary'
            };
            return classMap[status] || 'secondary';
        }

        // 수배서 인쇄
        function printAssignment() {
            // 모달 내용을 인쇄
            const modalBody = document.querySelector('#assignmentViewModal .modal-body');
            if (modalBody) {
                const printWindow = window.open('', '_blank');
                printWindow.document.write(`
                    <html>
                        <head>
                            <title>수배서</title>
                            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
                            <style>
                                @media print {
                                    .no-print { display: none !important; }
                                    body { font-size: 12px; }
                                }
                            </style>
                        </head>
                        <body>
                            ${modalBody.innerHTML}
                        </body>
                    </html>
                `);
                printWindow.document.close();
                printWindow.print();
            } else {
                showAlert('수배서를 먼저 로드해주세요.', 'warning');
            }
        }

        // 수배서 링크 복사
        function copyAssignmentLink() {
            const linkInput = document.getElementById('assignmentLinkInput');
            if (linkInput && linkInput.value) {
                linkInput.select();
                document.execCommand('copy');
                showAlert('링크가 클립보드에 복사되었습니다.', 'success');
            } else {
                showAlert('복사할 링크가 없습니다.', 'warning');
            }
        }

        // 예약 ID로 수배서 토큰을 찾아서 로드
        async function loadAssignmentByReservationId(reservationId) {
            try {
                console.log('🔍 수배서 토큰 조회:', reservationId);
                
                // 수배서 토큰 조회
                const response = await fetch(`/api/assignments/by-reservation/${reservationId}`);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('✅ 수배서 토큰 조회 성공:', data);
                
                if (data.assignment_token) {
                    loadAssignmentFrame(data.assignment_token);
                } else {
                    throw new Error('수배서 토큰을 찾을 수 없습니다');
                }
                
            } catch (error) {
                console.error('❌ 수배서 토큰 조회 오류:', error);
                showAssignmentError(error.message);
            }
        }

        // 수배서 iframe 로드
        function loadAssignmentFrame(token) {
            const iframe = document.getElementById('assignmentFrame');
            const spinner = document.getElementById('loadingSpinner');
            const errorDiv = document.getElementById('errorMessage');
            
            console.log('🔍 수배서 iframe 로드:', token);
            
            iframe.src = `/assignment/${token}`;
            
            iframe.onload = () => {
                console.log('✅ 수배서 iframe 로드 완료');
                spinner.style.display = 'none';
                iframe.style.display = 'block';
                errorDiv.style.display = 'none';
            };
            
            iframe.onerror = () => {
                console.error('❌ 수배서 iframe 로드 실패');
                showAssignmentError('수배서 페이지를 불러올 수 없습니다');
            };
            
            // 5초 후에도 로드되지 않으면 오류 표시
            setTimeout(() => {
                if (iframe.style.display === 'none') {
                    console.error('❌ 수배서 로드 타임아웃');
                    showAssignmentError('수배서 로드 시간이 초과되었습니다');
                }
            }, 5000);
        }

        // 수배서 오류 표시
        function showAssignmentError(message) {
            const spinner = document.getElementById('loadingSpinner');
            const errorDiv = document.getElementById('errorMessage');
            const iframe = document.getElementById('assignmentFrame');
            
            spinner.style.display = 'none';
            iframe.style.display = 'none';
            errorDiv.style.display = 'block';
            errorDiv.querySelector('p').textContent = message;
        }

        // 수배서 재시도
        function retryLoadAssignment(reservationId) {
            const spinner = document.getElementById('loadingSpinner');
            const errorDiv = document.getElementById('errorMessage');
            
            spinner.style.display = 'block';
            errorDiv.style.display = 'none';
            
            loadAssignmentByReservationId(reservationId);
        }

        // 바우처 보기 (모달)
        function viewVoucher(reservationId) {
            // 바우처 모달 HTML 생성
            const modalHtml = `
                <div class="modal fade" id="voucherViewModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title"><i class="bi bi-ticket-perforated me-2"></i>바우처 보기</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="text-center">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">로딩 중...</span>
                                    </div>
                                    <p class="mt-2">바우처를 불러오는 중입니다...</p>
                                </div>
                                <iframe id="voucherFrame" style="width:100%; height:500px; border:none; display:none;"></iframe>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                                <button type="button" class="btn btn-primary" onclick="printVoucher()">
                                    <i class="bi bi-printer me-1"></i>인쇄
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // 기존 모달 제거
            const existingModal = document.getElementById('voucherViewModal');
            if (existingModal) {
                existingModal.remove();
            }
            
            // 새 모달 추가
            document.body.insertAdjacentHTML('beforeend', modalHtml);
            
            // 모달 표시
            const modal = new bootstrap.Modal(document.getElementById('voucherViewModal'));
            modal.show();
            
            // 바우처 로드
            setTimeout(() => {
                const iframe = document.getElementById('voucherFrame');
                const spinner = document.querySelector('#voucherViewModal .spinner-border').parentElement;
                
                // 먼저 바우처 토큰을 가져와야 함
                fetch(`/api/reservations/${reservationId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.reservation.voucher_token) {
                            iframe.src = `/voucher/${data.reservation.voucher_token}`;
                            iframe.onload = () => {
                                spinner.style.display = 'none';
                                iframe.style.display = 'block';
                            };
                        } else {
                            spinner.innerHTML = '<p class="text-muted">바우처가 아직 생성되지 않았습니다.</p>';
                        }
                    })
                    .catch(error => {
                        console.error('바우처 로드 오류:', error);
                        spinner.innerHTML = '<p class="text-danger">바우처를 불러오는데 실패했습니다.</p>';
                    });
            }, 500);
        }

        // 수배서 인쇄
        function printAssignment() {
            const iframe = document.getElementById('assignmentFrame');
            if (iframe && iframe.contentWindow) {
                iframe.contentWindow.print();
            }
        }

        // 바우처 인쇄
        function printVoucher() {
            const iframe = document.getElementById('voucherFrame');
            if (iframe && iframe.contentWindow) {
                iframe.contentWindow.print();
            }
        }

        // 유틸리티 함수들
        function getStatusClass(status) {
            const statusMap = {
                'pending': 'pending',
                'in_progress': 'in-progress', 
                'confirmed': 'confirmed',
                'voucher_sent': 'voucher-sent',
                'cancelled': 'cancelled',
                'refunded': 'refunded'
            };
            return statusMap[status] || 'pending';
        }

        function getBootstrapStatusClass(status) {
            const statusMap = {
                'pending': 'secondary',           // 대기중 - 회색
                'in_progress': 'warning',         // 수배중 - 노란색
                'confirmed': 'success',           // 확정 - 초록색
                'voucher_sent': 'primary',        // 바우처전송완료 - 파란색
                'cancelled': 'danger',            // 예약취소 - 빨간색
                'refunded': 'dark'                // 환불완료 - 검은색
            };
            return statusMap[status] || 'secondary';
        }

        function getReservationStatusText(status) {
            const statusMap = {
                'pending': '대기중 (신규예약)',
                'in_progress': '수배중 (현지수배)',
                'confirmed': '확정 (수배완료)',
                'voucher_sent': '바우처전송완료',
                'cancelled': '예약취소',
                'refunded': '환불완료'
            };
            return statusMap[status] || '대기중 (신규예약)';
        }

        function formatDate(dateString) {
            if (!dateString) return '-';
            const date = new Date(dateString);
            if (isNaN(date.getTime())) return '-';
            return date.toLocaleDateString('ko-KR');
        }

        function formatCurrency(amount) {
            if (!amount) return '-';
            return new Intl.NumberFormat('ko-KR', {
                style: 'currency',
                currency: 'USD'
            }).format(amount);
        }

        // 수배서 모달 열기
        function openAssignmentModal(reservationId, buttonElement) {
            console.log('수배서 모달 열기:', reservationId);
            
            let reservation = null;
            
            // 버튼 엘리먼트에서 예약 데이터 가져오기 (이벤트에서 호출된 경우)
            if (event && event.target) {
                const btn = event.target.closest('button');
                if (btn && btn.getAttribute('data-reservation')) {
                    try {
                        reservation = JSON.parse(btn.getAttribute('data-reservation'));
                        console.log('버튼에서 예약 데이터 로드:', reservation);
                    } catch (e) {
                        console.error('예약 데이터 파싱 오류:', e);
                    }
                }
            }
            
            // 버튼에서 데이터를 가져오지 못한 경우 전역 데이터에서 찾기
            if (!reservation) {
                reservation = window.reservations?.find(r => r.id === reservationId);
            }
            
            if (!reservation) {
                console.error('예약 정보를 찾을 수 없습니다. reservationId:', reservationId);
                showAlert('예약 정보를 찾을 수 없습니다.', 'danger');
                return;
            }
            
            console.log('사용할 예약 데이터:', reservation);
            
            // 수배서 정보 표시
            populateAssignmentModalDetails(reservation);
            
            // 수배서 관리 모달 열기
            const modal = new bootstrap.Modal(document.getElementById('assignmentModal'));
            modal.show();
            
            // 히스토리 로드
            loadAssignmentHistory(reservationId);
        }
        
        // 수배서 모달 정보 채우기
        async function populateAssignmentModalDetails(reservation) {
            console.log('수배서 모달 정보 채우기:', reservation);
            
            if (!reservation) {
                console.error('예약 데이터가 없습니다');
                return;
            }
            
            // 안전한 값 추출 함수
            const safeGet = (obj, key, defaultValue = '-') => {
                return obj && obj[key] !== undefined && obj[key] !== null ? obj[key] : defaultValue;
            };
            
            // 헤더 정보 (간단한 요약)
            const briefElement = document.getElementById('m-brief');
            if (briefElement) {
                briefElement.textContent = `${safeGet(reservation, 'korean_name')} | ${safeGet(reservation, 'product_name')} | ${formatDate(reservation.usage_date) || '-'}`;
            }
            
            // 예약 정보 (접을 수 있는 섹션) - 안전하게 DOM 요소 확인 후 설정
            const elements = {
                'detail-reservation-number': safeGet(reservation, 'reservation_number'),
                'detail-customer-name': safeGet(reservation, 'korean_name'),
                'detail-phone': safeGet(reservation, 'phone'),
                'detail-platform': safeGet(reservation, 'platform_name'),
                'detail-product-name': safeGet(reservation, 'product_name'),
                'detail-package-type': safeGet(reservation, 'package_type'),
                'detail-usage-date': formatDate(reservation.usage_date) || '-',
                'detail-memo': safeGet(reservation, 'memo')
            };
            
            // DOM 요소에 값 설정
            Object.entries(elements).forEach(([id, value]) => {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = value;
                } else {
                    console.warn(`DOM 요소를 찾을 수 없습니다: ${id}`);
                }
            });
            
            // 인원 정보
            const peopleElement = document.getElementById('detail-people');
            if (peopleElement) {
                const people = `성인 ${safeGet(reservation, 'people_adult', 0)}명, 아동 ${safeGet(reservation, 'people_child', 0)}명`;
                peopleElement.textContent = people;
            }
            
            // 현재 예약 ID 저장
            window.currentReservationId = reservation.id;
            console.log('현재 예약 ID 저장:', window.currentReservationId);
            
            // 수배서 정보 로드
            if (reservation.id) {
                await loadAssignmentDetails(reservation.id);
            } else {
                console.error('예약 ID가 없습니다:', reservation);
            }
        }
        
        // 수배서 상세 정보 로드
        async function loadAssignmentDetails(reservationId) {
            try {
                const response = await fetch(`/api/assignments/by-reservation/${reservationId}`);
                const result = await response.json();
                
                if (result.success && result.assignment) {
                    const assignment = result.assignment;
                    
                    // 수배서 상태 정보
                    document.getElementById('assignment-number').textContent = assignment.id || '-';
                    document.getElementById('assignment-vendor').textContent = assignment.vendor_name || '미지정';
                    document.getElementById('assignment-created').textContent = formatDateTime(assignment.assigned_at) || '-';
                    document.getElementById('assignment-sent').textContent = formatDateTime(assignment.sent_at) || '미전송';
                    document.getElementById('assignment-viewed').textContent = formatDateTime(assignment.viewed_at) || '미확인';
                    document.getElementById('assignment-responded').textContent = formatDateTime(assignment.responded_at) || '미응답';
                    document.getElementById('assignment-notes').textContent = assignment.notes || '-';
                    
                    // 수배 상태 배지
                    const statusElement = document.getElementById('assignment-status');
                    const statusBadge = getAssignmentStatusBadge(assignment.status);
                    statusElement.innerHTML = statusBadge;
                    
                    // 링크 상태
                    const linkStatusElement = document.getElementById('assignment-link-status');
                    if (assignment.assignment_token) {
                        linkStatusElement.innerHTML = '<span class="text-success"><i class="bi bi-check-circle me-1"></i>생성됨</span>';
                        // 링크 필드에 URL 표시
                        const assignmentUrl = `https://www.guamsavecard.com/assignment/${assignment.assignment_token}`;
                        document.getElementById('assignmentLinkUrl').value = assignmentUrl;
                        document.getElementById('assignmentLinkGroup').style.display = 'flex';
                    } else {
                        linkStatusElement.innerHTML = '<span class="text-muted">미생성</span>';
                        document.getElementById('assignmentLinkGroup').style.display = 'none';
                    }
                    
                } else {
                    // 수배서가 없는 경우
                    document.getElementById('assignment-number').textContent = '미생성';
                    document.getElementById('assignment-vendor').textContent = '미지정';
                    document.getElementById('assignment-created').textContent = '-';
                    document.getElementById('assignment-sent').textContent = '-';
                    document.getElementById('assignment-viewed').textContent = '-';
                    document.getElementById('assignment-responded').textContent = '-';
                    document.getElementById('assignment-notes').textContent = '-';
                    
                    const statusElement = document.getElementById('assignment-status');
                    statusElement.innerHTML = '<span class="badge bg-secondary">미생성</span>';
                    
                    document.getElementById('assignment-link-status').innerHTML = '<span class="text-muted">미생성</span>';
                    document.getElementById('assignmentLinkGroup').style.display = 'none';
                }
                
            } catch (error) {
                console.error('수배서 정보 로드 오류:', error);
                showAlert('수배서 정보를 불러오는데 실패했습니다.', 'danger');
            }
        }
        
        // 수배 상태 배지 생성
        function getAssignmentStatusBadge(status) {
            const statusMap = {
                'pending': '<span class="badge bg-warning">대기중</span>',
                'sent': '<span class="badge bg-info">전송됨</span>',
                'viewed': '<span class="badge bg-primary">확인됨</span>',
                'confirmed': '<span class="badge bg-success">확정됨</span>',
                'rejected': '<span class="badge bg-danger">거절됨</span>',
                'cancelled': '<span class="badge bg-secondary">취소됨</span>'
            };
            
            return statusMap[status] || '<span class="badge bg-secondary">알 수 없음</span>';
        }
        
        // 수배서 미리보기
        async function previewAssignment() {
            console.log('수배서 미리보기 시작, currentReservationId:', window.currentReservationId);
            
            if (!window.currentReservationId) {
                console.error('예약 정보가 선택되지 않았습니다');
                showAlert('예약 정보가 선택되지 않았습니다. 수배서 아이콘을 먼저 클릭해주세요.', 'warning');
                return;
            }
            
            try {
                console.log('수배서 토큰 조회 시작:', window.currentReservationId);
                
                // 먼저 수배서 토큰을 가져오거나 생성
                let assignmentToken = null;
                
                // 기존 수배서 토큰 확인
                const tokenResponse = await fetch(`/api/assignments/by-reservation/${window.currentReservationId}`);
                
                if (!tokenResponse.ok) {
                    throw new Error(`HTTP error! status: ${tokenResponse.status}`);
                }
                
                const tokenResult = await tokenResponse.json();
                console.log('토큰 조회 결과:', tokenResult);
                
                if (tokenResult.success && tokenResult.assignment_token) {
                    assignmentToken = tokenResult.assignment_token;
                    console.log('기존 토큰 사용:', assignmentToken);
                } else {
                    console.log('새 수배서 생성 시작');
                    // 수배서가 없으면 생성
                    const createResponse = await fetch(`/api/assignments`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            reservation_id: window.currentReservationId,
                            vendor_id: null,
                            notes: '수배서 미리보기용 생성'
                        })
                    });
                    
                    if (!createResponse.ok) {
                        throw new Error(`HTTP error! status: ${createResponse.status}`);
                    }
                    
                    const createResult = await createResponse.json();
                    console.log('수배서 생성 결과:', createResult);
                    
                    if (createResult.success) {
                        assignmentToken = createResult.assignment_token;
                        console.log('새 토큰 생성:', assignmentToken);
                    } else {
                        showAlert('수배서 생성에 실패했습니다: ' + (createResult.message || '알 수 없는 오류'), 'danger');
                        return;
                    }
                }
                
                if (!assignmentToken) {
                    throw new Error('수배서 토큰을 얻을 수 없습니다');
                }
                
                // 새 창에서 수배서 열기
                const assignmentUrl = `/assignment/${assignmentToken}`;
                console.log('수배서 URL:', assignmentUrl);
                window.open(assignmentUrl, '_blank', 'width=800,height=600');
                
                // 히스토리에 추가 (함수가 존재하는 경우에만)
                if (typeof addToHistory === 'function') {
                    addToHistory('수배서 미리보기', 'info');
                }
                
                showAlert('수배서 미리보기를 새 창에서 열었습니다.', 'success');
                
            } catch (error) {
                console.error('수배서 미리보기 오류:', error);
                showAlert('수배서 미리보기 중 오류가 발생했습니다: ' + error.message, 'danger');
            }
        }

        // 수배서 링크 생성
        async function generateAssignmentLink() {
            if (!window.currentReservationId) {
                showAlert('예약 정보가 선택되지 않았습니다.', 'warning');
                return;
            }
            
            try {
                // 기존 수배서 토큰 확인
                const tokenResponse = await fetch(`/api/assignments/by-reservation/${window.currentReservationId}`);
                const tokenResult = await tokenResponse.json();
                
                let assignmentToken = null;
                
                if (tokenResult.success && tokenResult.assignment_token) {
                    assignmentToken = tokenResult.assignment_token;
                } else {
                    // 수배서가 없으면 생성
                    const response = await fetch(`/api/assignments`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            reservation_id: window.currentReservationId,
                            vendor_id: null,
                            notes: '수배서 링크 생성'
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        assignmentToken = result.assignment_token;
                    } else {
                        showAlert('수배서 링크 생성에 실패했습니다: ' + result.message, 'danger');
                        return;
                    }
                }
                
                const assignmentUrl = `${window.location.origin}/assignment/${assignmentToken}`;
                document.getElementById('assignmentLinkUrl').value = assignmentUrl;
                document.getElementById('assignmentLinkGroup').style.display = 'flex';
                
                showAlert('수배서 링크가 생성되었습니다!', 'success');
                
                // 히스토리에 추가
                addToHistory('수배서 링크 생성', 'success');
                
            } catch (error) {
                console.error('수배서 링크 생성 오류:', error);
                showAlert('수배서 링크 생성 중 오류가 발생했습니다.', 'danger');
            }
        }
        
        // 수배서 링크 복사
        function copyAssignmentLink() {
            const linkInput = document.getElementById('assignmentLinkUrl');
            if (linkInput.value) {
                navigator.clipboard.writeText(linkInput.value).then(() => {
                    showAlert('수배서 링크가 클립보드에 복사되었습니다!', 'success');
                    addToHistory('수배서 링크 복사', 'info');
                }).catch(err => {
                    console.error('복사 실패:', err);
                    showAlert('링크 복사에 실패했습니다.', 'danger');
                });
            }
        }
        
        // 워드파일 다운로드
        async function downloadAssignmentWord() {
            if (!window.currentReservationId) {
                showAlert('예약 정보가 선택되지 않았습니다.', 'warning');
                return;
            }
            
            try {
                const response = await fetch(`/api/assignments/${window.currentReservationId}/download/word`);
                
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `수배서_${window.currentReservationId}.docx`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);
                    
                    showAlert('워드파일 다운로드가 완료되었습니다!', 'success');
                    addToHistory('워드파일 다운로드', 'success');
                } else {
                    showAlert('워드파일 다운로드에 실패했습니다.', 'danger');
                }
            } catch (error) {
                console.error('워드파일 다운로드 오류:', error);
                showAlert('워드파일 다운로드 중 오류가 발생했습니다.', 'danger');
            }
        }
        
        // PDF 다운로드
        async function downloadAssignmentPdf() {
            if (!window.currentReservationId) {
                showAlert('예약 정보가 선택되지 않았습니다.', 'warning');
                return;
            }
            
            try {
                const response = await fetch(`/api/assignments/${window.currentReservationId}/download/pdf`);
                
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `수배서_${window.currentReservationId}.pdf`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);
                    
                    showAlert('PDF 다운로드가 완료되었습니다!', 'success');
                    addToHistory('PDF 다운로드', 'success');
                } else {
                    showAlert('PDF 다운로드에 실패했습니다.', 'danger');
                }
            } catch (error) {
                console.error('PDF 다운로드 오류:', error);
                showAlert('PDF 다운로드 중 오류가 발생했습니다.', 'danger');
            }
        }
        
        // 수배업체로 메일 전송
        async function sendAssignmentEmail() {
            if (!window.currentReservationId) {
                showAlert('예약 정보가 선택되지 않았습니다.', 'warning');
                return;
            }
            
            const linkUrl = document.getElementById('assignmentLinkUrl').value;
            if (!linkUrl) {
                showAlert('먼저 수배서 링크를 생성해주세요.', 'warning');
                return;
            }
            
            try {
                const response = await fetch(`/api/assignments/${window.currentReservationId}/send-email`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        assignment_url: linkUrl,
                        message: '수배서를 확인해주세요.'
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('수배업체로 메일이 전송되었습니다!', 'success');
                    addToHistory('수배업체 메일 전송', 'success');
                } else {
                    showAlert('메일 전송에 실패했습니다: ' + result.message, 'danger');
                }
            } catch (error) {
                console.error('메일 전송 오류:', error);
                showAlert('메일 전송 중 오류가 발생했습니다.', 'danger');
            }
        }
        
        // 수배 히스토리 로드
        async function loadAssignmentHistory(reservationId) {
            try {
                const response = await fetch(`/api/assignments/logs/${reservationId}`);
                const result = await response.json();
                
                if (result.success) {
                    renderAssignmentHistory(result.logs);
                } else {
                    document.getElementById('assignmentHistory').innerHTML = '<p class="text-muted">히스토리를 불러올 수 없습니다.</p>';
                }
            } catch (error) {
                console.error('히스토리 로드 오류:', error);
                document.getElementById('assignmentHistory').innerHTML = '<p class="text-danger">히스토리 로드 중 오류가 발생했습니다.</p>';
            }
        }
        
        // 히스토리 렌더링
        function renderAssignmentHistory(logs) {
            const historyDiv = document.getElementById('assignmentHistory');
            
            if (!logs || logs.length === 0) {
                historyDiv.innerHTML = '<p class="text-muted">아직 수배 히스토리가 없습니다.</p>';
                return;
            }
            
            const html = logs.map(log => {
                const typeClass = log.type === 'success' ? 'text-success' : log.type === 'danger' ? 'text-danger' : 'text-info';
                const icon = log.type === 'success' ? 'bi-check-circle' : log.type === 'danger' ? 'bi-x-circle' : 'bi-info-circle';
                
                return `
                    <div class="d-flex align-items-center mb-2">
                        <i class="bi ${icon} ${typeClass} me-2"></i>
                        <div class="flex-grow-1">
                            <div class="fw-medium">${log.details}</div>
                            <small class="text-muted">${formatDateTime(log.created_at)}</small>
                        </div>
                    </div>
                `;
            }).join('');
            
            historyDiv.innerHTML = html;
        }
        
        // 히스토리에 항목 추가
        function addToHistory(action, type = 'info') {
            const historyDiv = document.getElementById('assignmentHistory');
            const typeClass = type === 'success' ? 'text-success' : type === 'danger' ? 'text-danger' : 'text-info';
            const icon = type === 'success' ? 'bi-check-circle' : type === 'danger' ? 'bi-x-circle' : 'bi-info-circle';
            
            const newItem = `
                <div class="d-flex align-items-center mb-2">
                    <i class="bi ${icon} ${typeClass} me-2"></i>
                    <div class="flex-grow-1">
                        <div class="fw-medium">${action}</div>
                        <small class="text-muted">${new Date().toLocaleString('ko-KR')}</small>
                    </div>
                </div>
            `;
            
            historyDiv.insertAdjacentHTML('afterbegin', newItem);
        }
        
        // 날짜/시간 포맷팅
        function formatDateTime(dateString) {
            if (!dateString) return '-';
            return new Date(dateString).toLocaleString('ko-KR');
        }

        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
