<!doctype html>
<html lang="ko">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>수배관리 - 괌세이브카드 관리자</title>
    <!-- Bootstrap 5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body { 
            background:#f7f7f9; 
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        main { 
            flex: 1;
        }
        
        /* PC 화면에서 가로폭 1200px 고정 */
        .container-fluid {
            max-width: 1200px;
            margin: 0 auto;
        }
        .page-header { position: sticky; top: 0; z-index: 10; background:#fff; border-bottom:1px solid #eee; }
        .status-badge { font-weight:600; }
        .row-card { 
            background:#fff; 
            border:2px solid #d1d5db; 
            border-radius:10px; 
            padding:18px 20px; 
            margin-bottom:16px; 
            display:flex; 
            align-items:center; 
            gap:16px; 
            cursor:pointer; 
            transition: all 0.2s ease;
            box-shadow: 0 2px 4px rgba(0,0,0,0.06);
        }
        .row-card:hover { 
            box-shadow: 0 4px 12px rgba(0,0,0,0.12);
            border-color: #9ca3af;
            transform: translateY(-1px);
        }
        .row-card-selected {
            border: 3px solid #0d6efd !important;
            background: #f0f7ff !important;
            box-shadow: 0 4px 16px rgba(13, 110, 253, 0.25) !important;
        }
        .row-main { display:flex; flex-wrap:wrap; gap:10px; align-items:center; flex:1; }
        .row-main > .chip { background:#e8f4f8; border-radius:6px; padding:5px 12px; font-size:0.95rem; font-weight:500; color:#1a73e8; }
        .row-main .dim { color:#6c757d; font-size:0.9rem; }
        .money { font-weight:700; color:#212529; }
        .btn-manage { margin-left:auto; }
        .row-card .btn-group { flex-shrink: 0; }
        .toolbar { display:flex; gap:8px; }
        .table-like { font-size:1rem; line-height:1.6; }
        .form-note { font-size:.85rem; color:#6c757d; }
        .divider { height:1px; background:#eee; margin:12px 0; }
        .tab-pane { padding-top:12px; }
        .copy-btn { white-space:nowrap; }
        
        /* 신규 뱃지 애니메이션 */
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        .animate__pulse {
            animation: pulse 2s ease-in-out infinite;
        }
        
        /* 상태별 배지 색상 */
        .status-in-revision { background-color: #ff6b6b !important; color: #fff !important; }
        .status-pending { background-color: #6c757d !important; }
        .status-in-progress { background-color: #ffc107 !important; color: #000 !important; }
        .status-confirmed { background-color: #28a745 !important; }
        .status-voucher-sent { background-color: #17a2b8 !important; }
        .status-cancelled { background-color: #dc3545 !important; }
        .status-refunded { background-color: #6f42c1 !important; }
        
        /* 이용일 완료된 건 배경색 */
        .bg-light-gray {
            background-color: #f8f9fa !important;
        }
        
        /* 수배서 모달 개선 */
        .assignment-modal .modal-body {
            padding: 1rem;
            font-size: 0.85rem;
        }
        
        .assignment-modal .card {
            margin-bottom: 0.75rem;
            border: 1px solid #e9ecef;
        }
        
        .assignment-modal .card-header {
            padding: 0.5rem 0.75rem;
            font-size: 0.9rem;
            font-weight: 600;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }
        
        .assignment-modal .card-body {
            padding: 0.75rem;
        }
        
        .assignment-modal .form-label {
            font-size: 0.75rem;
            font-weight: 600;
            color: #6c757d;
            margin-bottom: 0.25rem;
        }
        
        .assignment-modal .fw-bold,
        .assignment-modal div:not(.form-label) {
            font-size: 0.8rem;
            line-height: 1.3;
        }
        
        .assignment-modal .badge {
            font-size: 0.7rem;
            padding: 0.25rem 0.5rem;
        }
        
        .assignment-modal .btn {
            padding: 0.375rem 0.75rem;
            font-size: 0.8rem;
        }
        
        .assignment-modal .btn i {
            font-size: 0.75rem;
        }
        
        .assignment-modal .input-group-text {
            font-size: 0.8rem;
            padding: 0.375rem 0.5rem;
        }
        
        .assignment-modal .form-control {
            font-size: 0.8rem;
            padding: 0.375rem 0.5rem;
        }
        
        /* 칸 형태 구분 */
        .assignment-info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 0.5rem;
            margin-bottom: 0.75rem;
        }
        
        .assignment-info-item {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 0.375rem;
            padding: 0.5rem;
        }
        
        .assignment-info-item .label {
            font-size: 0.7rem;
            color: #6c757d;
            font-weight: 600;
            margin-bottom: 0.25rem;
            display: block;
        }
        
        .assignment-info-item .value {
            font-size: 0.8rem;
            color: #212529;
            font-weight: 500;
        }
        
        /* 버튼 및 아이콘 크기 줄이기 */
        .btn-group-sm > .btn {
            padding: 4px 8px !important;
            font-size: 0.75rem !important;
            border-radius: 4px;
        }
        
        .btn-group-sm > .btn i {
            font-size: 0.7rem !important;
        }
    </style>
</head>
<body>
    <%- include('../partials/navbar', { currentPage: 'assignments' }) %>
    
    <header class="page-header py-3">
        <div class="container d-flex align-items-center justify-content-between">
            <h1 class="h4 m-0">수배관리</h1>
            <div class="toolbar">
                <button class="btn btn-outline-secondary btn-sm" onclick="toggleFilters()">
                    <i class="bi bi-funnel me-1"></i>필터
                </button>
                <button class="btn btn-outline-secondary btn-sm" onclick="loadAssignments()">
                    <i class="bi bi-arrow-repeat me-1"></i>새로고침
                </button>
            </div>
        </div>
    </header>

    <main class="container my-3">
        <!-- 필터 패널 (기본 열림) -->
        <div id="filterPanel" class="card mb-3">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-2">
                        <label class="form-label">업체명</label>
                        <input type="text" class="form-control" id="searchCompany" placeholder="업체명 검색">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">상품명</label>
                        <input type="text" class="form-control" id="searchProduct" placeholder="상품명 검색">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">예약자명</label>
                        <input type="text" class="form-control" id="searchCustomer" placeholder="예약자명 검색">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">출발일</label>
                        <input type="date" class="form-control" id="searchDepartureDate">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">예약상태</label>
                        <select class="form-select" id="searchStatus">
                            <option value="">전체</option>
                            <option value="in_revision">수정중(예약변경)</option>
                            <option value="pending">대기중(신규)</option>
                            <option value="in_progress">수배중</option>
                            <option value="confirmed">확정완료</option>
                            <option value="voucher_sent">바우처전송</option>
                            <option value="cancelled">예약취소</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">수배업체</label>
                        <input type="text" class="form-control" id="searchVendor" placeholder="수배업체 검색">
                    </div>
                </div>
                <div class="mt-3">
                    <button class="btn btn-primary me-2" onclick="searchAssignments()">
                        <i class="bi bi-search me-1"></i>검색
                    </button>
                    <button class="btn btn-outline-secondary" onclick="clearSearch()">
                        <i class="bi bi-x me-1"></i>초기화
                    </button>
                </div>
            </div>
        </div>

        <!-- 압축 가로 리스트 -->
        <div id="assignmentsList">
            <!-- 데이터가 여기에 로드됩니다 -->
        </div>

        <!-- 로딩 상태 -->
        <div id="loadingState" class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">로딩 중...</span>
            </div>
            <div class="mt-2">수배 목록을 불러오는 중...</div>
        </div>

        <!-- 빈 상태 -->
        <div id="emptyState" class="text-center py-5" style="display: none;">
            <i class="bi bi-inbox display-1 text-muted"></i>
            <h5 class="text-muted mt-3">수배 중인 예약이 없습니다</h5>
            <p class="text-muted">예약관리에서 수배서를 생성하면 여기에 표시됩니다.</p>
        </div>
    </main>
    
    <!-- 풋터 -->
    <footer class="bg-white border-top py-3 mt-4">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-6 text-muted small">
                    <span id="totalCount">총 0개</span> | 
                    <span id="statusSummary">신규 0 · 수배중 0 · 확정 0</span>
                </div>
                <div class="col-md-6 text-end text-muted small">
                    © 2025 괌세이브카드 관리시스템
                </div>
            </div>
        </div>
    </footer>

    <!-- 1. 예약변경 모달 -->
    <div class="modal fade" id="reservationEditModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-pencil-square me-2"></i>예약변경</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-3">
                        <!-- 예약 정보 -->
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0"><i class="bi bi-info-circle me-2"></i>예약 정보</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row g-2">
                                        <div class="col-12">
                                            <label class="form-label">예약번호</label>
                                            <input type="text" class="form-control" id="edit-reservation-number" readonly>
                                        </div>
                                        <div class="col-12">
                                            <label class="form-label">업체명</label>
                                            <input type="text" class="form-control" id="edit-platform-name" placeholder="업체명">
                                        </div>
                                        <div class="col-12">
                                            <label class="form-label">예약 상태</label>
                                            <select class="form-select" id="edit-payment-status">
                                                <option value="in_revision">수정중 (예약변경)</option>
                                                <option value="pending">대기중 (신규예약)</option>
                                                <option value="in_progress">수배중 (현지수배)</option>
                                                <option value="confirmed">확정 (수배완료)</option>
                                                <option value="voucher_sent">바우처전송완료</option>
                                                <option value="cancelled">예약취소</option>
                                                <option value="refunded">환불완료</option>
                                            </select>
                                        </div>
                                        <div class="col-12">
                                            <label class="form-label">예약일시</label>
                                            <input type="text" class="form-control" id="edit-created-at" readonly>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 상품 정보 -->
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0"><i class="bi bi-box me-2"></i>상품 정보</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row g-2">
                                        <div class="col-12">
                                            <label class="form-label">상품명</label>
                                            <input type="text" class="form-control" id="edit-product-name" placeholder="상품명">
                                        </div>
                                        <div class="col-12">
                                            <label class="form-label">패키지 타입 (상품 옵션)</label>
                                            <input type="text" class="form-control" id="edit-package-type" placeholder="패키지 타입">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 일정 정보 -->
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0"><i class="bi bi-calendar me-2"></i>일정 정보</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row g-2">
                                        <div class="col-6">
                                            <label class="form-label">이용일</label>
                                            <input type="date" class="form-control" id="edit-usage-date">
                                        </div>
                                        <div class="col-6">
                                            <label class="form-label">이용시간</label>
                                            <input type="time" class="form-control" id="edit-usage-time">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 예약자 정보 -->
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0"><i class="bi bi-person me-2"></i>예약자 정보</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row g-2">
                                        <div class="col-12">
                                            <label class="form-label">한글명</label>
                                            <input type="text" class="form-control" id="edit-korean-name" placeholder="한글명">
                                        </div>
                                        <div class="col-6">
                                            <label class="form-label">영문 성</label>
                                            <input type="text" class="form-control" id="edit-english-lastname" placeholder="Last Name">
                                        </div>
                                        <div class="col-6">
                                            <label class="form-label">영문 이름</label>
                                            <input type="text" class="form-control" id="edit-english-firstname" placeholder="First Name">
                                        </div>
                                        <div class="col-12">
                                            <label class="form-label">전화번호</label>
                                            <input type="text" class="form-control" id="edit-phone" placeholder="전화번호">
                                        </div>
                                        <div class="col-12">
                                            <label class="form-label">이메일</label>
                                            <input type="email" class="form-control" id="edit-email" placeholder="이메일">
                                        </div>
                                        <div class="col-12">
                                            <label class="form-label">카카오ID</label>
                                            <input type="text" class="form-control" id="edit-kakao-id" placeholder="카카오ID">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 인원 및 금액 정보 -->
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0"><i class="bi bi-people me-2"></i>인원 및 금액 정보</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row g-2">
                                        <div class="col-md-2">
                                            <label class="form-label">성인수</label>
                                            <input type="number" class="form-control" id="edit-people-adult" min="0" value="0">
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label">아동수</label>
                                            <input type="number" class="form-control" id="edit-people-child" min="0" value="0">
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label">유아수</label>
                                            <input type="number" class="form-control" id="edit-people-infant" min="0" value="0">
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label">성인 단가($)</label>
                                            <input type="number" class="form-control" id="edit-adult-price" min="0" step="0.01">
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label">아동 단가($)</label>
                                            <input type="number" class="form-control" id="edit-child-price" min="0" step="0.01">
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label">유아 단가($)</label>
                                            <input type="number" class="form-control" id="edit-infant-price" min="0" step="0.01">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 특별 요청사항 -->
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0"><i class="bi bi-chat-text me-2"></i>특별 요청사항</h6>
                                </div>
                                <div class="card-body">
                                    <textarea class="form-control" id="edit-memo" rows="3" placeholder="특별 요청사항을 입력하세요"></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button class="btn btn-primary" onclick="saveReservationChanges()">
                        <i class="bi bi-save me-1"></i>저장
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- 2. 수배서관리 모달 -->
    <div class="modal fade" id="assignmentManageModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-file-text me-2"></i>수배서관리</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <!-- 수배서 관리 (위로 이동) -->
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0"><i class="bi bi-gear me-2"></i>수배서 관리</h6>
                            <button class="btn btn-sm btn-outline-secondary" onclick="refreshAssignmentInfo()">
                                <i class="bi bi-arrow-clockwise"></i> 새로고침
                            </button>
                        </div>
                        <div class="card-body">
                            <div class="btn-group w-100 mb-2" role="group">
                                <button class="btn btn-sm btn-outline-primary" onclick="previewAssignment()">
                                    <i class="bi bi-eye me-1"></i>미리보기
                                </button>
                                <button class="btn btn-sm btn-success" onclick="sendAssignmentWithEmail()">
                                    <i class="bi bi-envelope me-1"></i>이메일 전송
                                </button>
                                <button class="btn btn-sm btn-outline-info" onclick="copyAssignmentLink()">
                                    <i class="bi bi-link-45deg me-1"></i>링크 복사
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 수배서 정보 -->
                    <div class="card mt-2">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="bi bi-info-circle me-2"></i>수배서 정보</h6>
                        </div>
                        <div class="card-body p-2">
                            <table class="table table-sm table-borderless mb-0">
                                <tbody>
                                    <tr>
                                        <td width="30%" class="text-muted">수배서 번호</td>
                                        <td class="fw-bold" id="assignment-number">-</td>
                                    </tr>
                                    <tr>
                                        <td class="text-muted">예약업체</td>
                                        <td class="text-primary fw-bold" id="assignment-platform">-</td>
                                    </tr>
                                    <tr>
                                        <td class="text-muted">수배업체</td>
                                        <td id="assignment-vendor">-</td>
                                    </tr>
                                    <tr>
                                        <td class="text-muted">생성일시</td>
                                        <td id="assignment-created">-</td>
                                    </tr>
                                    <tr>
                                        <td class="text-muted">이메일 전송</td>
                                        <td id="assignment-email-status">
                                            <span class="badge bg-secondary">미전송</span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="text-muted">열람 현황</td>
                                        <td id="assignment-views">
                                            <span class="badge bg-secondary">미열람</span>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    
                    <!-- 열람 통계 (아래로 이동) -->
                    <div class="card mt-2">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0"><i class="bi bi-graph-up me-2"></i>열람 통계</h6>
                            <button class="btn btn-sm btn-outline-primary" onclick="loadViewStats()">
                                <i class="bi bi-arrow-clockwise"></i>
                            </button>
                        </div>
                        <div class="card-body p-2">
                            <div id="view-stats-content">
                                <div class="text-center text-muted py-2">
                                    <small><i class="bi bi-hourglass-split"></i> 조회 버튼을 클릭하세요</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 3. 상태관리 모달 -->
    <div class="modal fade" id="statusManageModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-check-circle me-2"></i>상태관리</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="bi bi-info-circle me-2"></i>현재 상태</h6>
                        </div>
                        <div class="card-body">
                            <div class="text-center">
                                <div id="current-status-display">
                                    <span class="badge bg-secondary fs-6">상태 로딩중</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="bi bi-arrow-repeat me-2"></i>상태 변경</h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label">새 상태</label>
                                    <select class="form-select" id="new-status-select">
                                        <option value="">상태 선택</option>
                                        <option value="pending">대기중</option>
                                        <option value="in_progress">수배중</option>
                                        <option value="confirmed">확정완료</option>
                                        <option value="voucher_sent">바우처전송</option>
                                        <option value="cancelled">취소</option>
                                        <option value="refunded">환불</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">변경 사유</label>
                                    <input type="text" class="form-control" id="status-change-reason" placeholder="변경 사유 (선택사항)">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="bi bi-key me-2"></i>컨펌번호 관리</h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-2">
                                <div class="col-8">
                                    <label class="form-label">컨펌번호</label>
                                    <input type="text" class="form-control" id="confirmation-number" placeholder="컨펌번호 입력">
                                </div>
                                <div class="col-4">
                                    <label class="form-label">&nbsp;</label>
                                    <button class="btn btn-outline-secondary w-100" onclick="generateConfirmationNumber()">
                                        <i class="bi bi-arrow-clockwise me-1"></i>자동생성
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button class="btn btn-success" onclick="changeReservationStatus()">
                        <i class="bi bi-check me-1"></i>상태 변경
                    </button>
                    <button class="btn btn-primary" onclick="saveConfirmationNumber()">
                        <i class="bi bi-key me-1"></i>컨펌번호 저장
                    </button>
                </div>
                
            </div>
        </div>
    </div>

    <!-- 4. 바우처관리 모달 -->
    <div class="modal fade" id="voucherManageModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-ticket-perforated me-2"></i>바우처관리</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="bi bi-info-circle me-2"></i>바우처 상태</h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-4">
                                    <label class="form-label">생성일시</label>
                                    <div id="voucher-created-at">-</div>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">전송일시</label>
                                    <div id="voucher-sent-at">-</div>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">확인일시</label>
                                    <div id="voucher-viewed-at">-</div>
                                </div>
                                <div class="col-12 text-center">
                                    <div id="voucher-status-badge">
                                        <span class="badge bg-secondary">미생성</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 바우처 링크 -->
                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="bi bi-link me-2"></i>바우처 링크</h6>
                        </div>
                        <div class="card-body">
                            <div class="input-group" id="voucherLinkGroup" style="display: none;">
                                <input type="text" class="form-control" id="voucherLinkUrl" readonly>
                                <button class="btn btn-outline-secondary" onclick="copyVoucherLink()">
                                    <i class="bi bi-clipboard me-1"></i>복사
                                </button>
                            </div>
                            <div class="text-muted" id="voucherLinkPlaceholder">
                                바우처를 생성하면 링크가 표시됩니다.
                            </div>
                        </div>
                    </div>

                    <!-- 괌세이브카드 발급 -->
                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="bi bi-credit-card me-2"></i>괌세이브카드 발급</h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-2">
                                <div class="col-8">
                                    <label class="form-label">발급 코드</label>
                                    <input type="text" class="form-control" id="savecard-code" placeholder="자동 생성됩니다">
                                </div>
                                <div class="col-4">
                                    <label class="form-label">&nbsp;</label>
                                    <button class="btn btn-outline-primary w-100" onclick="generateSavecardCode()">
                                        <i class="bi bi-arrow-clockwise me-1"></i>재생성
                                    </button>
                                </div>
                                <div class="col-12">
                                    <button class="btn btn-outline-success w-100" onclick="copySavecardInfo()">
                                        <i class="bi bi-clipboard me-1"></i>발급정보 복사
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- 바우처 관리 버튼들 -->
                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="bi bi-gear me-2"></i>바우처 관리</h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-2">
                                <div class="col-md-6">
                                    <button class="btn btn-primary w-100" onclick="generateVoucher()">
                                        <i class="bi bi-plus-circle me-1"></i>바우처 생성
                                    </button>
                                </div>
                                <div class="col-md-6">
                                    <button class="btn btn-outline-info w-100" onclick="previewVoucher()">
                                        <i class="bi bi-eye me-1"></i>미리보기
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    </div>

    <!-- 5. 정산이관 모달 -->
    <div class="modal fade" id="settlementModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-calculator me-2"></i>정산이관</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="bi bi-check2-square me-2"></i>완료 체크리스트</h6>
                        </div>
                        <div class="card-body">
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="check-voucher-sent">
                                <label class="form-check-label" for="check-voucher-sent">
                                    바우처 전송 완료
                                </label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="check-service-completed">
                                <label class="form-check-label" for="check-service-completed">
                                    서비스 이용 완료
                                </label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="check-vendor-payment">
                                <label class="form-check-label" for="check-vendor-payment">
                                    업체 정산 완료
                                </label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="check-customer-feedback">
                                <label class="form-check-label" for="check-customer-feedback">
                                    고객 피드백 수집
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="check-documents">
                                <label class="form-check-label" for="check-documents">
                                    관련 서류 정리
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="bi bi-currency-dollar me-2"></i>정산 정보</h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label">매출액</label>
                                    <input type="number" class="form-control" id="settlement-revenue" placeholder="0">
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">원가</label>
                                    <input type="number" class="form-control" id="settlement-cost" placeholder="0">
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">수수료</label>
                                    <input type="number" class="form-control" id="settlement-fee" placeholder="0">
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">순이익</label>
                                    <input type="number" class="form-control" id="settlement-profit" readonly>
                                </div>
                                <div class="col-12">
                                    <button class="btn btn-outline-secondary" onclick="calculateProfit()">
                                        <i class="bi bi-calculator me-1"></i>수익 계산
                                    </button>
                                </div>
                                <div class="col-12">
                                    <label class="form-label">정산 메모</label>
                                    <textarea class="form-control" id="settlement-memo" rows="3" placeholder="정산 관련 메모"></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                
                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button class="btn btn-danger" id="transfer-btn" onclick="transferToSettlement()" disabled>
                        <i class="bi bi-arrow-right me-1"></i>정산관리로 이관
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- 히스토리 로그 모달 -->
    <div class="modal fade" id="historyModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header bg-light">
                    <div>
                        <h5 class="modal-title mb-1">
                            <i class="bi bi-clock-history me-2 text-primary"></i>업무 히스토리 타임라인
                        </h5>
                        <p class="text-muted small mb-0">모든 작업 이력을 시간순으로 확인할 수 있습니다</p>
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">
                    <!-- 카테고리 범례 -->
                    <div class="mb-4 p-3 bg-light rounded">
                        <div class="small fw-bold mb-2">📌 카테고리 안내</div>
                        <div class="d-flex flex-wrap gap-3">
                            <span class="badge" style="background-color: #6366f1">
                                <i class="bi bi-calendar-check me-1"></i>예약
                            </span>
                            <span class="badge" style="background-color: #0891b2">
                                <i class="bi bi-truck me-1"></i>수배
                            </span>
                            <span class="badge" style="background-color: #059669">
                                <i class="bi bi-ticket-perforated me-1"></i>바우처
                            </span>
                            <span class="badge" style="background-color: #dc2626">
                                <i class="bi bi-cash-coin me-1"></i>정산
                            </span>
                            <span class="badge" style="background-color: #64748b">
                                <i class="bi bi-gear me-1"></i>시스템
                            </span>
                        </div>
                    </div>
                    
                    <!-- 히스토리 리스트 -->
                    <div id="historyList">
                        <!-- 히스토리 항목들이 여기에 표시됩니다 -->
                    </div>
                </div>
                <div class="modal-footer bg-light">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-1"></i>닫기
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentPage = 1;
        let currentStatus = '';
        let currentSearch = '';

        // 페이지 로드 시 초기화
        document.addEventListener('DOMContentLoaded', function() {
            loadAssignments();
            
            // ✅ 모든 모달에 닫힘 이벤트 리스너 추가 (자동 새로고침)
            setupModalRefreshListeners();
        });

        // 수배 목록 로드
        async function loadAssignments(page = 1) {
            try {
                console.log('🔍 loadAssignments 호출 - 페이지:', page);
                currentPage = page;
                const params = new URLSearchParams({
                    page: page,
                    status: currentStatus,
                    search: currentSearch
                });

                const response = await fetch(`/api/assignments?${params}`);
                const data = await response.json();

                console.log('📊 수배관리 API 응답 - assignments 수:', data.data?.assignments?.length);
                
                if (data.success) {
                    // 전역 변수에 데이터 저장
                    window.reservations = data.data.assignments;
                    
                    renderAssignments(data.data.assignments);
                    
                    // ✅ 마지막 작업한 예약 강조 (새로고침 후에도 유지)
                    setTimeout(() => {
                        const lastWorkingId = localStorage.getItem('lastWorkingReservation');
                        if (lastWorkingId) {
                            highlightSelectedReservation(lastWorkingId);
                            console.log('✅ 마지막 작업 예약 강조:', lastWorkingId);
                        }
                    }, 100);
                } else {
                    console.error('API 오류:', data.message);
                    showAlert('데이터를 불러오는데 실패했습니다: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('수배 목록 로드 실패:', error);
                showAlert('수배 목록을 불러오는데 실패했습니다.', 'danger');
            }
        }

        // 전역 예약 데이터 저장소
        window.reservationsData = window.reservationsData || {};

        // 수배관리 목록 렌더링 (카드 형태)
        function renderAssignments(assignments) {
            const assignmentsList = document.getElementById('assignmentsList');
            const loadingState = document.getElementById('loadingState');
            const emptyState = document.getElementById('emptyState');
            
            // 로딩 상태 숨기기
            loadingState.style.display = 'none';
            
            if (assignments.length === 0) {
                assignmentsList.style.display = 'none';
                emptyState.style.display = 'block';
                return;
            }
            
            emptyState.style.display = 'none';
            assignmentsList.style.display = 'block';

            console.log('🔄 렌더링 시작 - 총 예약 수:', assignments.length);
            
            const html = assignments.map(reservation => {
                // 전역 저장소에 예약 데이터 저장
                window.reservationsData[reservation.id] = reservation;
                
                const statusClass = getStatusClass(reservation.payment_status);
                const statusText = getReservationStatusText(reservation.payment_status);
                const bootstrapClass = getBootstrapStatusClass(reservation.payment_status);
                const amount = reservation.total_amount ? parseInt(reservation.total_amount).toLocaleString('ko-KR') + '원' : '-';
                const pax = `성인 ${reservation.people_adult || 0} 아동 ${reservation.people_child || 0} 유아 ${reservation.people_infant || 0}`;
                
                // 특수 상태 뱃지 추가
                const isInRevision = reservation.payment_status === 'in_revision';
                const isNewReservation = reservation.payment_status === 'pending';
                const isInProgress = reservation.payment_status === 'in_progress';
                
                // 상태별 뱃지 및 아이콘 마크
                let statusBadges = '';
                
                // 변경중
                if (isInRevision) {
                    statusBadges += '<span class="badge bg-warning text-dark ms-2" style="font-size: 0.75rem;"><i class="bi bi-exclamation-triangle-fill me-1"></i>변경중</span>';
                }
                
                // 신규
                if (isNewReservation) {
                    statusBadges += '<span class="badge bg-danger ms-2" style="font-size: 0.75rem;"><i class="bi bi-star-fill me-1"></i>신규</span>';
                }
                
                // 수배서 열람 상황 (수배 방식 구분)
                if (reservation.assignment_token) {
                    if (reservation.viewed_at) {
                        // ✅ 열람됨
                        statusBadges += '<span class="badge bg-success ms-2" style="font-size: 0.75rem;"><i class="bi bi-check-circle-fill me-1"></i>열람</span>';
                    } else if (reservation.sent_at) {
                        // 📧 이메일 전송 (미열람)
                        statusBadges += '<span class="badge bg-warning text-dark ms-2" style="font-size: 0.75rem;"><i class="bi bi-envelope me-1"></i>이메일전송</span>';
                    } else {
                        // 🔗 링크만 생성 (카톡 전달용, 미열람)
                        statusBadges += '<span class="badge bg-secondary ms-2" style="font-size: 0.75rem;"><i class="bi bi-link-45deg me-1"></i>링크생성</span>';
                    }
                }
                
                // 바우처 열람 상황
                if (reservation.voucher_token) {
                    if (reservation.voucher_viewed_at) {
                        statusBadges += '<span class="badge bg-success ms-2" style="font-size: 0.75rem;"><i class="bi bi-eye-fill me-1"></i>바우처열람</span>';
                    } else if (reservation.voucher_sent_at) {
                        statusBadges += '<span class="badge bg-secondary ms-2" style="font-size: 0.75rem;"><i class="bi bi-eye-slash me-1"></i>바우처미열람</span>';
                    }
                }
                
                // 이용일 완료 여부 확인
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const usageDate = reservation.usage_date ? new Date(reservation.usage_date) : null;
                const isUsageDatePassed = usageDate && usageDate < today;
                const passedClass = isUsageDatePassed ? 'bg-light-gray' : '';
                
                // 수정중 상태는 노란 테두리 + 연한 노랑 배경
                const revisionClass = isInRevision ? 'border-warning border-3' : (isNewReservation ? 'border-danger border-2' : '');
                const revisionBg = isInRevision ? 'style="background-color: #fffbf0;"' : '';
                
                // 예약일시
                const createdAt = reservation.created_at ? formatDate(reservation.created_at) : '-';
                
                // 텍스트 자르기 함수
                const truncate = (text, maxLength) => {
                    if (!text || text === '-') return text;
                    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
                };
                
                // 담당자 표시 (담당:000 형식)
                const managerDisplay = reservation.assigned_to ? `담당:${truncate(reservation.assigned_to, 3)}` : '담당:미지정';
                const customerDisplay = `고객:${truncate(reservation.korean_name || '-', 3)}`;
                
                return `
                    <article class="row-card table-like ${revisionClass} ${passedClass}" data-reservation-id="${reservation.id}" ${revisionBg}>
                        <div class="d-flex align-items-center mb-3">
                            <span class="badge bg-${getBootstrapStatusClass(reservation.payment_status)} status-badge" style="font-size: 0.85rem; padding: 6px 12px;">${statusText}</span>
                            ${statusBadges}
                            ${isUsageDatePassed && reservation.payment_status === 'confirmed' ? '<span class="badge bg-info ms-2" style="font-size: 0.8rem; padding: 5px 10px;">📋 정산대기</span>' : ''}
                        </div>
                        <div class="row-main" style="flex-direction: column; gap: 10px;">
                            <!-- 윗줄: 수배서번호 / 예약일(날짜) / 출발일(날짜) / 고객이름(담당자) -->
                            <div style="display: flex; gap: 20px; align-items: center;">
                                <div style="display: flex; align-items: center; gap: 6px;">
                                    <i class="bi bi-file-text" style="color: #6c757d;"></i>
                                    <span style="font-size: 0.95rem; color: #495057; font-weight: 500;">${reservation.reservation_number || '-'}</span>
                                </div>
                                <div style="display: flex; align-items: center; gap: 6px;">
                                    <i class="bi bi-calendar-check" style="color: #6c757d;"></i>
                                    <span style="font-size: 0.9rem; color: #6c757d;">${createdAt}</span>
                                </div>
                                <div style="display: flex; align-items: center; gap: 6px;">
                                    <i class="bi bi-calendar-event" style="color: #1a73e8;"></i>
                                    <span style="font-size: 0.95rem; color: #212529; font-weight: 600;">${formatDate(reservation.usage_date) || '-'}</span>
                                </div>
                                <div style="display: flex; align-items: center; gap: 6px; margin-left: auto;">
                                    <span style="font-size: 1rem; color: #212529; font-weight: 600;">${reservation.korean_name || '-'}</span>
                                    <span style="font-size: 0.85rem; color: #6c757d;">(${reservation.assigned_to || '미지정'})</span>
                                </div>
                            </div>
                            <!-- 아랫줄: 업체명 / 상품명(7자) / 수배업체명 -->
                            <div style="display: flex; gap: 16px; align-items: center; font-size: 0.9rem;">
                                <div style="color: #495057; font-weight: 500; min-width: 80px;">${truncate(reservation.platform_name || '-', 8)}</div>
                                <div style="color: #6c757d;">|</div>
                                <div style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap; color: #6c757d; max-width: 150px;" title="${reservation.product_name || '-'}">${truncate(reservation.product_name || '-', 7)}</div>
                                <div style="color: #6c757d;">|</div>
                                <div style="color: #6c757d;">${truncate(reservation.vendor_name || '미지정', 10)}</div>
                                <div style="margin-left: auto; color: #495057; font-weight: 500;">${pax}</div>
                            </div>
                        </div>
                        <div class="btn-group btn-group-sm ms-auto" role="group">
                            <button class="btn btn-outline-primary btn-sm" 
                                    onclick="openReservationEditModal(${reservation.id})" 
                                    data-reservation-id="${reservation.id}"
                                    title="예약변경">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                            <button class="btn btn-outline-secondary btn-sm" 
                                    onclick="openAssignmentManageModal(${reservation.id})" 
                                    data-reservation-id="${reservation.id}"
                                    title="수배서관리">
                                <i class="bi bi-file-text"></i>
                            </button>
                            <button class="btn btn-outline-success btn-sm" 
                                    onclick="openStatusManageModal(${reservation.id})" 
                                    data-reservation-id="${reservation.id}"
                                    title="상태관리">
                                <i class="bi bi-check-circle"></i>
                            </button>
                            <button class="btn btn-outline-info btn-sm" 
                                    onclick="openVoucherManageModal(${reservation.id})" 
                                    data-reservation-id="${reservation.id}"
                                    title="바우처관리">
                                <i class="bi bi-ticket-perforated"></i>
                            </button>
                            <button class="btn btn-outline-warning btn-sm" 
                                    onclick="openSettlementModal(${reservation.id})" 
                                    data-reservation-id="${reservation.id}"
                                    title="정산이관">
                                <i class="bi bi-calculator"></i>
                            </button>
                            <button class="btn btn-outline-dark btn-sm" 
                                    onclick="openHistoryModal(${reservation.id})" 
                                    data-reservation-id="${reservation.id}"
                                    title="업무히스토리">
                                <i class="bi bi-clock-history"></i>
                            </button>
                        </div>
                    </article>
                `;
            }).join('');
            
            console.log('✅ HTML 생성 완료 - 길이:', html.length);
            assignmentsList.innerHTML = html;
            console.log('✅ 렌더링 완료');
            
            // 풋터 상태 요약 업데이트
            updateFooterSummary(assignments);
        }
        
        // 풋터 상태 요약 업데이트
        function updateFooterSummary(assignments) {
            const statusCount = {
                in_revision: 0,
                pending: 0,
                in_progress: 0,
                confirmed: 0,
                voucher_sent: 0
            };
            
            assignments.forEach(r => {
                if (statusCount.hasOwnProperty(r.payment_status)) {
                    statusCount[r.payment_status]++;
                }
            });
            
            document.getElementById('totalCount').textContent = `총 ${assignments.length}개`;
            
            let summaryText = '';
            if (statusCount.in_revision > 0) summaryText += `변경 ${statusCount.in_revision} · `;
            summaryText += `신규 ${statusCount.pending} · 수배중 ${statusCount.in_progress} · 확정 ${statusCount.confirmed}`;
            if (statusCount.voucher_sent > 0) summaryText += ` · 바우처 ${statusCount.voucher_sent}`;
            
            document.getElementById('statusSummary').textContent = summaryText;
        }

        // 검색 함수
        function searchAssignments() {
            const company = document.getElementById('searchCompany').value;
            const product = document.getElementById('searchProduct').value;
            const customer = document.getElementById('searchCustomer').value;
            const status = document.getElementById('searchStatus').value;
            
            currentStatus = status;
            currentSearch = [company, product, customer].filter(s => s.trim()).join(' ');
            
            loadAssignments(1);
        }

        // 검색 초기화
        function clearSearch() {
            document.getElementById('searchCompany').value = '';
            document.getElementById('searchProduct').value = '';
            document.getElementById('searchCustomer').value = '';
            document.getElementById('searchDepartureDate').value = '';
            document.getElementById('searchStatus').value = '';
            document.getElementById('searchVendor').value = '';
            
            currentStatus = '';
            currentSearch = '';
            
            loadAssignments(1);
        }

        // 필터 토글 함수
        function toggleFilters() {
            const filterPanel = document.getElementById('filterPanel');
            if (filterPanel.style.display === 'none') {
                filterPanel.style.display = 'block';
            } else {
                filterPanel.style.display = 'none';
            }
        }

        // 새로운 디자인용 모달 이벤트 리스너 추가
        document.addEventListener('DOMContentLoaded', function() {
            // 모달 이벤트 리스너
            const manageModal = document.getElementById('manageModal');
            if (manageModal) {
                manageModal.addEventListener('show.bs.modal', function(e) {
                    const btn = e.relatedTarget;
                    const payload = btn?.getAttribute('data-resv');
                    if (!payload) return;
                    
                    try {
                        const r = JSON.parse(payload);
                        document.getElementById('m-status').textContent = r.status || '-';
                        document.getElementById('m-id').textContent = r.id || '-';
                        document.getElementById('m-vendor').textContent = r.vendor || '-';
                        document.getElementById('m-guest').textContent = r.guest || '-';
                        document.getElementById('m-product').textContent = r.product || '-';
                        document.getElementById('m-dates').textContent = (r.dep || '-') + ' / ' + (r.use || '-');
                        const paxText = `성인 ${r.pax?.adult ?? '-'}명, 아동 ${r.pax?.child ?? '-'}명`;
                        document.getElementById('m-pax').textContent = paxText;
                        document.getElementById('m-handler').textContent = r.handler || '-';
                        const amount = (typeof r.amount === 'number') ? r.amount.toLocaleString('ko-KR') + '원' : '-';
                        document.getElementById('m-amount').textContent = amount;
                        document.getElementById('m-brief').textContent = `${r.vendor ?? ''} / ${r.guest ?? ''} / ${r.product ?? ''}`.trim();

                        // 예약변경 탭 초기값
                        document.getElementById('f-guest').value = r.guest || '';
                        document.getElementById('f-adult').value = r.pax?.adult ?? 0;
                        document.getElementById('f-child').value = r.pax?.child ?? 0;
                        document.getElementById('f-dep').value = r.dep || '';
                        document.getElementById('f-product').value = r.product || '';
                        document.getElementById('f-handler').value = r.handler || '';

                        // 상태/컨펌 탭 초기값
                        const statusSelect = document.getElementById('f-status');
                        if (statusSelect) statusSelect.value = r.status || '수배중(현지수배)';
                        
                        const confirmInput = document.getElementById('f-confirm');
                        if (confirmInput) confirmInput.value = r.confirmNo || '';

                    } catch (err) {
                        console.warn('예약 데이터 파싱 오류', err);
                    }
                });
            }
        });

        // 예약 변경사항 저장
        function saveReservationChanges() {
            showAlert('예약 변경사항이 저장되었습니다.', 'success');
        }


        // 수배서 수정
        function editAssignment() {
            showAlert('수배서 수정 기능은 준비 중입니다.', 'info');
        }

        // 수배서 전송 (이메일 포함)
        async function sendAssignmentWithEmail() {
            const reservation = window.currentReservation;
            if (!reservation) {
                alert('예약 정보를 찾을 수 없습니다.');
                return;
            }
            
            console.log('📧 수배서 이메일 전송 시작');
            console.log('📋 예약 정보:', reservation);
            console.log('📧 vendor_email:', reservation.vendor_email);
            console.log('🏢 vendor_name:', reservation.vendor_name);
            console.log('🆔 vendor_id:', reservation.vendor_id);
            
            // 수배서 생성 여부 확인
            if (!reservation.assignment_token) {
                alert('수배서를 먼저 생성해주세요.');
                return;
            }
            
            // 수배업체 이메일 확인
            const vendorEmail = reservation.vendor_email || '';
            
            if (!vendorEmail || vendorEmail.trim() === '') {
                alert(`❌ 수배업체 이메일이 등록되어 있지 않습니다.\n\n수배업체: ${reservation.vendor_name || '미지정'}\n\n[설정 > 수배업체 관리]에서 이메일을 등록해주세요.`);
                return;
            }
            
            // 확인 메시지
            const confirmMessage = `수배업체 이메일로 수배서를 전송하시겠습니까?\n\n수신자: ${vendorEmail}\n업체명: ${reservation.vendor_name || '미지정'}\n\n• AI가 정중한 이메일 문구를 자동 생성합니다\n• 수배서 링크가 포함됩니다\n• 이메일 발송 후 전송 상태가 업데이트됩니다`;
            
            if (!confirm(confirmMessage)) {
                return;
            }
            
            try {
                const response = await fetch(`/api/assignments/${reservation.id}/send`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        sendEmail: true
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    if (result.emailSent) {
                        alert(`✅ 수배서가 이메일로 전송되었습니다!\n\n수신자: ${result.recipientEmail}\n\n수배업체가 이메일을 확인하면 열람 통계에서 확인할 수 있습니다.`);
                        // 목록 새로고침
                        loadAssignments(currentPage);
                        // 모달 정보 새로고침
                        if (window.currentReservationId) {
                            setTimeout(() => {
                                loadAssignmentDetails(window.currentReservationId);
                            }, 500);
                        }
                    } else {
                        alert(`⚠️ ${result.message}\n\n이메일이 발송되지 않았습니다. 수배업체 이메일을 확인해주세요.`);
                    }
                } else {
                    alert('수배서 전송 실패: ' + result.message);
                }
                
            } catch (error) {
                console.error('수배서 전송 오류:', error);
                alert('수배서 전송 중 오류가 발생했습니다: ' + error.message);
            }
        }

        // 수배서 다운로드
        function downloadAssignment() {
            showAlert('수배서 다운로드 기능은 준비 중입니다.', 'info');
        }

        // 수배서 아이콘 클래스 결정
        function getAssignmentIconClass(reservation) {
            // 수배서 상태에 따른 아이콘 색상
            if (reservation.assignment_status === 'confirmed' || reservation.confirmation_number) {
                return 'btn-primary'; // 파란색 - 확정 완료
            } else if (reservation.assignment_status === 'sent' || reservation.assignment_token) {
                return 'btn-warning'; // 노란색 - 전송 완료
            } else {
                return 'btn-outline-secondary'; // 투명 - 미생성/미전송
            }
        }

        // 수배서 툴팁 텍스트 결정
        function getAssignmentTooltip(reservation) {
            if (reservation.assignment_status === 'confirmed' || reservation.confirmation_number) {
                return '수배서 확정 완료 - 클릭하여 확정 정보 보기';
            } else if (reservation.assignment_status === 'sent' || reservation.assignment_token) {
                return '수배서 전송 완료 - 클릭하여 전송 로그 보기';
            } else {
                return '수배서 생성/전송 - 클릭하여 수배서 관리';
            }
        }

        // 수배서 보기 (모달)
        function viewAssignment(reservationId) {
            console.log('🔍 수배서 보기 요청:', reservationId);
            
            // 전역 reservations 배열에서 예약 정보 조회
            let reservation = null;
            if (window.reservations && Array.isArray(window.reservations)) {
                reservation = window.reservations.find(r => r.id === reservationId);
            }
            
            // 전역 배열에서 찾지 못했다면 현재 페이지의 데이터에서 찾기
            if (!reservation && typeof reservations !== 'undefined') {
                reservation = reservations.find(r => r.id === reservationId);
            }
            
            // 그래도 없으면 기본값 설정
            if (!reservation) {
                console.warn('예약 정보를 찾을 수 없어 기본값 사용:', reservationId);
                reservation = {
                    id: reservationId,
                    korean_name: '정보없음',
                    platform_name: '정보없음',
                    product_name: '정보없음',
                    package_type: '정보없음',
                    vendor_name: '미지정',
                    payment_status: 'pending',
                    confirmation_number: null,
                    assignment_status: null,
                    assignment_token: null
                };
            }
            
            // 상태별 모달 버튼 구성
            let modalButtons = '';
            if (reservation.assignment_status === 'confirmed' || reservation.confirmation_number) {
                // 파란색 - 확정 완료 상태
                modalButtons = `
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                    <button type="button" class="btn btn-primary" onclick="printAssignment()">
                        <i class="bi bi-printer me-1"></i>인쇄
                    </button>
                    <button type="button" class="btn btn-success" onclick="createVoucher(${reservationId})">
                        <i class="bi bi-ticket-perforated me-1"></i>바우처 생성
                    </button>
                `;
            } else if (reservation.assignment_status === 'sent' || reservation.assignment_token) {
                // 노란색 - 전송 완료 상태
                modalButtons = `
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                    <button type="button" class="btn btn-outline-primary" onclick="saveAssignmentFile(${reservationId})">
                        <i class="bi bi-download me-1"></i>파일저장
                    </button>
                    <button type="button" class="btn btn-primary" onclick="printAssignment()">
                        <i class="bi bi-printer me-1"></i>인쇄
                    </button>
                    <button type="button" class="btn btn-warning" onclick="resendAssignment(${reservationId})">
                        <i class="bi bi-send me-1"></i>재전송
                    </button>
                    <button type="button" class="btn btn-info" onclick="sendAssignmentLink(${reservationId})">
                        <i class="bi bi-link-45deg me-1"></i>링크전송
                    </button>
                `;
            } else {
                // 투명 - 미생성/미전송 상태
                modalButtons = `
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                    <button type="button" class="btn btn-success" onclick="saveAndSendAssignment(${reservationId})">
                        <i class="bi bi-save me-1"></i>저장하기
                    </button>
                    <button type="button" class="btn btn-primary" onclick="sendAssignmentNow(${reservationId})">
                        <i class="bi bi-send me-1"></i>전송하기
                    </button>
                `;
            }
            
            // 수배서 모달 HTML 생성
            const modalHtml = `
                <div class="modal fade" id="assignmentViewModal" tabindex="-1">
                    <div class="modal-dialog modal-xl">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title"><i class="bi bi-file-text me-2"></i>수배서 관리 - ${reservation.korean_name || reservation.platform_name}</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <div class="col-md-8">
                                        <!-- 수배서 내용 직접 표시 -->
                                        <div class="card">
                                            <div class="card-header bg-primary text-white">
                                                <h5 class="mb-0"><i class="bi bi-file-earmark-text me-2"></i>수배서</h5>
                                            </div>
                                            <div class="card-body">
                                                <div class="row mb-3">
                                                    <div class="col-md-6">
                                                        <h6 class="text-primary"><i class="bi bi-person me-1"></i>고객 정보</h6>
                                                        <table class="table table-sm table-borderless">
                                                            <tr><td class="fw-bold">성명:</td><td>${reservation.korean_name || reservation.platform_name || '-'}</td></tr>
                                                            <tr><td class="fw-bold">연락처:</td><td>${reservation.phone || '-'}</td></tr>
                                                            <tr><td class="fw-bold">이메일:</td><td>${reservation.email || '-'}</td></tr>
                                                            <tr><td class="fw-bold">인원:</td><td>${reservation.people_adult || 0}명 (성인) ${reservation.people_child ? `+ ${reservation.people_child}명 (아동)` : ''}</td></tr>
                                                        </table>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <h6 class="text-success"><i class="bi bi-calendar-event me-1"></i>예약 정보</h6>
                                                        <table class="table table-sm table-borderless">
                                                            <tr><td class="fw-bold">예약번호:</td><td class="text-primary">${reservation.id}</td></tr>
                                                            <tr><td class="fw-bold">이용일:</td><td>${reservation.usage_date ? new Date(reservation.usage_date).toLocaleDateString('ko-KR') : '-'}</td></tr>
                                                            <tr><td class="fw-bold">결제금액:</td><td class="text-danger fw-bold">${reservation.total_amount ? reservation.total_amount.toLocaleString() : '0'}원</td></tr>
                                                            <tr><td class="fw-bold">상태:</td><td><span class="badge bg-${getBootstrapStatusClass(reservation.payment_status)}">${getStatusText(reservation.payment_status)}</span></td></tr>
                                                        </table>
                                                    </div>
                                                </div>
                                                
                                                <div class="row mb-3">
                                                    <div class="col-12">
                                                        <h6 class="text-info"><i class="bi bi-box me-1"></i>상품 정보</h6>
                                                        <div class="alert alert-light">
                                                            <div class="row">
                                                                <div class="col-md-8">
                                                                    <h5 class="text-success mb-2">${reservation.product_name || '상품명 없음'}</h5>
                                                                    ${reservation.package_type ? `<p class="mb-1"><strong>패키지 타입:</strong> <span class="badge bg-info">${reservation.package_type}</span></p>` : ''}
                                                                    ${reservation.product_description ? `<p class="mb-0 text-muted">${reservation.product_description}</p>` : ''}
                                                                </div>
                                                                <div class="col-md-4 text-end">
                                                                    <p class="mb-1"><strong>수배업체:</strong></p>
                                                                    <span class="badge bg-warning text-dark">${reservation.vendor_name || '미지정'}</span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                ${reservation.confirmation_number ? `
                                                <div class="row mb-3">
                                                    <div class="col-12">
                                                        <div class="alert alert-success">
                                                            <h6><i class="bi bi-check-circle me-1"></i>확정 정보</h6>
                                                            <p class="mb-0"><strong>컨펌번호:</strong> <span class="fw-bold">${reservation.confirmation_number}</span></p>
                                                        </div>
                                                    </div>
                                                </div>
                                                ` : ''}

                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="card">
                                            <div class="card-header">
                                                <h6 class="mb-0"><i class="bi bi-info-circle me-1"></i>수배 정보</h6>
                                            </div>
                                            <div class="card-body">
                                                <div id="assignmentInfo">
                                                    <p><strong>상품명:</strong> ${reservation.product_name || '-'}</p>
                                                    <p><strong>패키지타입:</strong> <span class="text-primary">${reservation.package_type || '정보없음'}</span></p>
                                                    <p><strong>수배업체:</strong> ${reservation.vendor_name || '미지정'}</p>
                                                    <p><strong>상태:</strong> <span class="badge bg-${getBootstrapStatusClass(reservation.payment_status)}">${getStatusText(reservation.payment_status)}</span></p>
                                                    ${reservation.confirmation_number ? `<p><strong>컨펌번호:</strong> <span class="text-success">${reservation.confirmation_number}</span></p>` : ''}
                                                </div>
                                                <hr>
                                                <div id="assignmentLogs">
                                                    <h6><i class="bi bi-clock-history me-1"></i>처리 로그</h6>
                                                    <div id="logContainer" style="max-height: 200px; overflow-y: auto;">
                                                        <small class="text-muted">로그를 불러오는 중...</small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                ${modalButtons}
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // 기존 모달 제거
            const existingModal = document.getElementById('assignmentViewModal');
            if (existingModal) {
                existingModal.remove();
            }
            
            // 새 모달 추가
            document.body.insertAdjacentHTML('beforeend', modalHtml);
            
            // 모달 표시
            const modal = new bootstrap.Modal(document.getElementById('assignmentViewModal'));
            modal.show();
            
            // 로그만 로드 (수배서는 이미 표시됨)
            loadAssignmentLogs(reservationId);
        }

        // 수배 로그 로드
        async function loadAssignmentLogs(reservationId) {
            try {
                const response = await fetch(`/api/assignments/logs/${reservationId}`);
                const data = await response.json();
                
                const logContainer = document.getElementById('logContainer');
                if (data.success && data.logs.length > 0) {
                    logContainer.innerHTML = data.logs.map(log => `
                        <div class="mb-2 p-2 border-start border-3 border-${log.type === 'success' ? 'success' : log.type === 'error' ? 'danger' : 'info'}">
                            <small class="text-muted">${formatDateTime(log.created_at)}</small>
                            <div class="fw-bold">${log.action}</div>
                            ${log.details ? `<small class="text-muted">${log.details}</small>` : ''}
                        </div>
                    `).join('');
                } else {
                    logContainer.innerHTML = '<small class="text-muted">처리 로그가 없습니다.</small>';
                }
            } catch (error) {
                console.error('로그 로드 실패:', error);
                document.getElementById('logContainer').innerHTML = '<small class="text-danger">로그 로드 실패</small>';
            }
        }

        // 수배서 저장하기
        async function saveAndSendAssignment(reservationId) {
            try {
                const response = await fetch(`/api/assignments/${reservationId}/save`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await response.json();
                
                if (result.success) {
                    showAlert('수배서가 저장되었습니다.', 'success');
                    loadAssignments(); // 목록 새로고침
                    bootstrap.Modal.getInstance(document.getElementById('assignmentViewModal')).hide();
                } else {
                    showAlert(result.message || '수배서 저장에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('수배서 저장 실패:', error);
                showAlert('수배서 저장 중 오류가 발생했습니다.', 'error');
            }
        }

        // 수배서 전송하기
        async function sendAssignmentNow(reservationId) {
            try {
                const response = await fetch(`/api/assignments/${reservationId}/send`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await response.json();
                
                if (result.success) {
                    showAlert('✅ 수배서가 전송되었습니다!', 'success');
                    loadAssignments(); // 목록 새로고침
                    loadAssignmentLogs(reservationId); // 수배서 로그 새로고침
                } else {
                    showAlert(result.message || '수배서 전송에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('수배서 전송 실패:', error);
                showAlert('수배서 전송 중 오류가 발생했습니다.', 'error');
            }
        }

        // 수배서 재전송
        async function resendAssignment(reservationId) {
            if (!confirm('수배서를 재전송하시겠습니까?')) return;
            
            try {
                const response = await fetch(`/api/assignments/${reservationId}/resend`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await response.json();
                
                if (result.success) {
                    showAlert('수배서가 재전송되었습니다.', 'success');
                    loadAssignmentLogs(reservationId); // 로그 새로고침
                } else {
                    showAlert(result.message || '수배서 재전송에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('수배서 재전송 실패:', error);
                showAlert('수배서 재전송 중 오류가 발생했습니다.', 'error');
            }
        }

        // 수배서 링크 생성 및 표시
        async function sendAssignmentLink(reservationId) {
            try {
                // 토큰 생성 및 링크 생성
                const response = await fetch(`/api/assignments/${reservationId}/generate-link`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await response.json();
                
                if (result.success && result.link) {
                    // 링크를 모달에 표시
                    const linkSection = document.getElementById('assignmentLinkSection');
                    const linkInput = document.getElementById('assignmentLinkInput');
                    
                    if (linkSection && linkInput) {
                        linkInput.value = result.link;
                        linkSection.style.display = 'block';
                    }
                    
                    showAlert('수배서 링크가 생성되었습니다. 링크를 복사하여 전송하세요.', 'success');
                    loadAssignmentLogs(reservationId); // 로그 새로고침
                } else {
                    showAlert(result.message || '링크 생성에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('링크 생성 실패:', error);
                showAlert('링크 생성 중 오류가 발생했습니다.', 'error');
            }
        }

        // 수배서 파일 저장
        async function saveAssignmentFile(reservationId) {
            try {
                const response = await fetch(`/api/assignments/${reservationId}/download`);
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `수배서_${reservationId}.pdf`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                    showAlert('수배서 파일이 저장되었습니다.', 'success');
                } else {
                    showAlert('파일 저장에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('파일 저장 실패:', error);
                showAlert('파일 저장 중 오류가 발생했습니다.', 'error');
            }
        }

        // 바우처 생성
        async function createVoucher(reservationId) {
            try {
                const response = await fetch(`/api/reservations/${reservationId}/voucher`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await response.json();
                
                if (result.success) {
                    showAlert('바우처가 생성되었습니다.', 'success');
                    loadAssignments(); // 목록 새로고침
                } else {
                    showAlert(result.message || '바우처 생성에 실패했습니다.', 'error');
                }
            } catch (error) {
                console.error('바우처 생성 실패:', error);
                showAlert('바우처 생성 중 오류가 발생했습니다.', 'error');
            }
        }

        // 날짜시간 포맷팅
        function formatDateTime(dateString) {
            if (!dateString) return '-';
            const date = new Date(dateString);
            return date.toLocaleDateString('ko-KR') + ' ' + date.toLocaleTimeString('ko-KR');
        }

        // 상태 텍스트 변환
        function getStatusText(status) {
            const statusMap = {
                'pending': '대기중',
                'in_progress': '수배중', 
                'confirmed': '확정',
                'voucher_sent': '바우처전송완료',
                'cancelled': '취소',
                'refunded': '환불'
            };
            return statusMap[status] || status;
        }

        // Bootstrap 상태 클래스 변환
        function getBootstrapStatusClass(status) {
            const classMap = {
                'pending': 'warning',
                'in_progress': 'info',
                'confirmed': 'success', 
                'voucher_sent': 'primary',
                'cancelled': 'danger',
                'refunded': 'secondary'
            };
            return classMap[status] || 'secondary';
        }

        // 수배서 인쇄
        function printAssignment() {
            // 모달 내용을 인쇄
            const modalBody = document.querySelector('#assignmentViewModal .modal-body');
            if (modalBody) {
                const printWindow = window.open('', '_blank');
                printWindow.document.write(`
                    <html>
                        <head>
                            <title>수배서</title>
                            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
                            <style>
                                @media print {
                                    .no-print { display: none !important; }
                                    body { font-size: 12px; }
                                }
                            </style>
                        </head>
                        <body>
                            ${modalBody.innerHTML}
                        </body>
                    </html>
                `);
                printWindow.document.close();
                printWindow.print();
            } else {
                showAlert('수배서를 먼저 로드해주세요.', 'warning');
            }
        }

        // 수배서 링크 복사
        async function copyAssignmentLink() {
            try {
                // 먼저 수배서 토큰 가져오기
                if (!window.currentReservationId) {
                    showAlert('예약 정보가 선택되지 않았습니다.', 'warning');
                    return;
                }
                
                console.log('🔗 수배서 링크 복사 시작 - reservationId:', window.currentReservationId);
                
                const response = await fetch(`/api/assignments/by-reservation/${window.currentReservationId}`);
                const result = await response.json();
                
                console.log('📊 API 응답:', result);
                
                let linkUrl = '';
                let assignmentToken = '';
                
                // assignment 객체에서 토큰 가져오기
                if (result.success && result.assignment && result.assignment.assignment_token) {
                    assignmentToken = result.assignment.assignment_token;
                    linkUrl = `${window.location.origin}/assignment/${assignmentToken}`;
                    console.log('✅ 토큰 찾음:', assignmentToken);
                } else if (result.success && result.assignment && !result.assignment.assignment_token) {
                    // 토큰이 없으면 생성 API 호출
                    console.log('⚠️ 토큰 없음 - 생성 시도');
                    const generateResponse = await fetch(`/api/assignments/${window.currentReservationId}/generate-link`, {
                        method: 'POST'
                    });
                    const generateResult = await generateResponse.json();
                    
                    console.log('📊 토큰 생성 결과:', generateResult);
                    
                    if (generateResult.success && generateResult.assignment_token) {
                        assignmentToken = generateResult.assignment_token;
                        linkUrl = `${window.location.origin}/assignment/${assignmentToken}`;
                        console.log('✅ 새 토큰 생성:', assignmentToken);
                    } else {
                        showAlert('토큰 생성에 실패했습니다.', 'danger');
                        return;
                    }
                } else {
                    showAlert('수배서를 찾을 수 없습니다. 먼저 수배서를 생성해주세요.', 'warning');
                    console.error('❌ 수배서 없음:', result);
                    return;
                }
                
                // 클립보드에 복사
                if (navigator.clipboard) {
                    await navigator.clipboard.writeText(linkUrl);
                    showAlert('✅ 수배서 링크가 클립보드에 복사되었습니다!', 'success');
                    
                    // 링크를 input에도 표시
                    const linkInput = document.getElementById('assignmentLinkInput');
                    if (linkInput) {
                        linkInput.value = linkUrl;
                    }
                } else {
                    // fallback
                    const linkInput = document.getElementById('assignmentLinkInput');
                    if (linkInput) {
                        linkInput.value = linkUrl;
                        linkInput.select();
                        document.execCommand('copy');
                        showAlert('✅ 수배서 링크가 클립보드에 복사되었습니다!', 'success');
                    }
                }
            } catch (error) {
                console.error('링크 복사 실패:', error);
                showAlert('링크 복사 중 오류가 발생했습니다.', 'error');
            }
        }

        // 예약 ID로 수배서 토큰을 찾아서 로드
        async function loadAssignmentByReservationId(reservationId) {
            try {
                console.log('🔍 수배서 토큰 조회:', reservationId);
                
                // 수배서 토큰 조회
                const response = await fetch(`/api/assignments/by-reservation/${reservationId}`);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('✅ 수배서 토큰 조회 성공:', data);
                
                if (data.assignment_token) {
                    loadAssignmentFrame(data.assignment_token);
                } else {
                    throw new Error('수배서 토큰을 찾을 수 없습니다');
                }
                
            } catch (error) {
                console.error('❌ 수배서 토큰 조회 오류:', error);
                showAssignmentError(error.message);
            }
        }

        // 수배서 iframe 로드
        function loadAssignmentFrame(token) {
            const iframe = document.getElementById('assignmentFrame');
            const spinner = document.getElementById('loadingSpinner');
            const errorDiv = document.getElementById('errorMessage');
            
            console.log('🔍 수배서 iframe 로드:', token);
            
            iframe.src = `/assignment/${token}`;
            
            iframe.onload = () => {
                console.log('✅ 수배서 iframe 로드 완료');
                spinner.style.display = 'none';
                iframe.style.display = 'block';
                errorDiv.style.display = 'none';
            };
            
            iframe.onerror = () => {
                console.error('❌ 수배서 iframe 로드 실패');
                showAssignmentError('수배서 페이지를 불러올 수 없습니다');
            };
            
            // 5초 후에도 로드되지 않으면 오류 표시
            setTimeout(() => {
                if (iframe.style.display === 'none') {
                    console.error('❌ 수배서 로드 타임아웃');
                    showAssignmentError('수배서 로드 시간이 초과되었습니다');
                }
            }, 5000);
        }

        // 수배서 오류 표시
        function showAssignmentError(message) {
            const spinner = document.getElementById('loadingSpinner');
            const errorDiv = document.getElementById('errorMessage');
            const iframe = document.getElementById('assignmentFrame');
            
            spinner.style.display = 'none';
            iframe.style.display = 'none';
            errorDiv.style.display = 'block';
            errorDiv.querySelector('p').textContent = message;
        }

        // 수배서 재시도
        function retryLoadAssignment(reservationId) {
            const spinner = document.getElementById('loadingSpinner');
            const errorDiv = document.getElementById('errorMessage');
            
            spinner.style.display = 'block';
            errorDiv.style.display = 'none';
            
            loadAssignmentByReservationId(reservationId);
        }

        // 바우처 보기 (모달)
        function viewVoucher(reservationId) {
            // 바우처 모달 HTML 생성
            const modalHtml = `
                <div class="modal fade" id="voucherViewModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title"><i class="bi bi-ticket-perforated me-2"></i>바우처 보기</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="text-center">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">로딩 중...</span>
                                    </div>
                                    <p class="mt-2">바우처를 불러오는 중입니다...</p>
                                </div>
                                <iframe id="voucherFrame" style="width:100%; height:500px; border:none; display:none;"></iframe>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                                <button type="button" class="btn btn-primary" onclick="printVoucher()">
                                    <i class="bi bi-printer me-1"></i>인쇄
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // 기존 모달 제거
            const existingModal = document.getElementById('voucherViewModal');
            if (existingModal) {
                existingModal.remove();
            }
            
            // 새 모달 추가
            document.body.insertAdjacentHTML('beforeend', modalHtml);
            
            // 모달 표시
            const modal = new bootstrap.Modal(document.getElementById('voucherViewModal'));
            modal.show();
            
            // 바우처 로드
            setTimeout(() => {
                const iframe = document.getElementById('voucherFrame');
                const spinner = document.querySelector('#voucherViewModal .spinner-border').parentElement;
                
                // 먼저 바우처 토큰을 가져와야 함
                fetch(`/api/reservations/${reservationId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.reservation.voucher_token) {
                            iframe.src = `/voucher/${data.reservation.voucher_token}`;
                            iframe.onload = () => {
                                spinner.style.display = 'none';
                                iframe.style.display = 'block';
                            };
                        } else {
                            spinner.innerHTML = '<p class="text-muted">바우처가 아직 생성되지 않았습니다.</p>';
                        }
                    })
                    .catch(error => {
                        console.error('바우처 로드 오류:', error);
                        spinner.innerHTML = '<p class="text-danger">바우처를 불러오는데 실패했습니다.</p>';
                    });
            }, 500);
        }

        // 수배서 인쇄
        function printAssignment() {
            const iframe = document.getElementById('assignmentFrame');
            if (iframe && iframe.contentWindow) {
                iframe.contentWindow.print();
            }
        }

        // 바우처 인쇄
        function printVoucher() {
            const iframe = document.getElementById('voucherFrame');
            if (iframe && iframe.contentWindow) {
                iframe.contentWindow.print();
            }
        }

        // 유틸리티 함수들
        function getStatusClass(status) {
            const statusMap = {
                'pending': 'pending',
                'in_progress': 'in-progress', 
                'confirmed': 'confirmed',
                'voucher_sent': 'voucher-sent',
                'cancelled': 'cancelled',
                'refunded': 'refunded'
            };
            return statusMap[status] || 'pending';
        }

        function getBootstrapStatusClass(status) {
            const statusMap = {
                'in_revision': 'danger',          // 수정중 - 빨간색
                'pending': 'secondary',           // 대기중 - 회색
                'in_progress': 'warning',         // 수배중 - 노란색
                'confirmed': 'success',           // 확정 - 초록색
                'voucher_sent': 'primary',        // 바우처전송완료 - 파란색
                'cancelled': 'danger',            // 예약취소 - 빨간색
                'refunded': 'dark'                // 환불완료 - 검은색
            };
            return statusMap[status] || 'secondary';
        }

        function getReservationStatusText(status) {
            const statusMap = {
                'in_revision': '수정중 (예약변경)',
                'pending': '대기중 (신규예약)',
                'in_progress': '수배중 (현지수배)',
                'confirmed': '확정 (수배완료)',
                'voucher_sent': '바우처전송완료',
                'cancelled': '예약취소',
                'refunded': '환불완료'
            };
            return statusMap[status] || '대기중 (신규예약)';
        }

        function formatDate(dateString) {
            if (!dateString) return '-';
            const date = new Date(dateString);
            if (isNaN(date.getTime())) return '-';
            return date.toLocaleDateString('ko-KR');
        }

        function formatCurrency(amount) {
            if (!amount) return '-';
            return new Intl.NumberFormat('ko-KR', {
                style: 'currency',
                currency: 'USD'
            }).format(amount);
        }

        // 선택된 예약 강조 표시 함수
        function highlightSelectedReservation(reservationId) {
            // 모든 예약 카드의 선택 클래스 제거
            document.querySelectorAll('.row-card').forEach(card => {
                card.classList.remove('row-card-selected');
            });
            
            // 현재 선택된 예약 카드에 클래스 추가
            const selectedCard = document.querySelector(`.row-card[data-reservation-id="${reservationId}"]`);
            if (selectedCard) {
                selectedCard.classList.add('row-card-selected');
                console.log('✅ 예약 강조 표시:', reservationId);
                
                // ✅ localStorage에 저장 (새로고침 후에도 유지)
                localStorage.setItem('lastWorkingReservation', reservationId);
            }
        }
        
        // ✅ 모달 닫힘 시 자동 새로고침 설정
        function setupModalRefreshListeners() {
            const modalIds = [
                'assignmentManageModal',
                'statusManageModal', 
                'voucherManageModal',
                'settlementModal',
                'reservationEditModal',
                'historyModal',
                'assignmentViewModal',
                'voucherViewModal'
            ];
            
            modalIds.forEach(modalId => {
                const modalElement = document.getElementById(modalId);
                if (modalElement) {
                    modalElement.addEventListener('hidden.bs.modal', function() {
                        console.log('🔄 모달 닫힘 - 새로고침:', modalId);
                        loadAssignments(currentPage);
                    });
                }
            });
            
            console.log('✅ 모달 새로고침 리스너 설정 완료');
        }
        
        // 1. 예약변경 모달 열기
        function openReservationEditModal(reservationId) {
            highlightSelectedReservation(reservationId);
            
            const reservation = getReservationData(reservationId);
            if (!reservation) return;
            
            window.currentReservationId = reservationId;
            
            // 예약 정보
            document.getElementById('edit-reservation-number').value = reservation.reservation_number || '';
            document.getElementById('edit-platform-name').value = reservation.platform_name || '';
            document.getElementById('edit-payment-status').value = reservation.payment_status || 'pending';
            document.getElementById('edit-created-at').value = reservation.created_at ? new Date(reservation.created_at).toLocaleString('ko-KR') : '';
            
            // 상품 정보
            document.getElementById('edit-product-name').value = reservation.product_name || '';
            document.getElementById('edit-package-type').value = reservation.package_type || '';
            
            // 일정 정보
            document.getElementById('edit-usage-date').value = reservation.usage_date ? reservation.usage_date.split('T')[0] : '';
            document.getElementById('edit-usage-time').value = reservation.usage_time || '';
            
            // 예약자 정보
            document.getElementById('edit-korean-name').value = reservation.korean_name || '';
            
            // 영문명 분리 (english_name에서 성과 이름 분리)
            if (reservation.english_name) {
                const nameParts = reservation.english_name.split(' ');
                document.getElementById('edit-english-lastname').value = nameParts[0] || '';
                document.getElementById('edit-english-firstname').value = nameParts.slice(1).join(' ') || '';
            } else {
                document.getElementById('edit-english-lastname').value = '';
                document.getElementById('edit-english-firstname').value = '';
            }
            
            document.getElementById('edit-phone').value = reservation.phone || '';
            document.getElementById('edit-email').value = reservation.email || '';
            document.getElementById('edit-kakao-id').value = reservation.kakao_id || '';
            
            // 인원 및 금액 정보
            document.getElementById('edit-people-adult').value = reservation.people_adult || 0;
            document.getElementById('edit-people-child').value = reservation.people_child || 0;
            document.getElementById('edit-people-infant').value = reservation.people_infant || 0;
            document.getElementById('edit-adult-price').value = reservation.adult_price || '';
            document.getElementById('edit-child-price').value = reservation.child_price || '';
            document.getElementById('edit-infant-price').value = reservation.infant_price || '';
            
            // 특별 요청사항
            document.getElementById('edit-memo').value = reservation.memo || '';
            
            const modal = new bootstrap.Modal(document.getElementById('reservationEditModal'));
            modal.show();
        }

        // 2. 수배서관리 모달 열기
        function openAssignmentManageModal(reservationId) {
            const reservation = getReservationData(reservationId);
            if (!reservation) return;
            
            window.currentReservationId = reservationId;
            window.currentReservation = reservation;
            
            // 선택된 예약 강조 표시
            highlightSelectedReservation(reservationId);
            
            // 모달 표시
            const modal = new bootstrap.Modal(document.getElementById('assignmentManageModal'));
            modal.show();
            
            // 수배서 정보 로드
            loadAssignmentDetails(reservationId);
        }
        
        // 수배서 정보 새로고침 함수
        function refreshAssignmentInfo() {
            const reservationId = window.currentReservationId;
            if (!reservationId) {
                showAlert('예약 정보가 없습니다.', 'warning');
                return;
            }
            
            console.log('🔄 수배서 정보 새로고침:', reservationId);
            loadAssignmentDetails(reservationId);
            showAlert('정보가 새로고침되었습니다.', 'success');
        }

        // 열람 통계 로드 함수
        async function loadViewStats() {
            console.log('📊 열람 통계 로드 시작');
            console.log('  - window.currentReservation:', window.currentReservation);
            
            const reservation = window.currentReservation;
            if (!reservation) {
                console.error('❌ 예약 정보 없음');
                document.getElementById('view-stats-content').innerHTML = `
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i> 예약 정보가 없습니다.
                    </div>
                `;
                return;
            }
            
            if (!reservation.assignment_token) {
                console.error('❌ assignment_token 없음');
                document.getElementById('view-stats-content').innerHTML = `
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i> 수배서가 생성되지 않았습니다.
                    </div>
                `;
                return;
            }
            
            const token = reservation.assignment_token;
            console.log('✅ token:', token);
            
            try {
                document.getElementById('view-stats-content').innerHTML = `
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">로딩중...</span>
                        </div>
                    </div>
                `;
                
                const response = await fetch(`/api/assignment/${token}/views`);
                const data = await response.json();
                
                console.log('📊 API 응답:', data);
                
                if (!data.success) {
                    throw new Error(data.message);
                }
                
                const stats = data.stats;
                const details = data.details;
                const byCountry = data.by_country;
                
                let html = '';
                
                // 요약 통계
                html += `
                    <div class="row text-center mb-3">
                        <div class="col-3">
                            <div class="border rounded p-2">
                                <h3 class="mb-0 text-primary">${stats.total_views || 0}</h3>
                                <small class="text-muted">총 열람</small>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="border rounded p-2">
                                <h3 class="mb-0 text-success">${stats.unique_visitors || 0}</h3>
                                <small class="text-muted">순 방문자</small>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="border rounded p-2">
                                <h3 class="mb-0 text-info">${stats.countries_count || 0}</h3>
                                <small class="text-muted">국가수</small>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="border rounded p-2">
                                <h3 class="mb-0 text-warning">${stats.first_viewed ? '✓' : '-'}</h3>
                                <small class="text-muted">열람여부</small>
                            </div>
                        </div>
                    </div>
                `;
                
                // 첫 열람 및 최근 열람
                if (stats.first_viewed) {
                    html += `
                        <div class="row mb-3">
                            <div class="col-6">
                                <strong>첫 열람:</strong><br>
                                <small>${new Date(stats.first_viewed).toLocaleString('ko-KR')}</small>
                            </div>
                            <div class="col-6">
                                <strong>최근 열람:</strong><br>
                                <small>${new Date(stats.last_viewed).toLocaleString('ko-KR')}</small>
                            </div>
                        </div>
                    `;
                }
                
                // 국가별 열람
                if (byCountry && byCountry.length > 0) {
                    html += `
                        <div class="mb-3">
                            <strong>국가별 열람:</strong>
                            <ul class="list-group list-group-flush mt-2">
                    `;
                    byCountry.forEach(c => {
                        html += `
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                🌐 ${c.country || '알 수 없음'}
                                <span class="badge bg-primary rounded-pill">${c.view_count}</span>
                            </li>
                        `;
                    });
                    html += `
                            </ul>
                        </div>
                    `;
                }
                
                // 상세 이력
                if (details && details.length > 0) {
                    html += `
                        <div class="mb-3">
                            <strong>열람 이력 (최근 10개):</strong>
                            <div class="table-responsive mt-2" style="max-height: 300px; overflow-y: auto;">
                                <table class="table table-sm">
                                    <thead class="table-light">
                                        <tr>
                                            <th>시간</th>
                                            <th>위치</th>
                                            <th>기기</th>
                                            <th>브라우저</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                    `;
                    details.slice(0, 10).forEach(view => {
                        html += `
                            <tr>
                                <td><small>${new Date(view.viewed_at).toLocaleString('ko-KR', {month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit'})}</small></td>
                                <td><small>${view.city || '-'}, ${view.country || '-'}</small></td>
                                <td><small>${view.device_type || '-'}</small></td>
                                <td><small>${view.browser || '-'}</small></td>
                            </tr>
                        `;
                    });
                    html += `
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    `;
                }
                
                if (!stats.first_viewed) {
                    html = `
                        <div class="alert alert-info mb-0">
                            <h6 class="alert-heading"><i class="bi bi-info-circle"></i> 아직 열람되지 않았습니다</h6>
                            <hr>
                            <p class="mb-0"><small>
                                <strong>⚠️ 참고:</strong><br>
                                • 수배업체가 이메일/카톡 링크를 클릭하면 자동으로 기록됩니다.<br>
                                • <strong>"미리보기" 기능은 추적되지 않습니다.</strong><br>
                                • 실제 수배업체가 링크를 열람해야 통계가 기록됩니다.
                            </small></p>
                        </div>
                    `;
                }
                
                document.getElementById('view-stats-content').innerHTML = html;
                
            } catch (error) {
                console.error('❌ 열람 통계 로드 오류:', error);
                console.error('  - 오류 상세:', error.message);
                document.getElementById('view-stats-content').innerHTML = `
                    <div class="alert alert-danger mb-0">
                        <i class="bi bi-exclamation-triangle"></i> 통계 로드 실패: ${error.message}
                    </div>
                `;
            }
        }

        // 수배서 링크 복사 (카톡 전송용)
        async function copyAssignmentLink() {
            const reservation = window.currentReservation;
            if (!reservation || !reservation.assignment_token) {
                alert('수배서가 생성되지 않았습니다.');
                return;
            }
            
            const link = `${window.location.origin}/assignment/${reservation.assignment_token}`;
            
            try {
                await navigator.clipboard.writeText(link);
                alert('✅ 링크가 복사되었습니다!\n카카오톡으로 전송하세요:\n' + link);
            } catch (error) {
                // 복사 실패 시 수동 복사용 알림
                prompt('링크를 복사하세요:', link);
            }
        }

        // 3. 상태관리 모달 열기
        function openStatusManageModal(reservationId) {
            highlightSelectedReservation(reservationId);
            
            const reservation = getReservationData(reservationId);
            if (!reservation) return;
            
            window.currentReservationId = reservationId;
            
            // 현재 상태 표시
            const statusText = getReservationStatusText(reservation.payment_status);
            const statusClass = getBootstrapStatusClass(reservation.payment_status);
            document.getElementById('current-status-display').innerHTML = 
                `<span class="badge bg-${statusClass} fs-6">${statusText}</span>`;
            
            const modal = new bootstrap.Modal(document.getElementById('statusManageModal'));
            modal.show();
        }

        // 4. 바우처관리 모달 열기
        function openVoucherManageModal(reservationId) {
            highlightSelectedReservation(reservationId);
            
            const reservation = getReservationData(reservationId);
            if (!reservation) return;
            
            window.currentReservationId = reservationId;
            
            // 바우처 상태 확인 및 표시
            checkVoucherStatus(reservationId);
            
            const modal = new bootstrap.Modal(document.getElementById('voucherManageModal'));
            modal.show();
        }

        // 5. 정산이관 모달 열기
        function openSettlementModal(reservationId) {
            highlightSelectedReservation(reservationId);
            
            const reservation = getReservationData(reservationId);
            if (!reservation) return;
            
            window.currentReservationId = reservationId;
            
            // 체크박스 초기화
            const checkboxes = ['check-voucher-sent', 'check-service-completed', 'check-vendor-payment', 'check-customer-feedback', 'check-documents'];
            checkboxes.forEach(id => {
                const checkbox = document.getElementById(id);
                if (checkbox) checkbox.checked = false;
            });
            
            updateTransferButton();
            
            const modal = new bootstrap.Modal(document.getElementById('settlementModal'));
            modal.show();
        }
        
        // 6. 업무히스토리 모달 열기
        async function openHistoryModal(reservationId) {
            highlightSelectedReservation(reservationId);
            
            const reservation = getReservationData(reservationId);
            if (!reservation) return;
            
            window.currentReservationId = reservationId;
            
            const modal = new bootstrap.Modal(document.getElementById('historyModal'));
            modal.show();
            
            // 모든 히스토리 로드
            await loadAllHistory(reservationId);
        }
        
        // 모든 업무 히스토리 로드 (예약변경, 수배서, 상태변경, 바우처, 정산 등 모든 액션)
        async function loadAllHistory(reservationId) {
            const historyList = document.getElementById('historyList');
            historyList.innerHTML = '<p class="text-center text-muted">히스토리를 불러오는 중...</p>';
            
            try {
                console.log('🔍 히스토리 로드 시작:', reservationId);
                const response = await fetch(`/api/reservations/${reservationId}/history`);
                console.log('📡 응답 상태:', response.status);
                const result = await response.json();
                console.log('📦 응답 데이터:', result);
                
                if (result.success && result.history) {
                    const history = result.history;
                    
                    if (history.length === 0) {
                        historyList.innerHTML = '<p class="text-center text-muted">아직 히스토리가 없습니다.</p>';
                        return;
                    }
                    
                    // 히스토리를 최신순으로 정렬
                    history.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
                    
                    const historyHTML = history.map(item => {
                        const date = new Date(item.created_at);
                        const dateStr = date.toLocaleString('ko-KR', {
                            year: 'numeric',
                            month: '2-digit',
                            day: '2-digit',
                            hour: '2-digit',
                            minute: '2-digit'
                        });
                        
                        // 카테고리별 아이콘 및 색상 (새로운 스키마)
                        const categoryConfig = {
                            '예약': { icon: 'bi-calendar-check', color: '#6366f1', bgColor: '#eef2ff', borderColor: '#c7d2fe' },
                            '수배': { icon: 'bi-truck', color: '#0891b2', bgColor: '#cffafe', borderColor: '#67e8f9' },
                            '바우처': { icon: 'bi-ticket-perforated', color: '#059669', bgColor: '#d1fae5', borderColor: '#6ee7b7' },
                            '정산': { icon: 'bi-cash-coin', color: '#dc2626', bgColor: '#fee2e2', borderColor: '#fca5a5' },
                            '시스템': { icon: 'bi-gear', color: '#64748b', bgColor: '#f1f5f9', borderColor: '#cbd5e1' }
                        };
                        
                        const category = item.category || '시스템';
                        const config = categoryConfig[category] || categoryConfig['시스템'];
                        
                        // 액션별 텍스트
                        const actionText = item.action || '-';
                        
                        // changes 안전하게 파싱
                        let changesHTML = '';
                        if (item.changes) {
                            try {
                                const changesObj = typeof item.changes === 'string' ? JSON.parse(item.changes) : item.changes;
                                const entries = Object.entries(changesObj).map(([key, value]) => {
                                    if (value && value.from !== undefined && value.to !== undefined) {
                                        return `
                                            <div class="d-flex align-items-center gap-2 small mb-1">
                                                <span class="badge bg-light text-dark">${value.from}</span>
                                                <i class="bi bi-arrow-right" style="color: ${config.color}"></i>
                                                <span class="badge" style="background-color: ${config.color}">${value.to}</span>
                                            </div>
                                        `;
                                    }
                                    return '';
                                }).filter(html => html !== '').join('');
                                
                                if (entries) {
                                    changesHTML = `
                                        <div class="mt-2 p-2 rounded" style="background-color: ${config.bgColor}">
                                            <div class="small fw-bold mb-2" style="color: ${config.color}">📋 변경 내역</div>
                                            ${entries}
                                        </div>
                                    `;
                                }
                            } catch (e) {
                                console.error('변경사항 파싱 오류:', e, item.changes);
                            }
                        }
                        
                        // 메타데이터 표시
                        let metadataHTML = '';
                        if (item.metadata) {
                            try {
                                const metadata = typeof item.metadata === 'string' ? JSON.parse(item.metadata) : item.metadata;
                                const metaEntries = Object.entries(metadata)
                                    .filter(([key, value]) => value && key !== 'reservation_number')
                                    .map(([key, value]) => `<span class="badge bg-light text-dark me-1">${key}: ${value}</span>`)
                                    .join('');
                                
                                if (metaEntries) {
                                    metadataHTML = `<div class="mt-2">${metaEntries}</div>`;
                                }
                            } catch (e) {
                                console.error('메타데이터 파싱 오류:', e);
                            }
                        }
                        
                        return `
                            <div class="mb-3 p-3 rounded" style="background-color: ${config.bgColor}; border-left: 4px solid ${config.color}">
                                <div class="d-flex align-items-start justify-content-between mb-2">
                                    <div class="d-flex align-items-center gap-2">
                                        <div class="d-flex align-items-center justify-content-center" 
                                             style="width: 32px; height: 32px; background-color: white; border-radius: 50%; border: 2px solid ${config.borderColor}">
                                            <i class="bi ${config.icon}" style="color: ${config.color}; font-size: 14px;"></i>
                                        </div>
                                        <div>
                                            <div class="fw-bold" style="color: ${config.color}">${category} · ${actionText}</div>
                                            <div class="small text-muted">
                                                <i class="bi bi-person-circle me-1"></i>${item.changed_by || '시스템'}
                                                <i class="bi bi-clock ms-2 me-1"></i>${dateStr}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="ms-5">
                                    <div class="mb-1" style="line-height: 1.6;">${item.description || '상세 정보 없음'}</div>
                                    ${changesHTML}
                                    ${metadataHTML}
                                </div>
                            </div>
                        `;
                    }).join('');
                    
                    historyList.innerHTML = historyHTML;
                } else {
                    console.error('히스토리 데이터 없음:', result);
                    historyList.innerHTML = '<p class="text-center text-danger">히스토리를 불러오는데 실패했습니다.</p>';
                }
            } catch (error) {
                console.error('❌ 히스토리 로드 오류:', error);
                historyList.innerHTML = '<p class="text-center text-danger">히스토리를 불러오는 중 오류가 발생했습니다.</p>';
            }
        }

        // 예약 데이터 가져오기 헬퍼 함수
        function getReservationData(reservationId) {
            // 전역 저장소에서 데이터 가져오기
            const reservation = window.reservationsData?.[reservationId];
            
            if (!reservation) {
                console.error('예약 정보를 찾을 수 없습니다. reservationId:', reservationId);
                console.log('사용 가능한 예약 IDs:', Object.keys(window.reservationsData || {}));
                showAlert('예약 정보를 찾을 수 없습니다.', 'danger');
                return null;
            }
            
            return reservation;
        }

        // 바우처 상태 확인
        async function checkVoucherStatus(reservationId) {
            try {
                const response = await fetch(`/api/reservations/${reservationId}`);
                const result = await response.json();
                
                if (result.success && result.reservation.voucher_token) {
                    // 바우처가 이미 생성된 경우
                    const voucherUrl = `${window.location.origin}/voucher/${result.reservation.voucher_token}`;
                    document.getElementById('voucherLinkUrl').value = voucherUrl;
                    document.getElementById('voucherLinkGroup').style.display = 'flex';
                    document.getElementById('voucherLinkPlaceholder').style.display = 'none';
                    
                    // 세이브카드 코드 표시
                    if (result.reservation.savecard_code) {
                        document.getElementById('savecard-code').value = result.reservation.savecard_code;
                    }
                    
                    // 바우처 상태 업데이트
                    updateVoucherStatus(result.voucher);
                } else {
                    // 바우처가 생성되지 않은 경우
                    document.getElementById('voucherLinkGroup').style.display = 'none';
                    document.getElementById('voucherLinkPlaceholder').style.display = 'block';
                }
            } catch (error) {
                console.error('바우처 상태 확인 오류:', error);
            }
        }
        
        // 수배서 모달 정보 채우기
        async function populateAssignmentModalDetails(reservation) {
            if (!reservation) {
                console.error('❌ 예약 데이터가 없습니다');
                return;
            }
            
            // 안전한 값 추출 함수
            const safeGet = (obj, key, defaultValue = '-') => {
                return obj && obj[key] !== undefined && obj[key] !== null ? obj[key] : defaultValue;
            };
            
            // 헤더 정보 (간단한 요약)
            const briefElement = document.getElementById('m-brief');
            if (briefElement) {
                briefElement.textContent = `${safeGet(reservation, 'korean_name')} | ${safeGet(reservation, 'product_name')} | ${formatDate(reservation.usage_date) || '-'}`;
            }
            
            // 예약 정보 (접을 수 있는 섹션) - 안전하게 DOM 요소 확인 후 설정
            const elements = {
                'detail-reservation-number': safeGet(reservation, 'reservation_number'),
                'detail-customer-name': safeGet(reservation, 'korean_name'),
                'detail-phone': safeGet(reservation, 'phone'),
                'detail-platform': safeGet(reservation, 'platform_name'),
                'detail-product-name': safeGet(reservation, 'product_name'),
                'detail-package-type': safeGet(reservation, 'package_type'),
                'detail-usage-date': formatDate(reservation.usage_date) || '-',
                'detail-memo': safeGet(reservation, 'memo')
            };
            
            // DOM 요소에 값 설정
            Object.entries(elements).forEach(([id, value]) => {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = value;
                } else {
                    console.warn(`DOM 요소를 찾을 수 없습니다: ${id}`);
                }
            });
            
            // 인원 정보
            const peopleElement = document.getElementById('detail-people');
            if (peopleElement) {
                const people = `성인 ${safeGet(reservation, 'people_adult', 0)}명, 아동 ${safeGet(reservation, 'people_child', 0)}명`;
                peopleElement.textContent = people;
            }
            
            // 현재 예약 ID와 정보 저장
            window.currentReservationId = reservation.id;
            window.currentReservation = reservation; // 전체 예약 정보 저장
            console.log('현재 예약 ID 저장:', window.currentReservationId);
            console.log('현재 예약 정보 저장:', reservation);
            
            // 수배서 정보 로드
            if (reservation.id) {
                await loadAssignmentDetails(reservation.id);
            } else {
                console.error('예약 ID가 없습니다:', reservation);
            }
        }
        
        // 수배서 상세 정보 로드
        async function loadAssignmentDetails(reservationId) {
            try {
                const response = await fetch(`/api/assignments/by-reservation/${reservationId}`);
                
                if (!response.ok) {
                    console.error('❌ API 응답 오류:', response.status);
                    return;
                }
                
                const result = await response.json();
                
                console.log('🔍 API 응답 데이터:', result);
                
                if (result.success && result.assignment) {
                    const assignment = result.assignment;
                    
                    console.log('📊 수배서 데이터:', {
                        id: assignment.id,
                        sent_at: assignment.sent_at,
                        viewed_at: assignment.viewed_at,
                        vendor_name: assignment.vendor_name,
                        assignment_token: assignment.assignment_token
                    });
                    
                    // 수배서 상태 정보
                    document.getElementById('assignment-number').textContent = assignment.id || '-';
                    document.getElementById('assignment-vendor').textContent = assignment.vendor_name || '미지정';
                    document.getElementById('assignment-created').textContent = formatDateTime(assignment.assigned_at) || '-';
                    
                    // 플랫폼명 표시 (예약업체)
                    const platformElement = document.getElementById('assignment-platform');
                    if (platformElement) {
                        // 현재 예약 정보에서 플랫폼명 가져오기
                        console.log('🔍 플랫폼명 조회 시작');
                        console.log('  - reservationId:', reservationId);
                        console.log('  - window.currentReservation:', window.currentReservation);
                        console.log('  - window.reservationsData[reservationId]:', window.reservationsData?.[reservationId]);
                        
                        const platformName = window.currentReservation?.platform_name || 
                                           window.reservationsData?.[reservationId]?.platform_name || '-';
                        platformElement.textContent = platformName;
                        console.log('✅ 플랫폼명 표시:', platformName);
                    } else {
                        console.error('❌ assignment-platform 요소를 찾을 수 없습니다');
                    }
                    
                    // 이메일 전송 상태 표시
                    const emailStatusElement = document.getElementById('assignment-email-status');
                    if (emailStatusElement) {
                        if (assignment.sent_at) {
                            const sentTime = formatDateTime(assignment.sent_at);
                            emailStatusElement.innerHTML = `<span class="badge bg-success"><i class="bi bi-envelope-check me-1"></i>전송됨</span> <small class="text-muted">${sentTime}</small>`;
                            console.log('✅ 이메일 전송됨:', sentTime);
                        } else {
                            emailStatusElement.innerHTML = '<span class="badge bg-secondary"><i class="bi bi-envelope-x me-1"></i>미전송</span>';
                            console.log('❌ 이메일 미전송');
                        }
                    }
                    
                    // 열람 현황 표시 (이메일/카톡 링크 열람 여부)
                    const viewsElement = document.getElementById('assignment-views');
                    if (viewsElement) {
                        if (assignment.viewed_at) {
                            const viewedTime = formatDateTime(assignment.viewed_at);
                            viewsElement.innerHTML = `<span class="badge bg-primary"><i class="bi bi-eye-fill me-1"></i>열람</span> <small class="text-muted">${viewedTime}</small>`;
                            console.log('✅ 열람됨:', viewedTime);
                        } else {
                            viewsElement.innerHTML = '<span class="badge bg-secondary"><i class="bi bi-eye-slash me-1"></i>미열람</span>';
                            console.log('❌ 미열람');
                        }
                    }
                    
                    // assignment_token 저장 (다른 함수에서 사용)
                    if (window.currentReservation) {
                        window.currentReservation.assignment_token = assignment.assignment_token;
                        console.log('✅ assignment_token 저장됨:', assignment.assignment_token);
                    } else {
                        console.error('❌ window.currentReservation이 없음');
                    }
                    
                    console.log('✅ 수배서 정보 로드 완료');
                    
                } else {
                    console.log('⚠️ 수배서 없음');
                    // 수배서가 없는 경우
                    document.getElementById('assignment-number').textContent = '미생성';
                    document.getElementById('assignment-vendor').textContent = '미지정';
                    document.getElementById('assignment-created').textContent = '-';
                    
                    // 이메일 전송 상태
                    const emailStatusElement = document.getElementById('assignment-email-status');
                    if (emailStatusElement) {
                        emailStatusElement.innerHTML = '<span class="badge bg-secondary"><i class="bi bi-envelope-x me-1"></i>미전송</span>';
                    }
                    
                    // 열람 현황
                    const viewsElement = document.getElementById('assignment-views');
                    if (viewsElement) {
                        viewsElement.innerHTML = '<span class="badge bg-secondary"><i class="bi bi-eye-slash me-1"></i>미열람</span>';
                    }
                }
                
            } catch (error) {
                console.error('❌ 수배서 정보 로드 오류:', error);
                console.error('  - 오류 상세:', error.message);
                console.error('  - 오류 스택:', error.stack);
                showAlert('수배서 정보를 불러오는데 실패했습니다: ' + error.message, 'danger');
            }
        }
        
        // 수배 상태 배지 생성
        function getAssignmentStatusBadge(status) {
            const statusMap = {
                'pending': '<span class="badge bg-warning">대기중</span>',
                'sent': '<span class="badge bg-info">전송됨</span>',
                'viewed': '<span class="badge bg-primary">확인됨</span>',
                'confirmed': '<span class="badge bg-success">확정됨</span>',
                'rejected': '<span class="badge bg-danger">거절됨</span>',
                'cancelled': '<span class="badge bg-secondary">취소됨</span>'
            };
            
            return statusMap[status] || '<span class="badge bg-secondary">알 수 없음</span>';
        }
        
        // 수배서 미리보기
        async function previewAssignment() {
            console.log('🔍 수배서 미리보기 시작, currentReservationId:', window.currentReservationId);
            
            if (!window.currentReservationId) {
                console.error('❌ 예약 정보가 선택되지 않았습니다');
                showAlert('예약 정보가 선택되지 않았습니다. 수배서 모달을 먼저 열어주세요.', 'warning');
                return;
            }
            
            try {
                console.log('🔍 수배서 토큰 조회 시작:', window.currentReservationId);
                
                // 먼저 수배서 토큰을 가져오거나 생성
                let assignmentToken = null;
                
                // 기존 수배서 토큰 확인
                const tokenResponse = await fetch(`/api/assignments/by-reservation/${window.currentReservationId}`);
                
                console.log('📡 API 응답 상태:', tokenResponse.status);
                
                if (!tokenResponse.ok) {
                    const errorText = await tokenResponse.text();
                    console.error('❌ API 호출 실패:', errorText);
                    throw new Error(`HTTP error! status: ${tokenResponse.status}, message: ${errorText}`);
                }
                
                const tokenResult = await tokenResponse.json();
                console.log('✅ 토큰 조회 결과:', tokenResult);
                
                if (tokenResult.success && tokenResult.assignment_token) {
                    assignmentToken = tokenResult.assignment_token;
                    console.log('기존 토큰 사용:', assignmentToken);
                } else {
                    console.log('새 수배서 생성 시작');
                    // 수배서가 없으면 생성
                    const createResponse = await fetch(`/api/assignments`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            reservation_id: window.currentReservationId,
                            vendor_id: null,
                            notes: '수배서 미리보기용 생성'
                        })
                    });
                    
                    if (!createResponse.ok) {
                        throw new Error(`HTTP error! status: ${createResponse.status}`);
                    }
                    
                    const createResult = await createResponse.json();
                    console.log('수배서 생성 결과:', createResult);
                    
                    if (createResult.success) {
                        assignmentToken = createResult.assignment_token;
                        console.log('새 토큰 생성:', assignmentToken);
                    } else {
                        showAlert('수배서 생성에 실패했습니다: ' + (createResult.message || '알 수 없는 오류'), 'danger');
                        return;
                    }
                }
                
                if (!assignmentToken) {
                    throw new Error('수배서 토큰을 얻을 수 없습니다');
                }
                
                // 새 창에서 수배서 열기 (미리보기 모드)
                const assignmentUrl = `/assignment/${assignmentToken}?preview=true`;
                console.log('수배서 URL (미리보기):', assignmentUrl);
                window.open(assignmentUrl, '_blank', 'width=800,height=600');
                
                // 히스토리에 추가 (함수가 존재하는 경우에만)
                if (typeof addToHistory === 'function') {
                    addToHistory('수배서 미리보기', 'info');
                }
                
                showAlert('수배서 미리보기를 새 창에서 열었습니다.', 'success');
                
            } catch (error) {
                console.error('수배서 미리보기 오류:', error);
                showAlert('수배서 미리보기 중 오류가 발생했습니다: ' + error.message, 'danger');
            }
        }

        // 수배서 링크 생성
        async function generateAssignmentLink() {
            if (!window.currentReservationId) {
                showAlert('예약 정보가 선택되지 않았습니다.', 'warning');
                return;
            }
            
            try {
                // 기존 수배서 토큰 확인
                const tokenResponse = await fetch(`/api/assignments/by-reservation/${window.currentReservationId}`);
                const tokenResult = await tokenResponse.json();
                
                let assignmentToken = null;
                
                if (tokenResult.success && tokenResult.assignment_token) {
                    assignmentToken = tokenResult.assignment_token;
                } else {
                    // 수배서가 없으면 생성
                    const response = await fetch(`/api/assignments`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            reservation_id: window.currentReservationId,
                            vendor_id: null,
                            notes: '수배서 링크 생성'
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        assignmentToken = result.assignment_token;
                    } else {
                        showAlert('수배서 링크 생성에 실패했습니다: ' + result.message, 'danger');
                        return;
                    }
                }
                
                const assignmentUrl = `${window.location.origin}/assignment/${assignmentToken}`;
                document.getElementById('assignmentLinkUrl').value = assignmentUrl;
                document.getElementById('assignmentLinkGroup').style.display = 'flex';
                
                showAlert('수배서 링크가 생성되었습니다!', 'success');
                
                // 히스토리에 추가
                addToHistory('수배서 링크 생성', 'success');
                
            } catch (error) {
                console.error('수배서 링크 생성 오류:', error);
                showAlert('수배서 링크 생성 중 오류가 발생했습니다.', 'danger');
            }
        }
        
        // 수배서 링크 복사
        // copyAssignmentLink 함수는 1826줄에 정의되어 있음 (중복 제거)
        
        
        
        
        // 수배 히스토리 로드
        async function loadAssignmentHistory(reservationId) {
            try {
                const response = await fetch(`/api/assignments/logs/${reservationId}`);
                const result = await response.json();
                
                if (result.success) {
                    renderAssignmentHistory(result.logs);
                } else {
                    document.getElementById('assignmentHistory').innerHTML = '<p class="text-muted">히스토리를 불러올 수 없습니다.</p>';
                }
            } catch (error) {
                console.error('히스토리 로드 오류:', error);
                document.getElementById('assignmentHistory').innerHTML = '<p class="text-danger">히스토리 로드 중 오류가 발생했습니다.</p>';
            }
        }
        
        // 히스토리 렌더링
        function renderAssignmentHistory(logs) {
            const historyDiv = document.getElementById('assignmentHistory');
            
            if (!logs || logs.length === 0) {
                historyDiv.innerHTML = '<p class="text-muted">아직 수배 히스토리가 없습니다.</p>';
                return;
            }
            
            const html = logs.map(log => {
                const typeClass = log.type === 'success' ? 'text-success' : log.type === 'danger' ? 'text-danger' : 'text-info';
                const icon = log.type === 'success' ? 'bi-check-circle' : log.type === 'danger' ? 'bi-x-circle' : 'bi-info-circle';
                
                return `
                    <div class="d-flex align-items-center mb-2">
                        <i class="bi ${icon} ${typeClass} me-2"></i>
                        <div class="flex-grow-1">
                            <div class="fw-medium">${log.details}</div>
                            <small class="text-muted">${formatDateTime(log.created_at)}</small>
                        </div>
                    </div>
                `;
            }).join('');
            
            historyDiv.innerHTML = html;
        }
        
        // 히스토리에 항목 추가 (변경 내역 추적 기능 포함)
        function addToHistory(action, type = 'info', changes = null, details = null) {
            console.log(`📝 히스토리: ${action} (${type})`, changes);
            
            const typeClass = type === 'success' ? 'text-success' : type === 'danger' ? 'text-danger' : 'text-info';
            const icon = type === 'success' ? 'bi-check-circle' : type === 'danger' ? 'bi-x-circle' : 'bi-info-circle';
            
            // 변경 내역 HTML 생성
            let changesHtml = '';
            if (changes && Object.keys(changes).length > 0) {
                changesHtml = '<div class="mt-1">';
                Object.entries(changes).forEach(([field, change]) => {
                    const fieldName = getFieldDisplayName(field);
                    changesHtml += `
                        <div class="change-item">
                            <small class="text-muted">
                                <strong>${fieldName}:</strong> 
                                <span class="text-decoration-line-through text-danger">${change.from || '(없음)'}</span> 
                                → 
                                <span class="text-success">${change.to || '(없음)'}</span>
                            </small>
                        </div>
                    `;
                });
                changesHtml += '</div>';
            }
            
            // 추가 세부사항 HTML
            let detailsHtml = '';
            if (details) {
                detailsHtml = `<div class="mt-1"><small class="text-muted">${details}</small></div>`;
            }
            
            const newItem = `
                <div class="d-flex align-items-start mb-2 p-2 border-start border-3 border-${type === 'success' ? 'success' : type === 'danger' ? 'danger' : 'info'} bg-light">
                    <i class="bi ${icon} ${typeClass} me-2 mt-1"></i>
                    <div class="flex-grow-1">
                        <div class="fw-medium">${action}</div>
                        <small class="text-muted">${new Date().toLocaleString('ko-KR')}</small>
                        ${changesHtml}
                        ${detailsHtml}
                    </div>
                </div>
            `;
            
            // 모든 히스토리 컨테이너에 추가
            const historyContainers = [
                'assignmentHistory',
                'statusHistory', 
                'voucherHistory',
                'settlementHistory',
                'reservationHistory'
            ];
            
            historyContainers.forEach(containerId => {
                const container = document.getElementById(containerId);
                if (container) {
                    // 로딩 메시지 제거
                    if (container.innerHTML.includes('히스토리를 불러오는 중')) {
                        container.innerHTML = '';
                    }
                    container.insertAdjacentHTML('afterbegin', newItem);
                }
            });
        }
        
        // 필드명을 한국어로 변환하는 함수
        function getFieldDisplayName(fieldName) {
            const fieldNames = {
                // 예약 정보
                'reservation_number': '예약번호',
                'platform_name': '업체명',
                'payment_status': '예약상태',
                'created_at': '예약일시',
                
                // 상품 정보
                'product_name': '상품명',
                'package_type': '패키지 타입',
                
                // 일정 정보
                'usage_date': '이용일',
                'usage_time': '이용시간',
                
                // 예약자 정보
                'korean_name': '한글명',
                'english_name': '영문명',
                'phone': '전화번호',
                'email': '이메일',
                'kakao_id': '카카오ID',
                
                // 인원 및 금액 정보
                'people_adult': '성인수',
                'people_child': '아동수',
                'people_infant': '유아수',
                'adult_price': '성인 단가($)',
                'child_price': '아동 단가($)',
                'infant_price': '유아 단가($)',
                
                // 기타
                'memo': '특별 요청사항',
                'vendor_name': '수배업체',
                'confirmation_number': '컨펌번호',
                'voucher_token': '바우처',
                'savecard_code': '세이브카드 코드',
                'total_price': '총 금액',
                'cost_price': '원가'
            };
            return fieldNames[fieldName] || fieldName;
        }
        
        // 모달별 히스토리 로드
        async function loadModalHistory(reservationId) {
            try {
                // 실제 히스토리 데이터를 로드하는 API 호출
                const response = await fetch(`/api/reservations/${reservationId}/history`);
                const result = await response.json();
                
                let historyData = [];
                if (result.success && result.data) {
                    historyData = result.data;
                } else {
                    // API 실패 시 샘플 히스토리 표시
                    historyData = [
                    { 
                        action: '예약 생성', 
                        type: 'info', 
                        time: new Date(Date.now() - 86400000),
                        details: '새로운 예약이 등록되었습니다.'
                    },
                    { 
                        action: '예약 정보 수정', 
                        type: 'success', 
                        time: new Date(Date.now() - 43200000),
                        changes: {
                            korean_name: { from: '김종성', to: '이종성' },
                            phone: { from: '010-1234-5678', to: '010-9876-5432' }
                        },
                        details: '2개 항목이 변경되었습니다.'
                    },
                    { 
                        action: '컨펌번호 저장', 
                        type: 'success', 
                        time: new Date(Date.now() - 21600000),
                        changes: {
                            confirmation_number: { from: '(없음)', to: 'ABC123456' },
                            vendor_name: { from: '(없음)', to: '괌 투어 컴퍼니' }
                        },
                        details: '예약이 확정되었습니다.'
                    }
                    ];
                }
                
                const historyContainers = [
                    'assignmentHistory',
                    'statusHistory', 
                    'voucherHistory',
                    'settlementHistory',
                    'reservationHistory'
                ];
                
                historyContainers.forEach(containerId => {
                    const container = document.getElementById(containerId);
                    if (container) {
                        const historyHtml = historyData.map(item => {
                            // 변경 내역 HTML 생성
                            let changesHtml = '';
                            if (item.changes && Object.keys(item.changes).length > 0) {
                                changesHtml = '<div class="mt-1">';
                                Object.entries(item.changes).forEach(([field, change]) => {
                                    const fieldName = getFieldDisplayName(field);
                                    changesHtml += `
                                        <div class="change-item">
                                            <small class="text-muted">
                                                <strong>${fieldName}:</strong> 
                                                <span class="text-decoration-line-through text-danger">${change.from}</span> 
                                                → 
                                                <span class="text-success">${change.to}</span>
                                            </small>
                                        </div>
                                    `;
                                });
                                changesHtml += '</div>';
                            }
                            
                            // 추가 세부사항 HTML
                            let detailsHtml = '';
                            if (item.details) {
                                detailsHtml = `<div class="mt-1"><small class="text-muted">${item.details}</small></div>`;
                            }
                            
                            return `
                                <div class="d-flex align-items-start mb-2 p-2 border-start border-3 border-${item.type === 'success' ? 'success' : 'info'} bg-light">
                                    <i class="bi ${item.type === 'success' ? 'bi-check-circle text-success' : 'bi-info-circle text-info'} me-2 mt-1"></i>
                                    <div class="flex-grow-1">
                                        <div class="fw-medium">${item.action}</div>
                                        <small class="text-muted">${new Date(item.time).toLocaleString('ko-KR')}</small>
                                        ${changesHtml}
                                        ${detailsHtml}
                                    </div>
                                </div>
                            `;
                        }).join('');
                        
                        container.innerHTML = historyHtml;
                    }
                });
                
            } catch (error) {
                console.error('히스토리 로드 오류:', error);
                // 오류 시 기본 메시지 표시
                const historyContainers = ['assignmentHistory', 'statusHistory', 'voucherHistory', 'settlementHistory', 'reservationHistory'];
                historyContainers.forEach(containerId => {
                    const container = document.getElementById(containerId);
                    if (container) {
                        container.innerHTML = '<p class="text-muted text-center">히스토리를 불러올 수 없습니다.</p>';
                    }
                });
            }
        }
        
        // 바우처 관련 함수들
        
        // 바우처 생성
        async function generateVoucher() {
            if (!window.currentReservationId) {
                showAlert('예약 정보가 선택되지 않았습니다.', 'warning');
                return;
            }
            
            try {
                const response = await fetch(`/api/reservations/${window.currentReservationId}/voucher`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // 바우처 링크 표시
                    const voucherUrl = `${window.location.origin}/voucher/${result.voucher_token}`;
                    document.getElementById('voucherLinkUrl').value = voucherUrl;
                    document.getElementById('voucherLinkGroup').style.display = 'flex';
                    
                    // 괌세이브카드 발급 코드 자동 생성
                    if (result.savecard_code) {
                        document.getElementById('savecard-code').value = result.savecard_code;
                    }
                    
                    // 바우처 상태 업데이트
                    updateVoucherStatus(result.voucher);
                    
                    showAlert('바우처가 성공적으로 생성되었습니다!', 'success');
                    addToHistory('바우처 생성', 'success');
                } else {
                    showAlert('바우처 생성에 실패했습니다: ' + result.message, 'danger');
                }
            } catch (error) {
                console.error('바우처 생성 오류:', error);
                showAlert('바우처 생성 중 오류가 발생했습니다.', 'danger');
            }
        }
        
        // 바우처 미리보기
        async function previewVoucher() {
            if (!window.currentReservationId) {
                showAlert('예약 정보가 선택되지 않았습니다.', 'warning');
                return;
            }
            
            try {
                // 바우처 토큰 확인
                const response = await fetch(`/api/reservations/${window.currentReservationId}`);
                const result = await response.json();
                
                if (result.success && result.reservation.voucher_token) {
                    const voucherUrl = `/voucher/${result.reservation.voucher_token}`;
                    window.open(voucherUrl, '_blank', 'width=800,height=600');
                    addToHistory('바우처 미리보기', 'info');
                } else {
                    showAlert('먼저 바우처를 생성해주세요.', 'warning');
                }
            } catch (error) {
                console.error('바우처 미리보기 오류:', error);
                showAlert('바우처 미리보기 중 오류가 발생했습니다.', 'danger');
            }
        }
        
        // 바우처 링크 복사
        function copyVoucherLink() {
            const linkInput = document.getElementById('voucherLinkUrl');
            if (linkInput.value) {
                navigator.clipboard.writeText(linkInput.value).then(() => {
                    showAlert('바우처 링크가 클립보드에 복사되었습니다!', 'success');
                    addToHistory('바우처 링크 복사', 'info');
                }).catch(err => {
                    console.error('복사 실패:', err);
                    showAlert('링크 복사에 실패했습니다.', 'danger');
                });
            } else {
                showAlert('복사할 바우처 링크가 없습니다.', 'warning');
            }
        }
        
        
        
        // 괌세이브카드 발급 코드 생성
        function generateSavecardCode() {
            // 6자리 발급 코드 생성 (소문자+숫자+소문자)
            const letters = 'abcdefghijklmnopqrstuvwxyz';
            const numbers = '0123456789';
            
            const code = 
                letters.charAt(Math.floor(Math.random() * letters.length)) +
                Array.from({length: 4}, () => numbers.charAt(Math.floor(Math.random() * numbers.length))).join('') +
                letters.charAt(Math.floor(Math.random() * letters.length));
            
            document.getElementById('savecard-code').value = code;
            showAlert('발급 코드가 생성되었습니다: ' + code, 'success');
        }
        
        // 발급 정보 복사
        function copySavecardInfo() {
            const code = document.getElementById('savecard-code').value;
            if (!code) {
                showAlert('먼저 발급 코드를 생성해주세요.', 'warning');
                return;
            }
            
            const info = `🎫 괌세이브카드 무료 발급\n\n발급코드: ${code}\n\n📍 발급 방법:\n1. https://www.guamsavecard.com/register 접속\n2. 위 발급코드 입력\n3. 개인정보 입력 후 발급 완료\n\n💰 30만원 상당의 할인 혜택을 받으세요!`;
            
            navigator.clipboard.writeText(info).then(() => {
                showAlert('발급 정보가 클립보드에 복사되었습니다!', 'success');
                addToHistory('발급 정보 복사', 'info');
            }).catch(err => {
                console.error('복사 실패:', err);
                showAlert('정보 복사에 실패했습니다.', 'danger');
            });
        }
        
        // 바우처 상태 업데이트
        function updateVoucherStatus(voucher) {
            if (!voucher) return;
            
            document.getElementById('voucher-created-at').textContent = 
                voucher.created_at ? formatDateTime(voucher.created_at) : '-';
            document.getElementById('voucher-sent-at').textContent = 
                voucher.sent_at ? formatDateTime(voucher.sent_at) : '-';
            document.getElementById('voucher-viewed-at').textContent = 
                voucher.viewed_at ? formatDateTime(voucher.viewed_at) : '-';
            
            const statusBadge = document.getElementById('voucher-status-badge');
            if (voucher.status === 'sent') {
                statusBadge.innerHTML = '<span class="badge bg-success">전송완료</span>';
            } else if (voucher.status === 'viewed') {
                statusBadge.innerHTML = '<span class="badge bg-info">고객확인</span>';
            } else {
                statusBadge.innerHTML = '<span class="badge bg-warning">생성완료</span>';
            }
        }
        
        
        // 바우처 취소
        async function cancelVoucher() {
            if (!window.currentReservationId) {
                showAlert('예약 정보가 선택되지 않았습니다.', 'warning');
                return;
            }
            
            if (!confirm('바우처를 취소하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) return;
            
            try {
                const response = await fetch(`/api/reservations/${window.currentReservationId}/voucher/cancel`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('바우처가 취소되었습니다.', 'success');
                    addToHistory('바우처 취소', 'success');
                    
                    // UI 초기화
                    document.getElementById('voucherLinkGroup').style.display = 'none';
                    document.getElementById('voucherLinkUrl').value = '';
                    document.getElementById('savecard-code').value = '';
                    
                    const statusBadge = document.getElementById('voucher-status-badge');
                    statusBadge.innerHTML = '<span class="badge bg-secondary">취소됨</span>';
                } else {
                    showAlert('바우처 취소에 실패했습니다: ' + result.message, 'danger');
                }
            } catch (error) {
                console.error('바우처 취소 오류:', error);
                showAlert('바우처 취소 중 오류가 발생했습니다.', 'danger');
            }
        }
        
        // 예약 변경사항 저장 (변경 내역 추적 포함)
        async function saveReservationChanges() {
            if (!window.currentReservationId) {
                showAlert('예약 정보가 선택되지 않았습니다.', 'warning');
                return;
            }
            
            // 현재 예약 데이터 가져오기
            const currentReservation = getReservationData(window.currentReservationId);
            
            // 영문명 합치기
            const englishLastname = document.getElementById('edit-english-lastname').value;
            const englishFirstname = document.getElementById('edit-english-firstname').value;
            const englishName = [englishLastname, englishFirstname].filter(name => name.trim()).join(' ');
            
            const formData = {
                // 예약 정보
                platform_name: document.getElementById('edit-platform-name').value,
                payment_status: document.getElementById('edit-payment-status').value,
                
                // 상품 정보
                product_name: document.getElementById('edit-product-name').value,
                package_type: document.getElementById('edit-package-type').value,
                
                // 일정 정보
                usage_date: document.getElementById('edit-usage-date').value,
                usage_time: document.getElementById('edit-usage-time').value,
                
                // 예약자 정보
                korean_name: document.getElementById('edit-korean-name').value,
                english_name: englishName,
                phone: document.getElementById('edit-phone').value,
                email: document.getElementById('edit-email').value,
                kakao_id: document.getElementById('edit-kakao-id').value,
                
                // 인원 및 금액 정보
                people_adult: parseInt(document.getElementById('edit-people-adult').value) || 0,
                people_child: parseInt(document.getElementById('edit-people-child').value) || 0,
                people_infant: parseInt(document.getElementById('edit-people-infant').value) || 0,
                adult_price: parseFloat(document.getElementById('edit-adult-price').value) || 0,
                child_price: parseFloat(document.getElementById('edit-child-price').value) || 0,
                infant_price: parseFloat(document.getElementById('edit-infant-price').value) || 0,
                
                // 특별 요청사항
                memo: document.getElementById('edit-memo').value
            };
            
            // 변경 내역 추적
            const changes = {};
            const importantFields = ['product_name', 'package_type', 'people_adult', 'people_child', 'usage_date', 'usage_time', 'memo'];
            let hasImportantChanges = false;
            
            if (currentReservation) {
                Object.keys(formData).forEach(key => {
                    const oldValue = currentReservation[key];
                    const newValue = formData[key];
                    
                    // 값이 실제로 변경된 경우만 추적
                    if (oldValue != newValue) {
                        changes[key] = {
                            from: oldValue,
                            to: newValue
                        };
                        
                        // 중요한 필드가 변경되었는지 확인
                        if (importantFields.includes(key)) {
                            hasImportantChanges = true;
                        }
                    }
                });
            }
            
            // 중요한 변경사항이 있고 현재 상태가 수배중이면 '수정중(예약변경)' 상태로 변경
            // 단, 사용자가 명시적으로 취소/환불 상태를 선택한 경우는 제외
            const userSelectedStatus = document.getElementById('edit-payment-status').value;
            const isExplicitStatusChange = userSelectedStatus === 'cancelled' || userSelectedStatus === 'refunded';
            
            if (hasImportantChanges && 
                (currentReservation.payment_status === 'in_progress' || currentReservation.payment_status === 'confirmed') &&
                !isExplicitStatusChange) {
                formData.payment_status = 'in_revision';
                console.log('⚠️ 중요 변경사항 감지 - 상태를 "수정중(예약변경)"으로 변경');
            }
            
            try {
                console.log('📝 예약 정보 저장 시작:', {
                    reservationId: window.currentReservationId,
                    formData: formData,
                    changes: changes
                });
                
                const response = await fetch(`/api/reservations/${window.currentReservationId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                
                console.log('📡 서버 응답 상태:', response.status, response.statusText);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('❌ 서버 오류 응답:', errorText);
                    showAlert(`서버 오류 (${response.status}): ${errorText}`, 'danger');
                    return;
                }
                
                const result = await response.json();
                console.log('📊 서버 응답 데이터:', result);
                
                if (result.success) {
                    showAlert('예약 정보가 저장되었습니다!', 'success');
                    
                    // 변경 내역과 함께 히스토리 추가
                    if (Object.keys(changes).length > 0) {
                        addToHistory('예약 정보 수정', 'success', changes, `${Object.keys(changes).length}개 항목이 변경되었습니다.`);
                    } else {
                        addToHistory('예약 정보 저장', 'info', null, '변경된 내용이 없습니다.');
                    }
                    
                    // 모달 닫기
                    const modal = bootstrap.Modal.getInstance(document.getElementById('reservationEditModal'));
                    if (modal) modal.hide();
                    
                    loadAssignments(); // 목록 새로고침
                } else {
                    showAlert('예약 정보 저장에 실패했습니다: ' + (result.message || '알 수 없는 오류'), 'danger');
                }
            } catch (error) {
                console.error('❌ 예약 정보 저장 오류:', error);
                showAlert(`예약 정보 저장 중 오류가 발생했습니다: ${error.message}`, 'danger');
            }
        }
        
        // 예약 폼 초기화
        function resetReservationForm() {
            if (window.reservations && window.currentReservationId) {
                const reservation = window.reservations.find(r => r.id === window.currentReservationId);
                if (reservation) {
                    document.getElementById('edit-customer-name').value = reservation.korean_name || '';
                    document.getElementById('edit-adult-count').value = reservation.people_adult || 0;
                    document.getElementById('edit-child-count').value = reservation.people_child || 0;
                    document.getElementById('edit-phone').value = reservation.phone || '';
                    document.getElementById('edit-usage-date').value = reservation.usage_date ? reservation.usage_date.split('T')[0] : '';
                    document.getElementById('edit-usage-time').value = reservation.usage_time || '';
                    document.getElementById('edit-product-name').value = reservation.product_name || '';
                    document.getElementById('edit-memo').value = reservation.memo || '';
                }
            }
        }
        
        // 상태 변경 (바우처 자동 생성 포함, 변경 내역 추적)
        async function changeReservationStatus() {
            if (!window.currentReservationId) {
                showAlert('예약 정보가 선택되지 않았습니다.', 'warning');
                return;
            }
            
            const newStatus = document.getElementById('new-status-select').value;
            const reason = document.getElementById('status-change-reason').value;
            
            if (!newStatus) {
                showAlert('변경할 상태를 선택해주세요.', 'warning');
                return;
            }
            
            // 현재 예약 데이터 가져오기
            const currentReservation = getReservationData(window.currentReservationId);
            const oldStatus = currentReservation ? currentReservation.payment_status : null;
            
            try {
                const response = await fetch(`/api/reservations/${window.currentReservationId}/status`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        status: newStatus,
                        reason: reason
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('예약 상태가 변경되었습니다!', 'success');
                    
                    // 상태 변경 내역 추적
                    const changes = {
                        payment_status: {
                            from: getReservationStatusText(oldStatus),
                            to: getReservationStatusText(newStatus)
                        }
                    };
                    
                    const details = reason ? `변경 사유: ${reason}` : null;
                    addToHistory('예약 상태 변경', 'success', changes, details);
                    
                    // 확정 상태로 변경된 경우 바우처 자동 생성
                    if (newStatus === 'confirmed') {
                        await autoGenerateVoucher(window.currentReservationId);
                    }
                    
                    loadAssignments(); // 목록 새로고침
                    
                    // 현재 상태 표시 업데이트
                    const currentStatusDisplay = document.getElementById('current-status-display');
                    if (currentStatusDisplay) {
                        currentStatusDisplay.innerHTML = `<span class="badge bg-${getBootstrapStatusClass(newStatus)}">${getReservationStatusText(newStatus)}</span>`;
                    }
                    
                    // 폼 초기화
                    document.getElementById('status-change-reason').value = '';
                } else {
                    showAlert('상태 변경에 실패했습니다: ' + result.message, 'danger');
                }
            } catch (error) {
                console.error('상태 변경 오류:', error);
                showAlert('상태 변경 중 오류가 발생했습니다.', 'danger');
            }
        }

        // 바우처 자동 생성 (예약 확정 시)
        async function autoGenerateVoucher(reservationId) {
            try {
                showAlert('예약이 확정되어 바우처를 자동 생성 중입니다...', 'info');
                
                // 세이브카드 코드 먼저 생성
                const savecardCode = generateRandomSavecardCode();
                
                const response = await fetch(`/api/reservations/${reservationId}/voucher`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        auto_generate: true,
                        savecard_code: savecardCode
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('바우처가 자동으로 생성되었습니다! 괌세이브카드 발급코드도 함께 생성되었습니다.', 'success');
                    addToHistory('바우처 자동 생성 (예약 확정)', 'success');
                    addToHistory(`세이브카드 발급코드 생성: ${savecardCode}`, 'info');
                } else {
                    console.error('바우처 자동 생성 실패:', result.message);
                    showAlert('바우처 자동 생성에 실패했습니다. 수동으로 생성해주세요.', 'warning');
                }
            } catch (error) {
                console.error('바우처 자동 생성 오류:', error);
                showAlert('바우처 자동 생성 중 오류가 발생했습니다. 수동으로 생성해주세요.', 'warning');
            }
        }

        // 랜덤 세이브카드 코드 생성
        function generateRandomSavecardCode() {
            const letters = 'abcdefghijklmnopqrstuvwxyz';
            const numbers = '0123456789';
            
            return letters.charAt(Math.floor(Math.random() * letters.length)) +
                   Array.from({length: 4}, () => numbers.charAt(Math.floor(Math.random() * numbers.length))).join('') +
                   letters.charAt(Math.floor(Math.random() * letters.length));
        }
        
        // 컨펌번호 저장
        async function saveConfirmationNumber() {
            if (!window.currentReservationId) {
                showAlert('예약 정보가 선택되지 않았습니다.', 'warning');
                return;
            }
            
            const confirmationNumber = document.getElementById('confirmation-number').value;
            const vendorId = document.getElementById('vendor-select').value;
            
            if (!confirmationNumber) {
                showAlert('컨펌번호를 입력해주세요.', 'warning');
                return;
            }
            
            try {
                const response = await fetch(`/api/reservations/${window.currentReservationId}/confirm`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        confirmation_number: confirmationNumber,
                        vendor_id: vendorId
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('✅ 컨펌번호가 저장되고 예약이 확정되었습니다!', 'success');
                    
                    // 현재 예약 데이터 가져오기
                    const currentReservation = getReservationData(window.currentReservationId);
                    const oldConfirmationNumber = currentReservation ? currentReservation.confirmation_number : null;
                    
                    // 컨펌번호 변경 내역 추적
                    const changes = {
                        confirmation_number: {
                            from: oldConfirmationNumber || '(없음)',
                            to: confirmationNumber
                        },
                        payment_status: {
                            from: '수배중',
                            to: '확정완료'
                        }
                    };
                    
                    // 수배업체 정보도 변경된 경우 추가
                    if (vendorId && currentReservation && currentReservation.vendor_id !== vendorId) {
                        const vendorSelect = document.getElementById('vendor-select');
                        const vendorName = vendorSelect.options[vendorSelect.selectedIndex].text;
                        changes.vendor_name = {
                            from: currentReservation.vendor_name || '(없음)',
                            to: vendorName
                        };
                    }
                    
                    addToHistory('컨펌번호 저장 및 확정', 'success', changes, '예약이 확정되었습니다.');
                    
                    // 목록 새로고침
                    loadAssignments();
                } else {
                    showAlert('컨펌번호 저장에 실패했습니다: ' + result.message, 'danger');
                }
            } catch (error) {
                console.error('컨펌번호 저장 오류:', error);
                showAlert('컨펌번호 저장 중 오류가 발생했습니다.', 'danger');
            }
        }
        
        // 컨펌번호 자동 생성
        function generateConfirmationNumber() {
            const timestamp = Date.now().toString().slice(-6);
            const random = Math.random().toString(36).substr(2, 4).toUpperCase();
            const confirmationNumber = `GU${timestamp}${random}`;
            
            document.getElementById('confirmation-number').value = confirmationNumber;
            showAlert('컨펌번호가 자동 생성되었습니다: ' + confirmationNumber, 'success');
        }
        
        // 정산 체크리스트 관리
        document.addEventListener('DOMContentLoaded', function() {
            // 체크박스 이벤트 리스너
            const checkboxes = [
                'check-voucher-sent',
                'check-service-completed', 
                'check-vendor-payment',
                'check-customer-feedback',
                'check-documents'
            ];
            
            checkboxes.forEach(id => {
                const checkbox = document.getElementById(id);
                if (checkbox) {
                    checkbox.addEventListener('change', updateTransferButton);
                }
            });
        });
        
        // 정산 이관 버튼 활성화 체크
        function updateTransferButton() {
            const checkboxes = [
                'check-voucher-sent',
                'check-service-completed', 
                'check-vendor-payment',
                'check-customer-feedback',
                'check-documents'
            ];
            
            const allChecked = checkboxes.every(id => {
                const checkbox = document.getElementById(id);
                return checkbox && checkbox.checked;
            });
            
            const transferBtn = document.getElementById('transfer-btn');
            if (transferBtn) {
                transferBtn.disabled = !allChecked;
            }
        }
        
        // 정산관리로 이관
        async function transferToSettlement() {
            if (!window.currentReservationId) {
                showAlert('예약 정보가 선택되지 않았습니다.', 'warning');
                return;
            }
            
            if (!confirm('정산관리로 이관하시겠습니까? 이 작업 후에는 수배관리에서 제외됩니다.')) return;
            
            const settlementData = {
                revenue: document.getElementById('settlement-revenue').value,
                cost: document.getElementById('settlement-cost').value,
                fee: document.getElementById('settlement-fee').value,
                profit: document.getElementById('settlement-profit').value,
                memo: document.getElementById('settlement-memo').value
            };
            
            try {
                const response = await fetch(`/api/reservations/${window.currentReservationId}/settlement`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(settlementData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('정산관리로 이관되었습니다!', 'success');
                    addToHistory('정산관리 이관', 'success');
                    
                    // 모달 닫기
                    const modal = bootstrap.Modal.getInstance(document.getElementById('assignmentModal'));
                    if (modal) modal.hide();
                    
                    // 목록 새로고침
                    loadAssignments();
                } else {
                    showAlert('정산 이관에 실패했습니다: ' + result.message, 'danger');
                }
            } catch (error) {
                console.error('정산 이관 오류:', error);
                showAlert('정산 이관 중 오류가 발생했습니다.', 'danger');
            }
        }
        
        // 수익 계산
        function calculateProfit() {
            const revenue = parseFloat(document.getElementById('settlement-revenue').value) || 0;
            const cost = parseFloat(document.getElementById('settlement-cost').value) || 0;
            const fee = parseFloat(document.getElementById('settlement-fee').value) || 0;
            
            const profit = revenue - cost - fee;
            document.getElementById('settlement-profit').value = profit.toFixed(2);
            
            showAlert('수익이 계산되었습니다: ' + profit.toLocaleString('ko-KR') + '원', 'info');
        }
        
        // 날짜/시간 포맷팅
        function formatDateTime(dateString) {
            if (!dateString) return '-';
            return new Date(dateString).toLocaleString('ko-KR');
        }

        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
