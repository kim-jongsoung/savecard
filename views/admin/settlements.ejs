<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>정산관리 - 괌세이브카드 관리자</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* PC 화면에서 가로폭 1200px 고정 */
        @media (min-width: 1200px) {
            .container-fluid {
                max-width: 1200px;
                margin: 0 auto;
            }
        }
        
        .status-badge {
            font-size: 0.8rem;
            padding: 0.25rem 0.5rem;
        }
        .status-settled { background-color: #28a745; color: #fff; }
        .status-pending { background-color: #ffc107; color: #000; }
        .status-overdue { background-color: #dc3545; color: #fff; }
        
        .settlement-card {
            border-left: 4px solid #dee2e6;
            transition: all 0.3s ease;
        }
        .settlement-card:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .settlement-card.settled { border-left-color: #28a745; }
        .settlement-card.pending { border-left-color: #ffc107; }
        .settlement-card.overdue { border-left-color: #dc3545; }
        
        .stats-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 15px;
        }
        
        .profit-positive { color: #28a745; font-weight: bold; }
        .profit-negative { color: #dc3545; font-weight: bold; }
        .profit-neutral { color: #6c757d; font-weight: bold; }
    </style>
</head>
<body>
    <%- include('../partials/navbar', { currentPage: 'settlements' }) %>
    
    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2><i class="fas fa-calculator me-2"></i>정산관리</h2>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-info" onclick="openExchangeRateModal()">
                            <i class="fas fa-exchange-alt me-1"></i>환율 관리
                        </button>
                        <button class="btn btn-outline-primary" onclick="openBulkCalculateModal()">
                            <i class="fas fa-calculator me-1"></i>대량 정산 계산
                        </button>
                    </div>
                </div>

                <!-- 탭 네비게이션 -->
                <ul class="nav nav-tabs mb-4" id="settlementTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="list-tab" data-bs-toggle="tab" data-bs-target="#listPane" type="button" role="tab">
                            <i class="fas fa-list me-1"></i>정산 목록
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="rag-tab" data-bs-toggle="tab" data-bs-target="#ragPane" type="button" role="tab">
                            <i class="fas fa-book me-1"></i>RAG 문서 관리
                        </button>
                    </li>
                </ul>

                <!-- 탭 컨텐츠 -->
                <div class="tab-content" id="settlementTabContent">
                    <!-- 정산 목록 탭 -->
                    <div class="tab-pane fade show active" id="listPane" role="tabpanel">
                        <!-- 정산 통계 -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card stats-card">
                            <div class="card-body text-center">
                                <i class="fas fa-dollar-sign fa-2x mb-2"></i>
                                <h5 class="mb-1">총 매출</h5>
                                <h3 id="totalRevenue">$0</h3>
                                <small>이번 달</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card stats-card">
                            <div class="card-body text-center">
                                <i class="fas fa-shopping-cart fa-2x mb-2"></i>
                                <h5 class="mb-1">총 매입</h5>
                                <h3 id="totalCost">$0</h3>
                                <small>이번 달</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card stats-card">
                            <div class="card-body text-center">
                                <i class="fas fa-chart-line fa-2x mb-2"></i>
                                <h5 class="mb-1">총 마진</h5>
                                <h3 id="totalProfit">$0</h3>
                                <small>이번 달</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card stats-card">
                            <div class="card-body text-center">
                                <i class="fas fa-percentage fa-2x mb-2"></i>
                                <h5 class="mb-1">마진율</h5>
                                <h3 id="profitRate">0%</h3>
                                <small>이번 달</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 필터 및 검색 -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-2">
                                <select class="form-select" id="statusFilter">
                                    <option value="">전체 상태</option>
                                    <option value="pending">정산 대기</option>
                                    <option value="settled">정산 완료</option>
                                    <option value="overdue">연체</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <select class="form-select" id="monthFilter">
                                    <option value="">전체 기간</option>
                                    <option value="2025-09">2025년 9월</option>
                                    <option value="2025-08">2025년 8월</option>
                                    <option value="2025-07">2025년 7월</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <input type="text" class="form-control" id="searchInput" placeholder="예약번호, 고객명 검색...">
                            </div>
                            <div class="col-md-2">
                                <button class="btn btn-outline-primary w-100" onclick="searchSettlements()">
                                    <i class="fas fa-search"></i> 검색
                                </button>
                            </div>
                            <div class="col-md-2">
                                <button class="btn btn-outline-secondary w-100" onclick="resetFilters()">
                                    <i class="fas fa-undo"></i> 초기화
                                </button>
                            </div>
                            <div class="col-md-1">
                                <button class="btn btn-success w-100" onclick="exportSettlements()">
                                    <i class="fas fa-download"></i> 내보내기
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 정산 목록 -->
                <div id="settlementsList">
                    <!-- 동적으로 로드됨 -->
                </div>

                <!-- 페이징 -->
                <nav aria-label="정산 목록 페이징">
                    <ul class="pagination justify-content-center" id="pagination">
                        <!-- 동적으로 로드됨 -->
                    </ul>
                </nav>
                    </div>
                    <!-- 정산 목록 탭 끝 -->

                    <!-- RAG 문서 관리 탭 -->
                    <div class="tab-pane fade" id="ragPane" role="tabpanel">
                        <div class="row">
                            <div class="col-12">
                                <!-- RAG 문서 업로드 -->
                                <div class="card mb-4">
                                    <div class="card-header bg-primary text-white">
                                        <h5 class="mb-0"><i class="fas fa-upload me-2"></i>RAG 문서 업로드</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="alert alert-info">
                                            <i class="fas fa-info-circle me-1"></i>
                                            <strong>RAG 문서란?</strong> 플랫폼별 수수료 정책, 공급사별 가격 정보 등 정산 계산에 필요한 참고 문서입니다.
                                        </div>
                                        <form id="ragUploadForm" class="row g-3">
                                            <div class="col-md-3">
                                                <label class="form-label">문서 유형</label>
                                                <select class="form-select" id="ragDocType" required>
                                                    <option value="">선택하세요</option>
                                                    <option value="platform_policy">플랫폼 정책</option>
                                                    <option value="supplier_policy">공급사 정책</option>
                                                    <option value="settlement_guide">정산 가이드</option>
                                                    <option value="exchange_rate_policy">환율 정책</option>
                                                    <option value="other">기타</option>
                                                </select>
                                            </div>
                                            <div class="col-md-3">
                                                <label class="form-label">문서명</label>
                                                <input type="text" class="form-control" id="ragDocName" placeholder="예: NOL 수수료 정책" required>
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label">문서 내용</label>
                                                <textarea class="form-control" id="ragDocContent" rows="1" placeholder="문서 내용을 입력하세요..." required></textarea>
                                            </div>
                                            <div class="col-md-2">
                                                <label class="form-label">&nbsp;</label>
                                                <button type="submit" class="btn btn-primary w-100">
                                                    <i class="fas fa-save me-1"></i>등록
                                                </button>
                                            </div>
                                        </form>
                                    </div>
                                </div>

                                <!-- RAG 문서 목록 -->
                                <div class="card">
                                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0"><i class="fas fa-list me-2"></i>등록된 RAG 문서</h5>
                                        <button class="btn btn-sm btn-outline-primary" onclick="loadRagDocuments()">
                                            <i class="fas fa-sync me-1"></i>새로고침
                                        </button>
                                    </div>
                                    <div class="card-body">
                                        <div class="table-responsive">
                                            <table class="table table-hover">
                                                <thead>
                                                    <tr>
                                                        <th>문서 유형</th>
                                                        <th>문서명</th>
                                                        <th>플랫폼/공급사</th>
                                                        <th>내용 미리보기</th>
                                                        <th>등록일시</th>
                                                        <th>작업</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="ragDocumentList">
                                                    <tr>
                                                        <td colspan="6" class="text-center text-muted">
                                                            <i class="fas fa-spinner fa-spin me-1"></i>로딩 중...
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- RAG 문서 관리 탭 끝 -->
                </div>
                <!-- 탭 컨텐츠 끝 -->
            </div>
        </div>
    </div>

    <!-- 정산 처리 모달 -->
    <div class="modal fade" id="settlementModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">정산 처리</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="settlementForm">
                        <input type="hidden" id="reservationId">
                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label">매출 금액</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="saleAmount" step="0.01" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">매입 금액</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="costAmount" step="0.01" required>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <label class="form-label">마진</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="profitAmount" readonly>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">마진율</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" id="profitRate" readonly>
                                    <span class="input-group-text">%</span>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <label class="form-label">정산 메모</label>
                            <textarea class="form-control" id="settlementNotes" rows="3" placeholder="정산 관련 메모를 입력하세요..."></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-success" onclick="processSettlement()">정산 처리</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 환율 관리 모달 -->
    <div class="modal fade" id="exchangeRateModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-exchange-alt me-2"></i>환율 관리</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <!-- 환율 등록 폼 -->
                    <div class="card mb-3">
                        <div class="card-header bg-info text-white">
                            <h6 class="mb-0"><i class="fas fa-plus me-1"></i>환율 등록</h6>
                        </div>
                        <div class="card-body">
                            <form id="exchangeRateForm" class="row g-3">
                                <div class="col-md-3">
                                    <label class="form-label">통화 코드</label>
                                    <select class="form-select" id="currencyCode" required>
                                        <option value="">선택하세요</option>
                                        <option value="USD">USD (미국 달러)</option>
                                        <option value="JPY">JPY (일본 엔)</option>
                                        <option value="CNY">CNY (중국 위안)</option>
                                        <option value="EUR">EUR (유로)</option>
                                        <option value="VND">VND (베트남 동)</option>
                                        <option value="THB">THB (태국 바트)</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">기준 날짜</label>
                                    <input type="date" class="form-control" id="rateDate" required>
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label">기준 시간</label>
                                    <input type="time" class="form-control" id="rateTime" value="16:00" required>
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label">환율 (KRW)</label>
                                    <input type="number" class="form-control" id="exchangeRate" step="0.0001" placeholder="1330.50" required>
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label">&nbsp;</label>
                                    <button type="submit" class="btn btn-primary w-100">
                                        <i class="fas fa-save me-1"></i>등록
                                    </button>
                                </div>
                            </form>
                            <div class="mt-2">
                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    환율은 KRW 기준입니다. 예: USD 1 = 1330.50 KRW
                                </small>
                            </div>
                        </div>
                    </div>

                    <!-- 환율 목록 -->
                    <div class="card">
                        <div class="card-header bg-light">
                            <h6 class="mb-0"><i class="fas fa-list me-1"></i>최근 환율 이력</h6>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-sm table-hover">
                                    <thead>
                                        <tr>
                                            <th>통화</th>
                                            <th>기준일시</th>
                                            <th>환율 (KRW)</th>
                                            <th>출처</th>
                                            <th>등록일시</th>
                                        </tr>
                                    </thead>
                                    <tbody id="exchangeRateList">
                                        <tr>
                                            <td colspan="5" class="text-center text-muted">
                                                <i class="fas fa-spinner fa-spin me-1"></i>로딩 중...
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 대량 정산 계산 모달 -->
    <div class="modal fade" id="bulkCalculateModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-calculator me-2"></i>대량 정산 계산</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-1"></i>
                        <strong>대량 정산 계산 기능</strong><br>
                        여러 예약의 정산 금액을 AI 기반으로 자동 계산합니다. 환율, 수수료 등이 자동으로 적용됩니다.
                    </div>

                    <!-- 선택 옵션 -->
                    <div class="card mb-3">
                        <div class="card-header bg-primary text-white">
                            <h6 class="mb-0"><i class="fas fa-filter me-1"></i>계산 대상 선택</h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-4">
                                    <label class="form-label">플랫폼 선택 (선택사항)</label>
                                    <select class="form-select" id="bulkPlatformId">
                                        <option value="">전체 플랫폼</option>
                                        <option value="nol">NOL</option>
                                        <option value="klook">KLOOK</option>
                                        <option value="viator">VIATOR</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">공급사 선택 (선택사항)</label>
                                    <select class="form-select" id="bulkSupplierId">
                                        <option value="">전체 공급사</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">기준 기간</label>
                                    <select class="form-select" id="bulkPeriod">
                                        <option value="current_month">이번 달</option>
                                        <option value="last_month">지난 달</option>
                                        <option value="custom">직접 선택</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- 대상 예약 목록 -->
                    <div class="card">
                        <div class="card-header bg-light d-flex justify-content-between align-items-center">
                            <h6 class="mb-0"><i class="fas fa-list-check me-1"></i>계산 대상 예약</h6>
                            <div>
                                <button class="btn btn-sm btn-outline-primary" onclick="selectAllBulkReservations()">
                                    <i class="fas fa-check-square me-1"></i>전체 선택
                                </button>
                                <button class="btn btn-sm btn-outline-secondary" onclick="deselectAllBulkReservations()">
                                    <i class="fas fa-square me-1"></i>전체 해제
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div id="bulkReservationList" style="max-height: 400px; overflow-y: auto;">
                                <p class="text-center text-muted">
                                    <i class="fas fa-search me-1"></i>조건을 선택한 후 "대상 조회" 버튼을 클릭하세요.
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- 계산 결과 -->
                    <div id="bulkCalculateResult" class="mt-3" style="display: none;">
                        <div class="alert alert-success">
                            <h6><i class="fas fa-check-circle me-1"></i>계산 완료</h6>
                            <div id="bulkResultSummary"></div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                    <button type="button" class="btn btn-info" onclick="loadBulkReservations()">
                        <i class="fas fa-search me-1"></i>대상 조회
                    </button>
                    <button type="button" class="btn btn-primary" onclick="executeBulkCalculate()" id="bulkCalculateBtn" disabled>
                        <i class="fas fa-calculator me-1"></i>정산 계산 실행
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentPage = 1;
        let currentStatus = '';
        let currentMonth = '';
        let currentSearch = '';

        // 페이지 로드 시 초기화
        document.addEventListener('DOMContentLoaded', function() {
            console.log('정산관리 페이지 로드 시작');
            loadSettlements();
            loadStats();
            
            // 금액 입력 시 자동 계산 (요소가 존재할 때만)
            const saleAmountEl = document.getElementById('saleAmount');
            const costAmountEl = document.getElementById('costAmount');
            
            if (saleAmountEl && costAmountEl) {
                saleAmountEl.addEventListener('input', calculateProfit);
                costAmountEl.addEventListener('input', calculateProfit);
            }
        });

        // 정산 통계 로드
        async function loadStats() {
            try {
                console.log('정산 통계 로드 시작');
                const response = await fetch('/api/settlements/stats');
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('정산 통계 응답:', data);
                
                if (data.success) {
                    const stats = data.data;
                    const totalRevenueEl = document.getElementById('totalRevenue');
                    const totalCostEl = document.getElementById('totalCost');
                    const totalProfitEl = document.getElementById('totalProfit');
                    const profitRateEl = document.getElementById('profitRate');
                    
                    if (totalRevenueEl) totalRevenueEl.textContent = `$${stats.totalRevenue.toLocaleString()}`;
                    if (totalCostEl) totalCostEl.textContent = `$${stats.totalCost.toLocaleString()}`;
                    if (totalProfitEl) totalProfitEl.textContent = `$${stats.totalProfit.toLocaleString()}`;
                    if (profitRateEl) profitRateEl.textContent = `${stats.profitRate.toFixed(1)}%`;
                } else {
                    console.error('통계 API 오류:', data.message);
                    showAlert('통계를 불러오는데 실패했습니다: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('통계 로드 실패:', error);
                showAlert('통계를 불러오는데 실패했습니다.', 'danger');
            }
        }

        // 정산 목록 로드
        async function loadSettlements(page = 1) {
            try {
                console.log('정산 목록 로드 시작, 페이지:', page);
                currentPage = page;
                const params = new URLSearchParams({
                    page: page,
                    status: currentStatus,
                    month: currentMonth,
                    search: currentSearch
                });

                const response = await fetch(`/api/settlements?${params}`);
                console.log('정산 목록 응답 상태:', response.status);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('정산 목록 응답 데이터:', data);

                if (data.success) {
                    renderSettlements(data.data.settlements || []);
                    renderPagination(data.data.pagination);
                } else {
                    console.error('정산 목록 API 오류:', data.message);
                    showAlert('데이터를 불러오는데 실패했습니다: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('정산 목록 로드 실패:', error);
                showAlert('정산 목록을 불러오는데 실패했습니다: ' + error.message, 'danger');
            }
        }

        // 정산 목록 렌더링
        function renderSettlements(settlements) {
            const container = document.getElementById('settlementsList');
            
            if (settlements.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-5">
                        <i class="fas fa-calculator fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">정산할 예약이 없습니다</h5>
                        <p class="text-muted">바우처 전송이 완료된 예약이 여기에 표시됩니다.</p>
                    </div>
                `;
                return;
            }

            const html = settlements.map(settlement => `
                <div class="card settlement-card ${getSettlementStatusClass(settlement.settlement_status)} mb-3">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-8">
                                <div class="d-flex align-items-center mb-2">
                                    <h6 class="mb-0 me-3">
                                        <i class="fas fa-ticket-alt me-1"></i>${settlement.reservation_number || '예약번호 없음'}
                                    </h6>
                                    <span class="badge status-badge status-${getSettlementStatusClass(settlement.settlement_status)}">
                                        ${getSettlementStatusText(settlement.settlement_status)}
                                    </span>
                                </div>
                                <div class="mb-2">
                                    <strong>${settlement.product_name || '상품명 없음'}</strong>
                                </div>
                                <div class="text-muted small mb-1">
                                    <i class="fas fa-user me-1"></i>${settlement.korean_name || '고객명 없음'}
                                    <i class="fas fa-calendar ms-3 me-1"></i>${settlement.departure_date || '날짜 미정'}
                                    <i class="fas fa-building ms-3 me-1"></i>${settlement.platform_name || '플랫폼 없음'}
                                </div>
                                <div class="text-muted small mb-1">
                                    <i class="fas fa-dollar-sign me-1"></i>매출: $${settlement.sale_amount || 0}
                                    <i class="fas fa-shopping-cart ms-3 me-1"></i>매입: $${settlement.cost_amount || 0}
                                    <span class="ms-3 ${getProfitClass(settlement.profit_amount)}">
                                        <i class="fas fa-chart-line me-1"></i>마진: $${settlement.profit_amount || 0}
                                    </span>
                                </div>
                                ${settlement.settlement_notes ? `
                                    <div class="text-muted small">
                                        <i class="fas fa-sticky-note me-1"></i>${settlement.settlement_notes}
                                    </div>
                                ` : ''}
                            </div>
                            <div class="col-md-4 text-end">
                                <div class="btn-group-vertical d-grid gap-1" role="group">
                                    ${settlement.settlement_status === 'pending' ? `
                                        <button class="btn btn-sm btn-success" onclick="openSettlementModal(${settlement.id})">
                                            <i class="fas fa-calculator"></i> 정산 처리
                                        </button>
                                    ` : ''}
                                    <button class="btn btn-sm btn-outline-primary" onclick="viewSettlementDetail(${settlement.id})">
                                        <i class="fas fa-eye"></i> 상세 보기
                                    </button>
                                    ${settlement.settlement_status === 'settled' ? `
                                        <button class="btn btn-sm btn-outline-secondary" onclick="printSettlement(${settlement.id})">
                                            <i class="fas fa-print"></i> 정산서 출력
                                        </button>
                                    ` : ''}
                                </div>
                                <div class="mt-2 small text-muted">
                                    ${settlement.settlement_status === 'settled' ? 
                                        `정산: ${formatDate(settlement.settled_at)}` : 
                                        `생성: ${formatDate(settlement.created_at)}`
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');

            container.innerHTML = html;
        }

        // 정산 상태 텍스트 변환
        function getSettlementStatusText(status) {
            const statusMap = {
                'pending': '정산 대기',
                'settled': '정산 완료',
                'overdue': '연체'
            };
            return statusMap[status] || '정산 대기';
        }

        // 정산 상태 CSS 클래스 변환
        function getSettlementStatusClass(status) {
            const classMap = {
                'pending': 'pending',
                'settled': 'settled',
                'overdue': 'overdue'
            };
            return classMap[status] || 'pending';
        }

        // 마진 색상 클래스
        function getProfitClass(profit) {
            if (profit > 0) return 'profit-positive';
            if (profit < 0) return 'profit-negative';
            return 'profit-neutral';
        }

        // 마진 자동 계산
        function calculateProfit() {
            const saleAmount = parseFloat(document.getElementById('saleAmount').value) || 0;
            const costAmount = parseFloat(document.getElementById('costAmount').value) || 0;
            const profit = saleAmount - costAmount;
            const profitRate = saleAmount > 0 ? (profit / saleAmount * 100) : 0;
            
            document.getElementById('profitAmount').value = profit.toFixed(2);
            document.getElementById('profitRate').value = profitRate.toFixed(1);
        }

        // 정산 모달 열기
        function openSettlementModal(reservationId) {
            document.getElementById('reservationId').value = reservationId;
            document.getElementById('settlementForm').reset();
            
            // 기존 예약 정보로 초기값 설정 (필요시)
            
            const modal = new bootstrap.Modal(document.getElementById('settlementModal'));
            modal.show();
        }

        // 정산 처리
        async function processSettlement() {
            const reservationId = document.getElementById('reservationId').value;
            const saleAmount = document.getElementById('saleAmount').value;
            const costAmount = document.getElementById('costAmount').value;
            const settlementNotes = document.getElementById('settlementNotes').value;
            
            if (!saleAmount || !costAmount) {
                showAlert('매출 금액과 매입 금액을 입력해주세요.', 'warning');
                return;
            }
            
            try {
                const response = await fetch(`/api/settlements/${reservationId}/process`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        sale_amount: parseFloat(saleAmount),
                        cost_amount: parseFloat(costAmount),
                        settlement_notes: settlementNotes
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    showAlert('정산이 완료되었습니다.', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('settlementModal')).hide();
                    loadSettlements();
                    loadStats();
                } else {
                    showAlert(result.message || '정산 처리에 실패했습니다.', 'danger');
                }
            } catch (error) {
                console.error('정산 처리 실패:', error);
                showAlert('정산 처리 중 오류가 발생했습니다.', 'danger');
            }
        }

        // 검색 및 필터링
        function searchSettlements() {
            currentStatus = document.getElementById('statusFilter').value;
            currentMonth = document.getElementById('monthFilter').value;
            currentSearch = document.getElementById('searchInput').value;
            loadSettlements(1);
        }

        function resetFilters() {
            document.getElementById('statusFilter').value = '';
            document.getElementById('monthFilter').value = '';
            document.getElementById('searchInput').value = '';
            currentStatus = '';
            currentMonth = '';
            currentSearch = '';
            loadSettlements(1);
        }

        // 정산 내보내기
        function exportSettlements() {
            const params = new URLSearchParams({
                status: currentStatus,
                month: currentMonth,
                search: currentSearch,
                export: 'csv'
            });
            
            window.open(`/api/settlements/export?${params}`, '_blank');
        }

        // 기타 함수들
        function viewSettlementDetail(id) {
            showAlert('정산 상세 보기 기능은 곧 추가됩니다.', 'info');
        }

        function printSettlement(id) {
            showAlert('정산서 출력 기능은 곧 추가됩니다.', 'info');
        }

        function formatDate(dateString) {
            if (!dateString) return '-';
            const date = new Date(dateString);
            return date.toLocaleDateString('ko-KR') + ' ' + date.toLocaleTimeString('ko-KR', {hour: '2-digit', minute: '2-digit'});
        }

        function renderPagination(pagination) {
            const container = document.getElementById('pagination');
            if (!pagination || pagination.totalPages <= 1) {
                container.innerHTML = '';
                return;
            }

            let html = '';
            
            if (pagination.currentPage > 1) {
                html += `<li class="page-item"><a class="page-link" href="#" onclick="loadSettlements(${pagination.currentPage - 1})">이전</a></li>`;
            }

            for (let i = Math.max(1, pagination.currentPage - 2); i <= Math.min(pagination.totalPages, pagination.currentPage + 2); i++) {
                html += `<li class="page-item ${i === pagination.currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="loadSettlements(${i})">${i}</a>
                </li>`;
            }

            if (pagination.currentPage < pagination.totalPages) {
                html += `<li class="page-item"><a class="page-link" href="#" onclick="loadSettlements(${pagination.currentPage + 1})">다음</a></li>`;
            }

            container.innerHTML = html;
        }

        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        // ==================== 환율 관리 기능 ====================

        // 환율 관리 모달 열기
        function openExchangeRateModal() {
            const modal = new bootstrap.Modal(document.getElementById('exchangeRateModal'));
            modal.show();
            loadExchangeRates();
            
            // 오늘 날짜를 기본값으로 설정
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('rateDate').value = today;
        }

        // 환율 목록 로드
        async function loadExchangeRates() {
            try {
                const response = await fetch('/api/exchange-rates');
                const data = await response.json();
                
                if (data.success) {
                    renderExchangeRates(data.data);
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('환율 목록 로드 실패:', error);
                document.getElementById('exchangeRateList').innerHTML = `
                    <tr>
                        <td colspan="5" class="text-center text-danger">
                            <i class="fas fa-exclamation-triangle me-1"></i>환율 목록을 불러올 수 없습니다.
                        </td>
                    </tr>
                `;
            }
        }

        // 환율 목록 렌더링
        function renderExchangeRates(rates) {
            const tbody = document.getElementById('exchangeRateList');
            
            if (rates.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="5" class="text-center text-muted">
                            <i class="fas fa-inbox me-1"></i>등록된 환율이 없습니다.
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = rates.map(rate => `
                <tr>
                    <td><strong>${rate.currency_code}</strong></td>
                    <td>${rate.rate_date} ${rate.rate_time || '16:00'}</td>
                    <td><strong class="text-primary">₩${parseFloat(rate.rate).toLocaleString('ko-KR', {minimumFractionDigits: 2})}</strong></td>
                    <td><span class="badge bg-secondary">${rate.source || '수동'}</span></td>
                    <td><small class="text-muted">${formatDate(rate.created_at)}</small></td>
                </tr>
            `).join('');
        }

        // 환율 폼 제출 이벤트
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('exchangeRateForm');
            if (form) {
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    const formData = {
                        currency_code: document.getElementById('currencyCode').value,
                        rate_date: document.getElementById('rateDate').value,
                        rate_time: document.getElementById('rateTime').value,
                        rate: parseFloat(document.getElementById('exchangeRate').value),
                        source: 'manual'
                    };
                    
                    try {
                        const response = await fetch('/api/exchange-rates', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(formData)
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            showAlert('환율이 등록되었습니다.', 'success');
                            form.reset();
                            document.getElementById('rateTime').value = '16:00';
                            const today = new Date().toISOString().split('T')[0];
                            document.getElementById('rateDate').value = today;
                            loadExchangeRates();
                        } else {
                            showAlert(result.message || '환율 등록에 실패했습니다.', 'danger');
                        }
                    } catch (error) {
                        console.error('환율 등록 실패:', error);
                        showAlert('환율 등록 중 오류가 발생했습니다.', 'danger');
                    }
                });
            }
        });

        // ==================== 대량 정산 계산 기능 ====================

        let selectedReservations = [];

        // 대량 정산 모달 열기
        function openBulkCalculateModal() {
            const modal = new bootstrap.Modal(document.getElementById('bulkCalculateModal'));
            modal.show();
            selectedReservations = [];
            document.getElementById('bulkCalculateResult').style.display = 'none';
        }

        // 대상 예약 조회
        async function loadBulkReservations() {
            try {
                const platformId = document.getElementById('bulkPlatformId').value;
                const supplierId = document.getElementById('bulkSupplierId').value;
                const period = document.getElementById('bulkPeriod').value;

                // 바우처 전송 완료된 예약 조회 (정산 대상)
                const params = new URLSearchParams({
                    status: 'voucher_sent',
                    limit: 100
                });

                if (platformId) params.append('platform', platformId);
                if (supplierId) params.append('supplier', supplierId);

                const response = await fetch(`/api/assignments?${params}`);
                const data = await response.json();

                if (data.success && data.data) {
                    renderBulkReservations(data.data);
                } else {
                    throw new Error(data.message || '예약 목록을 불러올 수 없습니다.');
                }
            } catch (error) {
                console.error('대상 예약 조회 실패:', error);
                showAlert('대상 예약을 불러오는데 실패했습니다.', 'danger');
            }
        }

        // 대상 예약 렌더링
        function renderBulkReservations(reservations) {
            const container = document.getElementById('bulkReservationList');
            
            if (!reservations || reservations.length === 0) {
                container.innerHTML = `
                    <p class="text-center text-muted">
                        <i class="fas fa-inbox me-1"></i>조건에 맞는 예약이 없습니다.
                    </p>
                `;
                document.getElementById('bulkCalculateBtn').disabled = true;
                return;
            }

            container.innerHTML = reservations.map(res => `
                <div class="form-check border-bottom py-2">
                    <input class="form-check-input" type="checkbox" value="${res.id}" id="bulk_${res.id}" 
                           onchange="updateBulkSelection()">
                    <label class="form-check-label w-100" for="bulk_${res.id}">
                        <div class="d-flex justify-content-between">
                            <div>
                                <strong>${res.reservation_number || 'N/A'}</strong> - ${res.product_name || '상품명 없음'}
                                <br>
                                <small class="text-muted">
                                    <i class="fas fa-user me-1"></i>${res.korean_name || 'N/A'}
                                    <i class="fas fa-calendar ms-2 me-1"></i>${res.usage_date || 'N/A'}
                                </small>
                            </div>
                            <div class="text-end">
                                <strong class="text-primary">₩${(res.total_amount || 0).toLocaleString()}</strong>
                            </div>
                        </div>
                    </label>
                </div>
            `).join('');

            document.getElementById('bulkCalculateBtn').disabled = false;
        }

        // 선택 업데이트
        function updateBulkSelection() {
            const checkboxes = document.querySelectorAll('#bulkReservationList input[type="checkbox"]:checked');
            selectedReservations = Array.from(checkboxes).map(cb => parseInt(cb.value));
            
            const btn = document.getElementById('bulkCalculateBtn');
            btn.disabled = selectedReservations.length === 0;
            btn.innerHTML = `<i class="fas fa-calculator me-1"></i>정산 계산 실행 (${selectedReservations.length}건)`;
        }

        // 전체 선택
        function selectAllBulkReservations() {
            document.querySelectorAll('#bulkReservationList input[type="checkbox"]').forEach(cb => {
                cb.checked = true;
            });
            updateBulkSelection();
        }

        // 전체 해제
        function deselectAllBulkReservations() {
            document.querySelectorAll('#bulkReservationList input[type="checkbox"]').forEach(cb => {
                cb.checked = false;
            });
            updateBulkSelection();
        }

        // 대량 정산 계산 실행
        async function executeBulkCalculate() {
            if (selectedReservations.length === 0) {
                showAlert('계산할 예약을 선택해주세요.', 'warning');
                return;
            }

            const btn = document.getElementById('bulkCalculateBtn');
            const originalHTML = btn.innerHTML;
            btn.disabled = true;
            btn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>계산 중...';

            try {
                const response = await fetch('/api/settlements/bulk-calculate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        reservation_ids: selectedReservations,
                        platform_id: document.getElementById('bulkPlatformId').value || null,
                        supplier_id: document.getElementById('bulkSupplierId').value || null
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(`${result.data.processed}건의 정산이 계산되었습니다.`, 'success');
                    
                    // 결과 표시
                    const resultDiv = document.getElementById('bulkCalculateResult');
                    const summaryDiv = document.getElementById('bulkResultSummary');
                    
                    summaryDiv.innerHTML = `
                        <p class="mb-1"><strong>처리 완료:</strong> ${result.data.processed}건</p>
                        ${result.data.errors && result.data.errors.length > 0 ? 
                            `<p class="mb-1 text-danger"><strong>실패:</strong> ${result.data.errors.length}건</p>` : 
                            ''}
                        <p class="mb-0"><small>정산 목록 페이지를 새로고침하여 결과를 확인하세요.</small></p>
                    `;
                    resultDiv.style.display = 'block';

                    // 3초 후 목록 새로고침
                    setTimeout(() => {
                        loadSettlements();
                        loadStats();
                    }, 3000);
                } else {
                    showAlert(result.message || '정산 계산에 실패했습니다.', 'danger');
                }
            } catch (error) {
                console.error('대량 정산 계산 실패:', error);
                showAlert('정산 계산 중 오류가 발생했습니다: ' + error.message, 'danger');
            } finally {
                btn.disabled = false;
                btn.innerHTML = originalHTML;
            }
        }

        // ==================== RAG 문서 관리 기능 ====================

        // RAG 문서 목록 로드
        async function loadRagDocuments() {
            try {
                // 서버에 RAG 문서 목록 API가 있다면 사용, 없으면 임시 데이터
                const tbody = document.getElementById('ragDocumentList');
                
                // 임시: 서버 API 호출 (실제로는 /api/rag/documents 같은 엔드포인트 필요)
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center text-muted">
                            <i class="fas fa-inbox me-1"></i>등록된 RAG 문서가 없습니다.
                        </td>
                    </tr>
                `;
                
                // 실제 구현 예시 (주석 처리):
                /*
                const response = await fetch('/api/rag-documents');
                const data = await response.json();
                
                if (data.success && data.data.length > 0) {
                    renderRagDocuments(data.data);
                } else {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center text-muted">
                                <i class="fas fa-inbox me-1"></i>등록된 RAG 문서가 없습니다.
                            </td>
                        </tr>
                    `;
                }
                */
            } catch (error) {
                console.error('RAG 문서 목록 로드 실패:', error);
                showAlert('RAG 문서 목록을 불러오는데 실패했습니다.', 'danger');
            }
        }

        // RAG 문서 렌더링
        function renderRagDocuments(documents) {
            const tbody = document.getElementById('ragDocumentList');
            
            tbody.innerHTML = documents.map(doc => {
                const typeLabels = {
                    'platform_policy': '플랫폼 정책',
                    'supplier_policy': '공급사 정책',
                    'settlement_guide': '정산 가이드',
                    'exchange_rate_policy': '환율 정책',
                    'other': '기타'
                };
                
                return `
                    <tr>
                        <td><span class="badge bg-info">${typeLabels[doc.document_type] || doc.document_type}</span></td>
                        <td><strong>${doc.document_name}</strong></td>
                        <td>${doc.platform_name || doc.supplier_name || '-'}</td>
                        <td><small class="text-muted">${doc.content ? doc.content.substring(0, 50) + '...' : '-'}</small></td>
                        <td><small class="text-muted">${formatDate(doc.created_at)}</small></td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary" onclick="viewRagDocument(${doc.id})">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn btn-outline-danger" onclick="deleteRagDocument(${doc.id})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        // RAG 문서 업로드 폼 제출
        document.addEventListener('DOMContentLoaded', function() {
            const ragForm = document.getElementById('ragUploadForm');
            if (ragForm) {
                ragForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    const formData = {
                        document_type: document.getElementById('ragDocType').value,
                        document_name: document.getElementById('ragDocName').value,
                        content: document.getElementById('ragDocContent').value,
                        platform_id: null, // 필요시 추가
                        supplier_id: null  // 필요시 추가
                    };
                    
                    try {
                        // 임시: 성공 메시지만 표시
                        showAlert('RAG 문서가 등록되었습니다. (서버 API 연동 필요)', 'success');
                        ragForm.reset();
                        
                        // 실제 구현 예시 (주석 처리):
                        /*
                        const response = await fetch('/api/rag-documents', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(formData)
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            showAlert('RAG 문서가 등록되었습니다.', 'success');
                            ragForm.reset();
                            loadRagDocuments();
                        } else {
                            showAlert(result.message || 'RAG 문서 등록에 실패했습니다.', 'danger');
                        }
                        */
                    } catch (error) {
                        console.error('RAG 문서 등록 실패:', error);
                        showAlert('RAG 문서 등록 중 오류가 발생했습니다.', 'danger');
                    }
                });
            }
            
            // RAG 탭 클릭 시 문서 로드
            const ragTab = document.getElementById('rag-tab');
            if (ragTab) {
                ragTab.addEventListener('shown.bs.tab', function() {
                    loadRagDocuments();
                });
            }
        });

        // RAG 문서 상세 보기
        function viewRagDocument(id) {
            showAlert('RAG 문서 상세 보기 기능은 곧 추가됩니다.', 'info');
        }

        // RAG 문서 삭제
        async function deleteRagDocument(id) {
            if (!confirm('이 RAG 문서를 삭제하시겠습니까?')) {
                return;
            }
            
            try {
                showAlert('RAG 문서 삭제 기능은 곧 추가됩니다.', 'info');
                
                // 실제 구현 예시 (주석 처리):
                /*
                const response = await fetch(`/api/rag-documents/${id}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('RAG 문서가 삭제되었습니다.', 'success');
                    loadRagDocuments();
                } else {
                    showAlert(result.message || 'RAG 문서 삭제에 실패했습니다.', 'danger');
                }
                */
            } catch (error) {
                console.error('RAG 문서 삭제 실패:', error);
                showAlert('RAG 문서 삭제 중 오류가 발생했습니다.', 'danger');
            }
        }
    </script>
</body>
</html>
