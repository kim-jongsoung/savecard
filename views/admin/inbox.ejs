<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>인박스 - 괌세이브카드 관리자</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;500;700&display=swap" rel="stylesheet">
</head>
<body>
    <%- include('../partials/navbar', { currentPage: 'inbox', adminUsername: adminUsername }) %>
    
    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2><i class="fas fa-inbox me-2"></i>인박스 - 예약 파싱 및 관리</h2>
                    <div>
                        <button class="btn btn-primary" onclick="openRulesModal()">
                            <i class="fas fa-cogs me-1"></i>파싱 규칙 설정
                        </button>
                    </div>
                </div>

                <!-- 여행사 선택 제거 -->

                <!-- 파싱 영역 -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h6><i class="fas fa-paste me-2"></i>예약 데이터 파싱</h6>
                        <form id="parseForm">
                            <div class="mb-3">
                                <textarea class="form-control" id="reservationText" rows="8" 
                                        placeholder="예약 확인서 내용을 붙여넣으세요..."></textarea>
                            </div>
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-primary" onclick="parseReservation()">
                                    <i class="fas fa-robot me-1"></i>AI 파싱
                                </button>
                                <button type="button" class="btn btn-outline-secondary" onclick="clearForm()">
                                    <i class="fas fa-eraser me-1"></i>초기화
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- 파싱 결과 미리보기 영역 -->
                <div id="previewArea" class="card mb-4" style="display: none;">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0"><i class="fas fa-eye me-2"></i>파싱 결과 미리보기</h6>
                            <div>
                                <span id="confidenceBadge" class="badge"></span>
                                <span id="parsingMethodBadge" class="badge bg-info ms-2"></span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- 예약 정보 섹션 -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="text-primary border-bottom pb-2"><i class="fas fa-info-circle me-2"></i>예약 정보</h6>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">예약번호</label>
                                <input type="text" class="form-control" id="reservation_number" name="reservation_number">
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">업체명</label>
                                <input type="text" class="form-control" id="platform_name" name="platform_name" placeholder="예: KLOOK, 노을투어, 괌투어 등">
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">예약 상태</label>
                                <select class="form-control" id="payment_status" name="payment_status">
                                    <option value="pending" selected>대기중 (신규예약)</option>
                                    <option value="in_progress">수배중 (현지수배)</option>
                                    <option value="confirmed">확정 (수배완료)</option>
                                    <option value="cancelled">예약취소</option>
                                    <option value="refunded">환불완료</option>
                                </select>
                            </div>
                            <div class="col-md-8 mb-3">
                                <label class="form-label">상품명</label>
                                <input type="text" class="form-control" id="product_name" name="product_name" onchange="matchVendorByProductOnChange()">
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">패키지 타입 (상품 옵션)</label>
                                <input type="text" class="form-control" id="package_type" name="package_type" placeholder="예: 1차 (선셋 & 별빛투어), 오전 투어, 픽업 포함 등">
                            </div>
                            <div class="col-md-12 mb-3">
                                <label class="form-label">
                                    <i class="bi bi-building me-1"></i>수배업체 
                                    <span class="badge bg-info" id="vendor-match-badge" style="display: none;">자동 매칭됨</span>
                                </label>
                                <select class="form-control" id="vendor_id" name="vendor_id">
                                    <option value="">미지정</option>
                                </select>
                                <small class="text-muted">상품명을 입력하면 자동으로 매칭됩니다. 직접 선택도 가능합니다.</small>
                            </div>
                        </div>

                        <!-- 일정 정보 섹션 -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="text-primary border-bottom pb-2"><i class="fas fa-calendar me-2"></i>일정 정보</h6>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">이용일</label>
                                <input type="date" class="form-control" id="tour_date" name="tour_date">
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">이용시간</label>
                                <input type="time" class="form-control" id="tour_time" name="tour_time">
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">예약일시</label>
                                <input type="datetime-local" class="form-control" id="booking_date" name="booking_date">
                            </div>
                        </div>

                        <!-- 예약자 정보 섹션 -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="text-primary border-bottom pb-2"><i class="fas fa-user me-2"></i>예약자 정보</h6>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label class="form-label">한글명</label>
                                <input type="text" class="form-control" id="customer_name" name="customer_name">
                            </div>
                            <div class="col-md-3 mb-3">
                                <label class="form-label">영문 성</label>
                                <input type="text" class="form-control" id="customer_lastname" name="customer_lastname">
                            </div>
                            <div class="col-md-3 mb-3">
                                <label class="form-label">영문 이름</label>
                                <input type="text" class="form-control" id="customer_firstname" name="customer_firstname">
                            </div>
                            <div class="col-md-3 mb-3">
                                <label class="form-label">전화번호</label>
                                <input type="tel" class="form-control" id="customer_phone" name="customer_phone">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">이메일</label>
                                <input type="email" class="form-control" id="customer_email" name="customer_email">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">카카오ID</label>
                                <input type="text" class="form-control" id="kakao_id" name="kakao_id">
                            </div>
                        </div>

                        <!-- 인원 및 금액 정보 섹션 -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="text-primary border-bottom pb-2"><i class="fas fa-users me-2"></i>인원 및 금액 정보</h6>
                            </div>
                            <div class="col-md-2 mb-3">
                                <label class="form-label">성인 수</label>
                                <input type="number" class="form-control" id="adult_count" name="adult_count" min="0" onchange="calculateTotal()">
                            </div>
                            <div class="col-md-2 mb-3">
                                <label class="form-label">성인 단가</label>
                                <input type="number" class="form-control" id="adult_price" name="adult_price" min="0" step="0.01" onchange="calculateTotal()">
                            </div>
                            <div class="col-md-2 mb-3">
                                <label class="form-label">아동 수</label>
                                <input type="number" class="form-control" id="child_count" name="child_count" min="0" onchange="calculateTotal()">
                            </div>
                            <div class="col-md-2 mb-3">
                                <label class="form-label">아동 단가</label>
                                <input type="number" class="form-control" id="child_price" name="child_price" min="0" step="0.01" onchange="calculateTotal()">
                            </div>
                            <div class="col-md-2 mb-3">
                                <label class="form-label">유아 수</label>
                                <input type="number" class="form-control" id="infant_count" name="infant_count" min="0" onchange="calculateTotal()">
                            </div>
                            <div class="col-md-2 mb-3">
                                <label class="form-label">유아 단가</label>
                                <input type="number" class="form-control" id="infant_price" name="infant_price" min="0" step="0.01" onchange="calculateTotal()">
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">총 인원</label>
                                <input type="number" class="form-control" id="total_guests" name="total_guests" min="0" readonly style="background-color: #f8f9fa;">
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">총 금액</label>
                                <input type="number" class="form-control" id="total_amount" name="total_amount" step="0.01" readonly style="background-color: #f8f9fa;">
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">계산식</label>
                                <input type="text" class="form-control" id="calculation_formula" readonly style="background-color: #f8f9fa; font-size: 0.9em;">
                            </div>
                        </div>

                        <!-- 메모 섹션 -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="text-primary border-bottom pb-2"><i class="fas fa-sticky-note me-2"></i>메모</h6>
                            </div>
                            <div class="col-12 mb-3">
                                <label class="form-label">특이사항 및 요청사항</label>
                                <textarea class="form-control" id="special_requests" name="special_requests" rows="4"></textarea>
                            </div>
                        </div>

                        <!-- 액션 버튼 -->
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-success" onclick="saveReservation()">
                                <i class="fas fa-save me-1"></i>예약 저장
                            </button>
                            <button type="button" class="btn btn-outline-secondary" onclick="editRawData()">
                                <i class="fas fa-edit me-1"></i>다시 수정
                            </button>
                            <button type="button" class="btn btn-outline-danger" onclick="clearPreview()">
                                <i class="fas fa-times me-1"></i>취소
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 자동 설정 규칙 모달 -->
    <div class="modal fade" id="rulesModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-cogs me-2"></i>파싱 규칙 설정</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <!-- 기본 규칙 제거 - 사용자 정의 규칙만 사용 -->
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>규칙 설정 안내</strong><br>
                        아래에서 직접 설정한 규칙만 파싱 시 적용됩니다. 
                        상황에 맞게 필요한 규칙을 추가하여 사용하세요.
                    </div>
                    
                    <hr>
                    
                    <!-- 사용자 정의 규칙 관리 -->
                    <div class="mb-4">
                        <h6><i class="fas fa-user-cog me-2"></i>사용자 정의 규칙</h6>
                        
                        <!-- 새 규칙 추가 폼 -->
                        <div class="card mb-3">
                            <div class="card-header">
                                <h6 class="mb-0"><i class="fas fa-plus me-2"></i>새 규칙 추가</h6>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-3">
                                        <label class="form-label">조건 유형</label>
                                        <select class="form-select" id="newConditionType">
                                            <option value="product_exact">상품명 정확히 일치</option>
                                            <option value="product_contains">상품명 포함</option>
                                            <option value="platform_exact">업체명 정확히 일치</option>
                                            <option value="platform_contains">업체명 포함</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">상품명/업체명</label>
                                        <input type="text" class="form-control" id="newKeyword" placeholder="예: 괌 돌핀투어 (스노클링 포함)">
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">변경 필드</label>
                                        <select class="form-select" id="newFieldType" onchange="updateValueOptions()">
                                            <option value="">-- 필드 선택 --</option>
                                            <option value="payment_status">예약 상태</option>
                                            <option value="adult_count">성인수 (people_adult)</option>
                                            <option value="child_count">아동수 (people_child)</option>
                                            <option value="infant_count">유아수 (people_infant)</option>
                                            <option value="total_amount">총 금액 (total_amount)</option>
                                            <option value="adult_price">성인 단가 (adult_unit_price)</option>
                                            <option value="child_price">아동 단가 (child_unit_price)</option>
                                            <option value="platform_name">플랫폼명 (platform_name)</option>
                                            <option value="product_name">상품명 (product_name)</option>
                                            <option value="package_type">패키지 타입 (package_type)</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">설정값</label>
                                        <select class="form-select" id="newValue" onchange="handleValueChange()">
                                            <option value="">-- 먼저 필드를 선택하세요 --</option>
                                        </select>
                                        <input type="text" class="form-control mt-2" id="customValue" placeholder="직접 입력..." style="display: none;">
                                    </div>
                                </div>
                                <div class="row mt-2">
                                    <div class="col-md-6">
                                        <label class="form-label">설명</label>
                                        <input type="text" class="form-control" id="newDescription" placeholder="예: 괌 돌핀투어는 바로 확정 처리">
                                    </div>
                                    <div class="col-md-6 d-flex align-items-end">
                                        <button class="btn btn-success" onclick="addParsingRule()">
                                            <i class="fas fa-plus me-1"></i>규칙 추가
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- 기존 규칙 목록 -->
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0"><i class="fas fa-list me-2"></i>설정된 규칙 목록</h6>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-sm" id="parsingRulesTable">
                                        <thead>
                                            <tr>
                                                <th>조건</th>
                                                <th>키워드</th>
                                                <th>변경 필드</th>
                                                <th>설정값</th>
                                                <th>설명</th>
                                                <th>작업</th>
                                            </tr>
                                        </thead>
                                        <tbody id="parsingRulesBody">
                                            <!-- 기본 규칙들 -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="alert alert-info">
                        <h6><i class="fas fa-info-circle me-2"></i>파싱 보정 규칙 작동 방식</h6>
                        <ul class="mb-0">
                            <li><strong>조건 매칭</strong>: 상품명/업체명에 키워드가 포함되면 자동 적용</li>
                            <li><strong>필드 변경</strong>: 파싱 후 지정된 필드값을 자동으로 변경</li>
                            <li><strong>우선순위</strong>: 위에서부터 순서대로 적용</li>
                            <li><strong>실시간 적용</strong>: 파싱 즉시 규칙이 적용됨</li>
                        </ul>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                    <button type="button" class="btn btn-info" onclick="exportRules()">
                        <i class="fas fa-download me-1"></i>규칙 내보내기
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let parsedData = null;

        // 예약 파싱 (여행사 선택 제거)
        async function parseReservation() {
            const text = document.getElementById('reservationText').value.trim();
            
            if (!text) {
                alert('예약 데이터를 입력해주세요.');
                return;
            }

            try {
                const response = await fetch('/admin/reservations/parse', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        reservationText: text
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    parsedData = result.parsed_data;
                    await showPreview(result);
                } else {
                    alert('파싱 실패: ' + result.message);
                }
            } catch (error) {
                console.error('파싱 오류:', error);
                alert('파싱 중 오류가 발생했습니다.');
            }
        }

        // 미리보기 영역 표시
        async function showPreview(result) {
            const previewArea = document.getElementById('previewArea');
            const confidenceBadge = document.getElementById('confidenceBadge');
            const parsingMethodBadge = document.getElementById('parsingMethodBadge');
            
            // 신뢰도 배지
            const confidence = result.confidence || 0.5;
            confidenceBadge.textContent = `신뢰도 ${Math.round(confidence * 100)}%`;
            confidenceBadge.className = confidence > 0.8 ? 'badge bg-success' : 
                                      confidence > 0.6 ? 'badge bg-warning' : 'badge bg-danger';

            // 파싱 방법 배지
            parsingMethodBadge.textContent = result.parsing_method || 'OpenAI';

            // 폼에 데이터 채우기 (수배업체 매칭 포함)
            await fillPreviewForm(parsedData);
            
            previewArea.style.display = 'block';
            previewArea.scrollIntoView({ behavior: 'smooth' });
        }

        // 미리보기 폼에 데이터 채우기
        async function fillPreviewForm(data) {
            console.log('📋 파싱된 데이터:', data);
            
            // 업체명 추출 함수 (판매채널/업체명/플랫폼 중 우선순위)
            function extractCompanyName(data) {
                // 우선순위: platform_name > channel > company
                const candidates = [
                    data.platform_name,
                    data.channel, 
                    data.company,
                    data.vendor,
                    data.agency
                ];
                
                for (let name of candidates) {
                    if (name && name.trim() && name !== 'OTHER' && name !== 'UNKNOWN') {
                        // 바스코/럭스파인드 제외
                        const excludeCompanies = ['바스코', 'vasco', 'VASCO', '럭스파인드', 'luxfind', 'LUXFIND'];
                        const lowerName = name.toLowerCase();
                        
                        let isExcluded = false;
                        for (let company of excludeCompanies) {
                            if (lowerName.includes(company.toLowerCase())) {
                                isExcluded = true;
                                break;
                            }
                        }
                        
                        if (!isExcluded) {
                            return name.trim();
                        }
                    }
                }
                return '';
            }
            
            // 날짜 형식 변환 함수
            function formatDate(dateStr) {
                if (!dateStr) return '';
                try {
                    // 다양한 날짜 형식 처리
                    let date = new Date(dateStr);
                    if (isNaN(date.getTime())) {
                        // 한국어 날짜 형식 처리 (예: 2025-09-13)
                        const match = dateStr.match(/(\d{4})-(\d{1,2})-(\d{1,2})/);
                        if (match) {
                            date = new Date(match[1], match[2] - 1, match[3]);
                        }
                    }
                    return date.toISOString().split('T')[0];
                } catch (e) {
                    return '';
                }
            }
            
            // 시간 형식 변환 함수
            function formatTime(timeStr) {
                if (!timeStr) return '';
                try {
                    const match = timeStr.match(/(\d{1,2}):(\d{2})/);
                    if (match) {
                        return `${match[1].padStart(2, '0')}:${match[2]}`;
                    }
                } catch (e) {
                    return '';
                }
                return '';
            }
            
            // 날짜시간 형식 변환 함수
            function formatDateTime(dateTimeStr) {
                if (!dateTimeStr) return '';
                try {
                    const date = new Date(dateTimeStr);
                    if (!isNaN(date.getTime())) {
                        return date.toISOString().slice(0, 16);
                    }
                } catch (e) {
                    return '';
                }
                return '';
            }

            // 모든 필드 매핑 (AI 파서 필드명 → 폼 필드명)
            const fieldMappings = {
                'reservation_number': data.reservation_number || data.booking_reference || data.order_number || '',
                'platform_name': extractCompanyName(data),
                'payment_status': 'pending', // 기본값: 대기중 (신규예약)
                'product_name': data.product_name || data.tour_name || data.service_name || '',
                'package_type': data.package_type || data.package || data.option || '',
                'tour_date': formatDate(data.usage_date || data.tour_date || data.date || data.service_date || ''),
                'tour_time': formatTime(data.usage_time || data.tour_time || data.time || data.service_time || ''),
                'booking_date': formatDateTime(data.reservation_datetime || data.booking_date || data.created_at || data.reservation_date || ''),
                'customer_name': data.korean_name || data.customer_name || data.name || data.guest_name || '',
                'customer_lastname': data.english_last_name || data.customer_lastname || data.last_name || data.surname || '',
                'customer_firstname': data.english_first_name || data.customer_firstname || data.first_name || data.given_name || '',
                'customer_phone': data.phone || data.customer_phone || data.mobile || data.contact || '',
                'customer_email': data.email || data.customer_email || '',
                'kakao_id': data.kakao_id || data.kakao || data.kakao_talk || data.kakaotalk || '',
                'adult_count': parseInt(data.people_adult || data.adult_count || data.adults || data.adult || 0),
                'child_count': parseInt(data.people_child || data.child_count || data.children || data.child || 0),
                'infant_count': parseInt(data.people_infant || data.infant_count || data.infants || data.infant || 0),
                'adult_price': parseFloat(data.adult_unit_price || data.adult_price || data.adult_amount || 0),
                'child_price': parseFloat(data.child_unit_price || data.child_price || data.child_amount || 0),
                'infant_price': parseFloat(data.infant_price || data.infant_amount || 0),
                'special_requests': data.memo || data.special_requests || data.notes || data.remarks || ''
            };

            // 1단계: 폼 필드에 기본값 설정
            Object.entries(fieldMappings).forEach(([fieldId, value]) => {
                const element = document.getElementById(fieldId);
                if (element) {
                    element.value = value || '';
                    
                    // 빈 값이거나 null인 경우 경고 스타일 적용
                    if (!value || value === 'null' || value === '-' || value === 0) {
                        element.classList.add('border-warning');
                        element.style.backgroundColor = '#fff3cd';
                    } else {
                        element.classList.remove('border-warning');
                        element.style.backgroundColor = '';
                    }
                }
            });

            // 2단계: 특별 설정 규칙 적용
            applySpecialRules(fieldMappings);

            // 3단계: 사용자 정의 파싱 규칙 적용 (상품명/업체명 기반 상태 변경)
            applyCustomParsingRules(fieldMappings);
            
            // 4단계: 수배업체 자동 매칭 (비동기 처리)
            await matchVendorByProduct(fieldMappings.product_name);

            // 기본적으로는 "대기중 (신규예약)" 상태 (특별 규칙이 없는 경우)
            const paymentStatusElement = document.getElementById('payment_status');
            if (paymentStatusElement && paymentStatusElement.value === 'pending') {
                paymentStatusElement.classList.remove('border-warning');
                paymentStatusElement.style.backgroundColor = '#fff3cd'; // 대기중 색상으로 강조
            }

            // 총 인원 및 금액 계산
            calculateTotal();
            
            // 💰 통화 표시 업데이트
            updateCurrencyDisplay();
        }

        // 특별 설정 규칙 적용
        function applySpecialRules(fieldMappings) {
            const productName = fieldMappings.product_name || '';
            const platformName = fieldMappings.platform_name || '';
            const memo = fieldMappings.special_requests || '';
            
            // 🎯 상품별 특별 규칙
            const productRules = {
                // 롱혼스테이크 하우스 - 수배 불필요, 바로 확정
                '롱혼스테이크': { status: 'confirmed', reason: '수배 불필요 상품' },
                '롱혼': { status: 'confirmed', reason: '수배 불필요 상품' },
                'longhorn': { status: 'confirmed', reason: '수배 불필요 상품' },
                
                // 기타 수배 불필요 상품들
                '레스토랑': { status: 'confirmed', reason: '수배 불필요 상품' },
                '식당': { status: 'confirmed', reason: '수배 불필요 상품' },
                '맛집': { status: 'confirmed', reason: '수배 불필요 상품' },
                '카페': { status: 'confirmed', reason: '수배 불필요 상품' }
            };

            // 🎯 업체별 특별 규칙
            const platformRules = {
                '투어비스': { 
                    countRule: 'booking_to_people', // 예약 건수 = 인원수
                    reason: '투어비스 예약 건수 = 인원수'
                }
            };

            // 상품명 기반 규칙 적용
            Object.keys(productRules).forEach(keyword => {
                if (productName.toLowerCase().includes(keyword.toLowerCase())) {
                    const rule = productRules[keyword];
                    
                    if (rule.status) {
                        const statusElement = document.getElementById('payment_status');
                        if (statusElement) {
                            statusElement.value = rule.status;
                            statusElement.style.backgroundColor = rule.status === 'confirmed' ? '#d1ecf1' : '#fff3cd';
                            
                            // 규칙 적용 알림 표시
                            showRuleNotification(`🎯 자동 설정: ${rule.reason} → ${getStatusText(rule.status)}`);
                        }
                    }
                }
            });

            // 업체별 규칙 적용
            Object.keys(platformRules).forEach(platform => {
                if (platformName.toLowerCase().includes(platform.toLowerCase())) {
                    const rule = platformRules[platform];
                    
                    if (rule.countRule === 'booking_to_people') {
                        // 메모나 상품명에서 숫자 추출하여 인원수로 설정
                        const numbers = extractNumbers(memo + ' ' + productName);
                        if (numbers.length > 0) {
                            const adultCountElement = document.getElementById('adult_count');
                            if (adultCountElement && !adultCountElement.value) {
                                adultCountElement.value = numbers[0];
                                adultCountElement.style.backgroundColor = '#d1ecf1';
                                
                                showRuleNotification(`🎯 자동 설정: ${rule.reason} → 성인 ${numbers[0]}명`);
                            }
                        }
                    }
                }
            });
        }

        // 숫자 추출 함수
        function extractNumbers(text) {
            const matches = text.match(/\d+/g);
            return matches ? matches.map(num => parseInt(num)).filter(num => num > 0 && num <= 50) : [];
        }

        // 규칙 적용 알림 표시
        function showRuleNotification(message) {
            // 기존 알림 제거
            const existingNotification = document.querySelector('.rule-notification');
            if (existingNotification) {
                existingNotification.remove();
            }

            // 새 알림 생성
            const notification = document.createElement('div');
            notification.className = 'rule-notification alert alert-info alert-dismissible fade show mt-2';
            notification.style.cssText = 'position: relative; z-index: 1000;';
            notification.innerHTML = `
                <i class="fas fa-magic me-2"></i>${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            // 미리보기 영역 상단에 추가
            const previewArea = document.getElementById('previewArea');
            previewArea.insertBefore(notification, previewArea.firstChild);

            // 5초 후 자동 제거
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }

        // 자동 설정 규칙 모달 열기
        function openRulesModal() {
            updateParsingRulesTable(); // 기존 규칙들 표시
            const modal = new bootstrap.Modal(document.getElementById('rulesModal'));
            modal.show();
        }

        // 파싱 보정 규칙 저장소 (로컬스토리지 사용)
        let customParsingRules = JSON.parse(localStorage.getItem('customParsingRules') || '[]');

        // 파싱 보정 규칙 추가
        function addParsingRule() {
            const conditionType = document.getElementById('newConditionType').value;
            const keyword = document.getElementById('newKeyword').value.trim();
            const fieldType = document.getElementById('newFieldType').value;
            const valueSelect = document.getElementById('newValue');
            const customInput = document.getElementById('customValue');
            const description = document.getElementById('newDescription').value.trim();

            // 설정값 결정 (드롭다운 또는 직접 입력)
            let value = '';
            if (valueSelect.value === 'CUSTOM') {
                value = customInput.value.trim();
            } else {
                value = valueSelect.value.trim();
            }

            if (!keyword || !fieldType || !value) {
                alert('키워드, 변경 필드, 설정값을 모두 입력해주세요.');
                return;
            }

            const newRule = {
                id: Date.now(),
                conditionType,
                keyword,
                fieldType,
                value,
                description: description || `${keyword} → ${fieldType} = ${value}`
            };

            customParsingRules.push(newRule);
            localStorage.setItem('customParsingRules', JSON.stringify(customParsingRules));
            
            // 폼 초기화
            document.getElementById('newConditionType').value = 'product';
            document.getElementById('newKeyword').value = '';
            document.getElementById('newFieldType').value = '';
            document.getElementById('newValue').innerHTML = '<option value="">-- 먼저 필드를 선택하세요 --</option>';
            document.getElementById('customValue').value = '';
            document.getElementById('customValue').style.display = 'none';
            document.getElementById('newDescription').value = '';
            
            // 테이블 업데이트
            updateParsingRulesTable();
            
            showRuleNotification(`✅ 새 규칙 추가됨: ${newRule.description}`);
        }

        // 파싱 보정 규칙 삭제
        function deleteParsingRule(ruleId) {
            if (confirm('이 규칙을 삭제하시겠습니까?')) {
                customParsingRules = customParsingRules.filter(rule => rule.id !== ruleId);
                localStorage.setItem('customParsingRules', JSON.stringify(customParsingRules));
                updateParsingRulesTable();
                showRuleNotification('🗑️ 규칙이 삭제되었습니다.');
            }
        }

        // 조건 유형 표시명 함수
        function getConditionTypeText(conditionType) {
            const typeMap = {
                'product_exact': '상품명 정확히 일치',
                'product_contains': '상품명 포함',
                'platform_exact': '업체명 정확히 일치', 
                'platform_contains': '업체명 포함',
                'product': '상품명 포함', // 레거시
                'platform': '업체명 포함' // 레거시
            };
            return typeMap[conditionType] || conditionType;
        }

        // 파싱 보정 규칙 테이블 업데이트
        function updateParsingRulesTable() {
            const tbody = document.getElementById('parsingRulesBody');
            tbody.innerHTML = customParsingRules.map(rule => `
                <tr>
                    <td><span class="badge bg-${rule.conditionType.includes('product') ? 'primary' : 'info'}">${getConditionTypeText(rule.conditionType)}</span></td>
                    <td><code>${rule.keyword}</code></td>
                    <td>${getFieldDisplayName(rule.fieldType)}</td>
                    <td><strong>${rule.value}</strong></td>
                    <td>${rule.description}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteParsingRule(${rule.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        // 필드 표시명 변환
        function getFieldDisplayName(fieldType) {
            const fieldNames = {
                'payment_status': '예약 상태',
                'adult_count': '성인수',
                'child_count': '아동수',
                'infant_count': '유아수',
                'total_amount': '총 금액',
                'adult_price': '성인 단가',
                'child_price': '아동 단가',
                'infant_price': '유아 단가',
                'platform_name': '업체명',
                'product_name': '상품명'
            };
            return fieldNames[fieldType] || fieldType;
        }

        // 사용자 정의 파싱 보정 규칙 적용
        function applyCustomParsingRules(fieldMappings) {
            const productName = (fieldMappings.product_name || '').trim();
            const platformName = (fieldMappings.platform_name || '').trim();
            
            customParsingRules.forEach(rule => {
                let shouldApply = false;
                const keyword = rule.keyword.trim();
                
                // 정확한 매칭 vs 포함 매칭
                if (rule.conditionType === 'product_exact') {
                    shouldApply = productName.toLowerCase() === keyword.toLowerCase();
                } else if (rule.conditionType === 'product_contains') {
                    shouldApply = productName.toLowerCase().includes(keyword.toLowerCase());
                } else if (rule.conditionType === 'platform_exact') {
                    shouldApply = platformName.toLowerCase() === keyword.toLowerCase();
                } else if (rule.conditionType === 'platform_contains') {
                    shouldApply = platformName.toLowerCase().includes(keyword.toLowerCase());
                }
                
                // 레거시 지원 (기존 규칙들)
                else if (rule.conditionType === 'product') {
                    shouldApply = productName.toLowerCase().includes(keyword.toLowerCase());
                } else if (rule.conditionType === 'platform') {
                    shouldApply = platformName.toLowerCase().includes(keyword.toLowerCase());
                }
                
                if (shouldApply) {
                    const element = document.getElementById(rule.fieldType);
                    if (element) {
                        element.value = rule.value;
                        element.style.backgroundColor = '#e7f3ff';
                        element.style.border = '2px solid #007bff';
                        
                        // 예약 상태 변경 시 시각적 피드백
                        if (rule.fieldType === 'payment_status') {
                            const statusColors = {
                                'pending': '#fff3cd',
                                'in_progress': '#cff4fc', 
                                'confirmed': '#d1ecf1',
                                'cancelled': '#f8d7da'
                            };
                            element.style.backgroundColor = statusColors[rule.value] || '#e7f3ff';
                        }
                        
                        console.log(`🎯 파싱 규칙 적용: ${rule.description} (${rule.fieldType}: ${rule.value})`);
                        showRuleNotification(`🎯 파싱 규칙 적용: ${rule.description}`);
                    }
                }
            });
        }

        // 규칙 내보내기
        function exportRules() {
            const data = JSON.stringify(customParsingRules, null, 2);
            const blob = new Blob([data], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `parsing-rules-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showRuleNotification('📁 규칙이 JSON 파일로 내보내졌습니다.');
        }

        // 필드 타입에 따른 설정값 옵션 업데이트
        function updateValueOptions() {
            const fieldType = document.getElementById('newFieldType').value;
            const valueSelect = document.getElementById('newValue');
            
            // 기존 옵션 제거
            valueSelect.innerHTML = '';
            
            // 필드 타입별 옵션 정의
            const valueOptions = {
                'payment_status': [
                    { value: 'pending', text: '대기중 (신규예약)' },
                    { value: 'in_progress', text: '수배중 (현지수배)' },
                    { value: 'confirmed', text: '확정 (수배완료)' },
                    { value: 'cancelled', text: '예약취소' },
                    { value: 'refunded', text: '환불완료' }
                ],
                'adult_count': [
                    { value: '1', text: '1명' },
                    { value: '2', text: '2명' },
                    { value: '3', text: '3명' },
                    { value: '4', text: '4명' },
                    { value: '5', text: '5명' },
                    { value: '6', text: '6명' },
                    { value: '7', text: '7명' },
                    { value: '8', text: '8명' }
                ],
                'child_count': [
                    { value: '0', text: '0명' },
                    { value: '1', text: '1명' },
                    { value: '2', text: '2명' },
                    { value: '3', text: '3명' },
                    { value: '4', text: '4명' }
                ],
                'infant_count': [
                    { value: '0', text: '0명' },
                    { value: '1', text: '1명' },
                    { value: '2', text: '2명' }
                ],
                'total_amount': [
                    { value: '50', text: '$50' },
                    { value: '80', text: '$80' },
                    { value: '100', text: '$100' },
                    { value: '120', text: '$120' },
                    { value: '150', text: '$150' },
                    { value: '200', text: '$200' }
                ],
                'adult_price': [
                    { value: '50', text: '$50' },
                    { value: '60', text: '$60' },
                    { value: '70', text: '$70' },
                    { value: '80', text: '$80' },
                    { value: '90', text: '$90' },
                    { value: '100', text: '$100' }
                ],
                'child_price': [
                    { value: '30', text: '$30' },
                    { value: '40', text: '$40' },
                    { value: '50', text: '$50' },
                    { value: '60', text: '$60' }
                ],
                'infant_price': [
                    { value: '0', text: '$0 (무료)' },
                    { value: '10', text: '$10' },
                    { value: '20', text: '$20' }
                ],
                'platform_name': [
                    { value: 'KLOOK', text: 'KLOOK' },
                    { value: '투어비스', text: '투어비스' },
                    { value: '노을투어', text: '노을투어' },
                    { value: '괌투어', text: '괌투어' },
                    { value: '하나투어', text: '하나투어' },
                    { value: '모두투어', text: '모두투어' },
                    { value: 'custom', text: '직접 입력' }
                ],
                'product_name': [
                    { value: '괌 별빛투어', text: '괌 별빛투어' },
                    { value: '괌 돌핀투어', text: '괌 돌핀투어' },
                    { value: '괌 스노클링', text: '괌 스노클링' },
                    { value: '괌 선셋크루즈', text: '괌 선셋크루즈' },
                    { value: '괌 시티투어', text: '괌 시티투어' },
                    { value: '괌 오션뷰', text: '괌 오션뷰' },
                    { value: 'custom', text: '직접 입력' }
                ],
                'package_type': [
                    { value: '1차 (선셋 & 별빛투어)', text: '1차 (선셋 & 별빛투어)' },
                    { value: '2차 (별빛투어)', text: '2차 (별빛투어)' },
                    { value: '오전 투어', text: '오전 투어' },
                    { value: '오후 투어', text: '오후 투어' },
                    { value: '픽업 포함', text: '픽업 포함' },
                    { value: '픽업 미포함', text: '픽업 미포함' },
                    { value: 'custom', text: '직접 입력' }
                ]
            };
            
            if (fieldType && valueOptions[fieldType]) {
                // 기본 옵션 추가
                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.textContent = '-- 값 선택 --';
                valueSelect.appendChild(defaultOption);
                
                // 해당 필드의 옵션들 추가
                valueOptions[fieldType].forEach(option => {
                    const optionElement = document.createElement('option');
                    optionElement.value = option.value;
                    optionElement.textContent = option.text;
                    valueSelect.appendChild(optionElement);
                });
                
                // 직접 입력 옵션 추가
                const customOption = document.createElement('option');
                customOption.value = 'CUSTOM';
                customOption.textContent = '🖊️ 직접 입력...';
                valueSelect.appendChild(customOption);
                
            } else {
                // 필드가 선택되지 않은 경우
                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.textContent = '-- 먼저 필드를 선택하세요 --';
                valueSelect.appendChild(defaultOption);
            }
        }

        // 설정값 변경 처리 (직접 입력 모드)
        function handleValueChange() {
            const valueSelect = document.getElementById('newValue');
            const customInput = document.getElementById('customValue');
            
            if (valueSelect.value === 'CUSTOM') {
                customInput.style.display = 'block';
                customInput.focus();
            } else {
                customInput.style.display = 'none';
                customInput.value = '';
            }
        }

        // 새 규칙 추가 (기존 함수 대체)
        function addCustomRule() {
            // 모달이 이미 열려있으므로 아무것도 하지 않음
        }

        // 전체 초기화
        function clearAll() {
            if (confirm('전체 초기화하시겠습니까?\n\n초기화 내용:\n- 파싱 입력 텍스트\n- 미리보기 영역\n- 알림 메시지\n- 파싱 데이터')) {
                // 1. 파싱 입력 텍스트 초기화
                document.getElementById('reservationText').value = '';
                
                // 2. 미리보기 영역 초기화
                const previewArea = document.getElementById('previewArea');
                previewArea.innerHTML = '<p class="text-muted">파싱된 데이터가 여기에 표시됩니다.</p>';
                
                // 3. 파싱 데이터 초기화
                parsedData = null;
                
                // 4. 모든 알림 제거
                const notifications = document.querySelectorAll('.rule-notification, .alert');
                notifications.forEach(notification => {
                    if (notification.parentNode) {
                        notification.remove();
                    }
                });
                
                // 5. 성공 메시지
                const successAlert = document.createElement('div');
                successAlert.className = 'alert alert-success alert-dismissible fade show mt-2';
                successAlert.innerHTML = `
                    <i class="fas fa-check-circle me-2"></i>전체 초기화가 완료되었습니다.
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                
                const container = document.querySelector('.container-fluid');
                container.insertBefore(successAlert, container.firstChild.nextSibling);
                
                // 3초 후 성공 메시지 제거
                setTimeout(() => {
                    if (successAlert.parentNode) {
                        successAlert.remove();
                    }
                }, 3000);
                
                console.log('🧹 전체 초기화 완료');
            }
        }

        // 총 인원 및 금액 계산
        function calculateTotal() {
            const adultCount = parseInt(document.getElementById('adult_count').value) || 0;
            const childCount = parseInt(document.getElementById('child_count').value) || 0;
            const infantCount = parseInt(document.getElementById('infant_count').value) || 0;
            
            const adultPrice = parseFloat(document.getElementById('adult_price').value) || 0;
            const childPrice = parseFloat(document.getElementById('child_price').value) || 0;
            const infantPrice = parseFloat(document.getElementById('infant_price').value) || 0;
            
            // 총 인원 계산
            const totalGuests = adultCount + childCount + infantCount;
            document.getElementById('total_guests').value = totalGuests;
            
            // 총 금액 계산
            const adultTotal = adultCount * adultPrice;
            const childTotal = childCount * childPrice;
            const infantTotal = infantCount * infantPrice;
            const totalAmount = adultTotal + childTotal + infantTotal;
            
            document.getElementById('total_amount').value = totalAmount.toFixed(2);
            
            // 💰 금액 단위 자동 판별 (999 이하=달러, 1000 이상=원화)
            const currencyInfo = determineCurrency(totalAmount);
            const adultCurrency = determineCurrency(adultPrice);
            const childCurrency = determineCurrency(childPrice);
            const infantCurrency = determineCurrency(infantPrice);
            
            // 계산식 표시 (통화 기호 포함)
            let formula = [];
            if (adultCount > 0) {
                const adultDisplay = adultCurrency.currency === 'USD' ? 
                    `$${adultPrice.toFixed(2)}` : `₩${parseInt(adultPrice).toLocaleString('ko-KR')}`;
                formula.push(`성인 ${adultCount}명×${adultDisplay}`);
            }
            if (childCount > 0) {
                const childDisplay = childCurrency.currency === 'USD' ? 
                    `$${childPrice.toFixed(2)}` : `₩${parseInt(childPrice).toLocaleString('ko-KR')}`;
                formula.push(`아동 ${childCount}명×${childDisplay}`);
            }
            if (infantCount > 0) {
                const infantDisplay = infantCurrency.currency === 'USD' ? 
                    `$${infantPrice.toFixed(2)}` : `₩${parseInt(infantPrice).toLocaleString('ko-KR')}`;
                formula.push(`유아 ${infantCount}명×${infantDisplay}`);
            }
            
            // 총 금액 표시 (통화 기호 포함)
            const totalDisplay = currencyInfo.currency === 'USD' ? 
                `$${totalAmount.toFixed(2)}` : `₩${parseInt(totalAmount).toLocaleString('ko-KR')}`;
            
            const formulaText = formula.length > 0 ? formula.join(' + ') + ` = ${totalDisplay}` : '';
            document.getElementById('calculation_formula').value = formulaText;
            
            // 💰 통화 표시 업데이트
            updateCurrencyDisplay();
        }

        // 수배업체 목록 로드
        async function loadVendors() {
            try {
                const response = await fetch('/api/vendors');
                const data = await response.json();
                
                if (data.success) {
                    const vendorSelect = document.getElementById('vendor_id');
                    vendorSelect.innerHTML = '<option value="">미지정</option>';
                    
                    data.vendors.forEach(vendor => {
                        if (vendor.is_active) {
                            const option = document.createElement('option');
                            option.value = vendor.id;
                            option.textContent = vendor.vendor_name;
                            vendorSelect.appendChild(option);
                        }
                    });
                    
                    console.log('✅ 수배업체 목록 로드 완료:', data.vendors.length);
                }
            } catch (error) {
                console.error('❌ 수배업체 목록 로드 실패:', error);
            }
        }

        // 상품명 입력 시 수배업체 자동 매칭 (이벤트 핸들러용)
        async function matchVendorByProductOnChange() {
            const productName = document.getElementById('product_name').value;
            if (productName && productName.trim() !== '') {
                await matchVendorByProduct(productName);
            }
        }

        // 인원 수 및 가격 변경 시 재계산 - 페이지 로드 후 이벤트 리스너 추가
        document.addEventListener('DOMContentLoaded', function() {
            // 수배업체 목록 로드
            loadVendors();
            
            ['adult_count', 'child_count', 'infant_count', 'adult_price', 'child_price', 'infant_price'].forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('input', calculateTotal);
                    element.addEventListener('change', calculateTotal);
                }
            });
        });

        // 예약 저장
        async function saveReservation() {
            const formData = {};
            
            // 폼 데이터 수집
            document.querySelectorAll('#previewArea input, #previewArea select, #previewArea textarea').forEach(element => {
                if (element.name) {
                    formData[element.name] = element.value;
                }
            });

            // ✅ 수배업체는 파싱 미리보기에서 이미 선택됨 (중복 매칭 제거)

            // 필드명을 DB 스키마에 맞게 매핑
            const mappedData = {
                reservation_number: formData.reservation_number,
                platform_name: formData.platform_name,
                payment_status: formData.payment_status || 'pending', // 파싱 규칙에 따라 설정된 상태 유지
                product_name: formData.product_name,
                package_type: formData.package_type,
                usage_date: formData.tour_date,
                usage_time: formData.tour_time,
                reservation_datetime: formData.booking_date ? formData.booking_date.replace('T', ' ') : null,
                korean_name: formData.customer_name,
                english_last_name: formData.customer_lastname,
                english_first_name: formData.customer_firstname,
                phone: formData.customer_phone,
                email: formData.customer_email,
                kakao_id: formData.kakao_id,
                people_adult: parseInt(formData.adult_count) || 1,
                people_child: parseInt(formData.child_count) || 0,
                people_infant: parseInt(formData.infant_count) || 0,
                adult_unit_price: parseFloat(formData.adult_price) || null,
                child_unit_price: parseFloat(formData.child_price) || null,
                memo: formData.special_requests,
                channel: 'inbox',
                guest_count: (parseInt(formData.adult_count) || 1) + (parseInt(formData.child_count) || 0) + (parseInt(formData.infant_count) || 0),
                vendor_id: formData.vendor_id || null // 수배업체 ID 추가
            };
            
            console.log('💾 저장할 데이터:', mappedData);
            console.log('🏢 선택된 수배업체 ID:', formData.vendor_id);

            try {
                const response = await fetch('/api/reservations', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(mappedData)
                });

                const result = await response.json();
                
                if (result.success || response.ok) {
                    // ✅ 저장 결과에 따라 메시지 표시
                    let successMessage = '✅ 예약이 저장되었습니다.';
                    let redirectPage = '/admin/reservations'; // 기본: 예약관리
                    
                    // vendor_id가 있으면 수배관리로, 없으면 예약관리로
                    if (formData.vendor_id && formData.vendor_id !== '') {
                        successMessage += '\n\n🎯 수배서가 생성되었습니다.\n수배관리 페이지로 이동합니다...';
                        redirectPage = '/admin/assignments';
                    } else {
                        successMessage += '\n\n⚠️ 수배업체 미지정\n예약관리 페이지로 이동합니다.';
                    }
                    
                    alert(successMessage);
                    clearForm();
                    
                    // 해당 페이지로 리다이렉트
                    setTimeout(() => {
                        window.location.href = redirectPage;
                    }, 1000);
                } else {
                    alert('저장 실패: ' + (result.message || '알 수 없는 오류'));
                }
            } catch (error) {
                console.error('저장 오류:', error);
                alert('저장 중 오류가 발생했습니다.');
            }
        }

        // 다시 수정
        function editRawData() {
            document.getElementById('previewArea').style.display = 'none';
            document.getElementById('reservationText').focus();
        }

        // 미리보기 취소
        function clearPreview() {
            document.getElementById('previewArea').style.display = 'none';
            parsedData = null;
        }

        // 폼 초기화
        function clearForm() {
            document.getElementById('reservationText').value = '';
            document.getElementById('previewArea').style.display = 'none';
            parsedData = null;
        }

        // 새로고침
        function refreshInbox() {
            location.reload();
        }

        // 💰 금액 단위 자동 판별 함수 (999 이하=달러, 1000 이상=원화)
        function determineCurrency(amount) {
            if (!amount || isNaN(amount)) {
                return { currency: 'UNKNOWN', symbol: '' };
            }
            
            if (amount <= 999) {
                return { currency: 'USD', symbol: '$' };
            } else {
                return { currency: 'KRW', symbol: '₩' };
            }
        }

        // 💰 금액을 통화 기호와 함께 표시
        function formatCurrencyDisplay(amount) {
            if (!amount || isNaN(amount)) return '';
            
            const currencyInfo = determineCurrency(amount);
            
            if (currencyInfo.currency === 'USD') {
                return `$${parseFloat(amount).toFixed(2)}`;
            } else if (currencyInfo.currency === 'KRW') {
                return `₩${parseInt(amount).toLocaleString('ko-KR')}`;
            }
            
            return amount.toString();
        }

        // 💰 금액 필드에 통화 표시 업데이트
        function updateCurrencyDisplay() {
            const totalAmount = document.getElementById('total_amount').value;
            const adultPrice = document.getElementById('adult_price').value;
            const childPrice = document.getElementById('child_price').value;
            const infantPrice = document.getElementById('infant_price').value;

            // 총 금액 표시 업데이트
            if (totalAmount) {
                const totalDisplay = formatCurrencyDisplay(totalAmount);
                document.getElementById('total_amount').setAttribute('data-currency', totalDisplay);
                document.getElementById('total_amount').title = totalDisplay;
            }

            // 단가 표시 업데이트
            if (adultPrice) {
                const adultDisplay = formatCurrencyDisplay(adultPrice);
                document.getElementById('adult_price').setAttribute('data-currency', adultDisplay);
                document.getElementById('adult_price').title = adultDisplay;
            }

            if (childPrice) {
                const childDisplay = formatCurrencyDisplay(childPrice);
                document.getElementById('child_price').setAttribute('data-currency', childDisplay);
                document.getElementById('child_price').title = childDisplay;
            }

            if (infantPrice) {
                const infantDisplay = formatCurrencyDisplay(infantPrice);
                document.getElementById('infant_price').setAttribute('data-currency', infantDisplay);
                document.getElementById('infant_price').title = infantDisplay;
            }
        }

        // 파싱 시 수배업체 자동 매칭 (파싱 미리보기용)
        async function matchVendorByProduct(productName) {
            console.log('🔵 matchVendorByProduct 호출됨:', productName);
            
            if (!productName || productName.trim() === '') {
                console.log('⚠️ 상품명이 비어있어 매칭 중단');
                return;
            }
            
            const vendorSelect = document.getElementById('vendor_id');
            const matchBadge = document.getElementById('vendor-match-badge');
            
            try {
                console.log(`🔍 수배업체 매칭 시도: "${productName}"`);
                console.log(`📡 API 요청 시작: /api/vendors/match`);
                
                const response = await fetch('/api/vendors/match', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        product_name: productName.trim()
                    })
                });
                
                console.log(`📥 API 응답 상태: ${response.status}`);
                const result = await response.json();
                console.log('📦 API 응답 데이터:', result);
                
                if (result.success && result.vendor) {
                    const vendor = result.vendor;
                    
                    // 수배업체 선택
                    vendorSelect.value = vendor.id;
                    matchBadge.style.display = 'inline-block';
                    
                    console.log(`✅ 수배업체 매칭 성공: ${vendor.vendor_name} (ID: ${vendor.id})`);
                    console.log(`📌 매칭된 패턴: "${result.matched_keyword}"`);
                    
                    // 매칭 결과 알림 표시
                    showRuleNotification(
                        `🎯 수배업체 자동 매칭: ${vendor.vendor_name} (패턴: "${result.matched_keyword}")`
                    );
                    
                } else {
                    // 매칭 실패
                    vendorSelect.value = '';
                    matchBadge.style.display = 'none';
                    console.log(`❌ 매칭되는 수배업체 없음: "${productName}"`);
                    console.log('📄 API 응답:', result);
                    showRuleNotification(`❓ "${productName}" 상품에 매칭되는 수배업체가 없습니다.`);
                }
                
            } catch (error) {
                console.error('❌ 수배업체 매칭 오류:', error);
                vendorSelect.value = '';
                matchBadge.style.display = 'none';
            }
        }

        // 알림 메시지 표시 함수
        function showNotification(message, type = 'info') {
            // 기존 알림 제거
            const existingNotification = document.querySelector('.delete-notification');
            if (existingNotification) {
                existingNotification.remove();
            }

            // 새 알림 생성
            const notification = document.createElement('div');
            notification.className = `delete-notification alert alert-${type} alert-dismissible fade show`;
            notification.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'info-circle'} me-2"></i>${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            // body에 추가
            document.body.appendChild(notification);

            // 3초 후 자동 제거
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 3000);
        }
    </script>
</body>
</html>
