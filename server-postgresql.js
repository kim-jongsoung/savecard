const express = require('express');
const session = require('express-session');
const path = require('path');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');
const QRCode = require('qrcode');
const fs = require('fs-extra');
const bcrypt = require('bcryptjs');
// nodemailer Ï†úÍ±∞Îê®
require('dotenv').config();

// PostgreSQL ÎòêÎäî JSON Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ†ÌÉù
const { pool, dbMode, testConnection, createTables, ensureAllColumns, migrateFromJSON } = require('./database');
let jsonDB;

try {
    if (dbMode === 'json') {
        console.log('üìã JSON Î™®ÎìúÎ°ú Ïã§Ìñâ');
        jsonDB = require('./utils/jsonDB');
    }
} catch (error) {
    console.warn('‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î™®Îìà Î°úÎìú Ïã§Ìå®:', error.message);
}

const app = express();
const PORT = process.env.PORT || 3000;

// Ïù¥Î©îÏùº Í∏∞Îä• ÏôÑÏ†Ñ Ï†úÍ±∞Îê®

// ÎØ∏Îì§Ïõ®Ïñ¥ ÏÑ§Ï†ï
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));
app.use('/pa', express.static('pa'));
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// ÏÑ∏ÏÖò ÏÑ§Ï†ï
const sessionConfig = {
    secret: process.env.SESSION_SECRET || 'guam-savecard-secret-key-2025',
    resave: false,
    saveUninitialized: false,
    cookie: { 
        secure: process.env.NODE_ENV === 'production',
        maxAge: 24 * 60 * 60 * 1000 // 24ÏãúÍ∞Ñ
    }
};

// ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑú MemoryStore Í≤ΩÍ≥† ÏñµÏ†ú
if (process.env.NODE_ENV === 'production') {
    sessionConfig.name = 'sessionId';
    sessionConfig.proxy = true;
    // MemoryStore Í≤ΩÍ≥† Î©îÏãúÏßÄ ÏñµÏ†úÎ•º ÏúÑÌïú ÏÑ§Ï†ï
    const originalConsoleWarn = console.warn;
    console.warn = function(...args) {
        const message = args.join(' ');
        if (message.includes('MemoryStore') || message.includes('connect.session()')) {
            return; // MemoryStore Í¥ÄÎ†® Í≤ΩÍ≥† Î¨¥Ïãú
        }
        originalConsoleWarn.apply(console, args);
    };
}

app.use(session(sessionConfig));

// Í¥ÄÎ¶¨Ïûê Ïù∏Ï¶ù ÎØ∏Îì§Ïõ®Ïñ¥
function requireAuth(req, res, next) {
    if (req.session.adminId) {
        next();
    } else {
        res.redirect('/admin/login');
    }
}

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌôïÏù∏ ÎØ∏Îì§Ïõ®Ïñ¥
async function checkDatabase(req, res, next) {
    try {
        if (dbMode === 'postgresql') {
            await pool.query('SELECT 1');
        }
        // JSON Î™®ÎìúÎäî Ìï≠ÏÉÅ ÏÇ¨Ïö© Í∞ÄÎä•ÌïòÎØÄÎ°ú Ï≤¥ÌÅ¨ ÏÉùÎûµ
        next();
    } catch (err) {
        console.error('Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ïò§Î•ò:', err);
        // PostgreSQL Ïã§Ìå® Ïãú JSON Î™®ÎìúÎ°ú fallback
        if (dbMode === 'postgresql') {
            console.warn('‚ö†Ô∏è PostgreSQL Ïó∞Í≤∞ Ïã§Ìå®, JSON Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Î°ú Ï†ÑÌôòÌï©ÎãàÎã§.');
            dbMode = 'json';
            if (!jsonDB) {
                jsonDB = require('./utils/jsonDB');
            }
        }
        next();
    }
}

// Î™®Îì† ÎùºÏö∞Ìä∏Ïóê Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï≤¥ÌÅ¨ Ï†ÅÏö©
app.use(checkDatabase);

// Í¥ÄÎ¶¨Ïûê ÎùºÏö∞Ìä∏ Ïó∞Í≤∞ (Î°úÍ∑∏Ïù∏/Î°úÍ∑∏ÏïÑÏõÉÎßå)
const adminRoutes = require('./routes/admin');
app.use('/admin', adminRoutes);

// ÏÑúÎ≤Ñ ÏãúÏûë Ïãú PostgreSQL Ïä§ÌÇ§Îßà Î≥¥Ï†ï: ÌÖåÏù¥Î∏î ÏÉùÏÑ± ‚Üí Ïª¨Îüº Î≥¥Ï†ï
(async () => {
    if (dbMode !== 'postgresql') return;
    try {
        const ok = await testConnection();
        if (!ok) return;
        await createTables();
        if (typeof ensureAllColumns === 'function') {
            await ensureAllColumns();
        }
        console.log('üóÑÔ∏è DB Ï¥àÍ∏∞Ìôî/Î≥¥Ï†ï ÏôÑÎ£å');
    } catch (e) {
        console.warn('DB Ï¥àÍ∏∞Ìôî/Î≥¥Ï†ï Ï§ë Í≤ΩÍ≥†:', e.message);
    }
})();

// Í¥ÄÎ¶¨Ïûê: ÏàòÎèô Ïª¨Îüº Î≥¥Ï†ï Ïã§Ìñâ ÏóîÎìúÌè¨Ïù∏Ìä∏ (Î°úÍ∑∏Ïù∏ ÌïÑÏöî)
app.post('/admin/db/ensure-columns', requireAuth, async (req, res) => {
    if (dbMode !== 'postgresql') {
        return res.json({ success: false, message: 'PostgreSQL Î™®ÎìúÍ∞Ä ÏïÑÎãôÎãàÎã§.' });
    }
    try {
        await createTables();
        if (typeof ensureAllColumns === 'function') {
            await ensureAllColumns();
        }
        return res.json({ success: true, message: 'Î™®Îì† ÌÖåÏù¥Î∏î Ïª¨Îüº Î≥¥Ï†ï ÏôÑÎ£å' });
    } catch (e) {
        console.error('ensure-columns Ïã§Ìñâ Ïò§Î•ò:', e);
        const expose = String(process.env.EXPOSE_ERROR || '').toLowerCase() === 'true';
        return res.json({ success: false, message: 'Ïª¨Îüº Î≥¥Ï†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', ...(expose ? { detail: e.message } : {}) });
    }
});

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ìó¨Ìçº Ìï®ÏàòÎì§ (PostgreSQL/JSON Ìò∏Ìôò)
const dbHelpers = {
    // ÏÇ¨Ïö©Ïûê Í¥ÄÎ†®
    async getUsers() {
        if (dbMode === 'postgresql') {
            const result = await pool.query(`
                SELECT u.*, a.name as agency_name, 
                       COALESCE(usage_stats.usage_count, 0) as usage_count
                FROM users u 
                LEFT JOIN agencies a ON u.agency_id = a.id 
                LEFT JOIN (
                    SELECT token, COUNT(*) as usage_count 
                    FROM usages 
                    GROUP BY token
                ) usage_stats ON u.token = usage_stats.token
                ORDER BY u.created_at DESC
            `);
            return result.rows;
        } else {
            return await jsonDB.findAll('users');
        }
    },
    
    async getUserByToken(token) {
        if (dbMode === 'postgresql') {
            const result = await pool.query('SELECT * FROM users WHERE token = $1', [token]);
            return result.rows[0] || null;
        } else {
            return await jsonDB.findOne('users', { token });
        }
    },
    
    async createUser(userData) {
        if (dbMode === 'postgresql') {
            const { name, phone, email, agency_id, token, qr_code, expiration_start, expiration_end, pin } = userData;
            const result = await pool.query(
                'INSERT INTO users (name, phone, email, agency_id, token, qr_code, expiration_start, expiration_end, pin, created_at) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW()) RETURNING *',
                [name, phone, email, agency_id, token, qr_code, expiration_start, expiration_end, pin]
            );
            // Ìò∏ÌôòÏÑ±: Í≥ºÍ±∞ Ïä§ÌÇ§ÎßàÏùò customer_name Ïª¨ÎüºÏù¥ Ï°¥Ïû¨ÌïúÎã§Î©¥ ÎèôÍ∏∞Ìôî Ï†ÄÏû•
            try {
                const col = await pool.query("SELECT 1 FROM information_schema.columns WHERE table_name='users' AND column_name='customer_name'");
                if (col && col.rowCount > 0) {
                    await pool.query('UPDATE users SET customer_name = $1, updated_at = NOW() WHERE id = $2', [name, result.rows[0].id]);
                }
            } catch (compatErr) {
                console.warn('customer_name Ìò∏Ìôò Ï†ÄÏû• Ï§ë Í≤ΩÍ≥†:', compatErr.message);
            }
            return result.rows[0];
        } else {
            return await jsonDB.insert('users', userData);
        }
    },
    
    // Ïó¨ÌñâÏÇ¨ Í¥ÄÎ†®
    async getAgencies() {
        if (dbMode === 'postgresql') {
            const result = await pool.query(`
                SELECT a.*, 
                       COALESCE(user_counts.card_count, 0) as card_count
                FROM agencies a 
                LEFT JOIN (
                    SELECT agency_id, COUNT(*) as card_count 
                    FROM users 
                    GROUP BY agency_id
                ) user_counts ON a.id = user_counts.agency_id
                ORDER BY a.sort_order, a.name
            `);
            return result.rows;
        } else {
            return await jsonDB.findAll('agencies');
        }
    },
    
    async getAgencyById(id) {
        if (dbMode === 'postgresql') {
            const result = await pool.query('SELECT * FROM agencies WHERE id = $1', [id]);
            return result.rows[0] || null;
        } else {
            return await jsonDB.findById('agencies', id);
        }
    },
    
    async getAgencyByCode(code) {
        if (dbMode === 'postgresql') {
            const result = await pool.query('SELECT * FROM agencies WHERE code = $1', [code]);
            return result.rows[0] || null;
        } else {
            return await jsonDB.findOne('agencies', { code });
        }
    },
    
    async createAgency(agencyData) {
        if (dbMode === 'postgresql') {
            const { name, code, discount_info, show_banners_on_landing = true } = agencyData;
            
            // ÏÉàÎ°úÏö¥ Ïó¨ÌñâÏÇ¨Ïùò sort_orderÎ•º Í∞ÄÏû• ÎßàÏßÄÎßâÏúºÎ°ú ÏÑ§Ï†ï
            const maxOrderResult = await pool.query('SELECT COALESCE(MAX(sort_order), 0) + 1 as next_order FROM agencies');
            const nextOrder = maxOrderResult.rows[0].next_order;
            
            const result = await pool.query(
                'INSERT INTO agencies (name, code, discount_info, show_banners_on_landing, sort_order, created_at) VALUES ($1, $2, $3, $4, $5, NOW()) RETURNING *',
                [name, code, discount_info, show_banners_on_landing, nextOrder]
            );
            return result.rows[0];
        } else {
            return await jsonDB.insert('agencies', agencyData);
        }
    },
    
    async updateAgency(id, agencyData) {
        if (dbMode === 'postgresql') {
            const { name, code, discount_info, show_banners_on_landing, contact_email, contact_phone, logo_url } = agencyData;
            console.log('updateAgency Ìò∏Ï∂ú:', { id, name, code, discount_info, show_banners_on_landing, contact_email, contact_phone, logo_url });
            
            const result = await pool.query(
                'UPDATE agencies SET name = $1, code = $2, discount_info = $3, show_banners_on_landing = $4, contact_email = $5, contact_phone = $6, logo_url = $7, updated_at = NOW() WHERE id = $8 RETURNING *',
                [name, code, discount_info, show_banners_on_landing, contact_email, contact_phone, logo_url, id]
            );
            
            console.log('SQL ÏóÖÎç∞Ïù¥Ìä∏ Í≤∞Í≥º:', result.rows[0]);
            console.log('ÏòÅÌñ•Î∞õÏùÄ Ìñâ Ïàò:', result.rowCount);
            
            return result.rows[0];
        } else {
            return await jsonDB.update('agencies', id, agencyData);
        }
    },

    async deleteAgency(id) {
        if (dbMode === 'postgresql') {
            // Ïó∞Í≤∞Îêú ÏÇ¨Ïö©Ïûê ÌôïÏù∏
            const userCheck = await pool.query('SELECT COUNT(*) as count FROM users WHERE agency_id = $1', [id]);
            const userCount = parseInt(userCheck.rows[0].count);
            
            if (userCount > 0) {
                return { hasUsers: true, userCount, message: `Ïù¥ Ïó¨ÌñâÏÇ¨Ïóê Ïó∞Í≤∞Îêú ${userCount}Î™ÖÏùò Í≥†Í∞ùÏù¥ ÏûàÏäµÎãàÎã§.` };
            }
            
            // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏúºÎ©¥ Î∞îÎ°ú ÏÇ≠Ï†ú
            const result = await pool.query('DELETE FROM agencies WHERE id = $1 RETURNING *', [id]);
            return { success: true, deleted: result.rows[0] };
        } else {
            return await jsonDB.delete('agencies', id);
        }
    },

    async forceDeleteAgency(id) {
        if (dbMode === 'postgresql') {
            const client = await pool.connect();
            try {
                await client.query('BEGIN');
                
                // Ïó∞Í≤∞Îêú ÏÇ¨Ïö©ÏûêÎì§Ïùò ÏÇ¨Ïö© Ïù¥Î†• ÏÇ≠Ï†ú
                await client.query('DELETE FROM usages WHERE token IN (SELECT token FROM users WHERE agency_id = $1)', [id]);
                
                // Ïó∞Í≤∞Îêú ÏÇ¨Ïö©ÏûêÎì§ ÏÇ≠Ï†ú
                await client.query('DELETE FROM users WHERE agency_id = $1', [id]);
                
                // Ïó¨ÌñâÏÇ¨ ÏÇ≠Ï†ú
                const result = await client.query('DELETE FROM agencies WHERE id = $1 RETURNING *', [id]);
                
                await client.query('COMMIT');
                return { success: true, deleted: result.rows[0] };
            } catch (error) {
                await client.query('ROLLBACK');
                throw error;
            } finally {
                client.release();
            }
        } else {
            return await jsonDB.delete('agencies', id);
        }
    },
    
    // Ï†úÌú¥ÏóÖÏ≤¥ Í¥ÄÎ†®
    async getStores() {
        if (dbMode === 'postgresql') {
            const result = await pool.query('SELECT * FROM stores ORDER BY usage_count DESC, name ASC');
            return result.rows;
        } else {
            return await jsonDB.findAll('stores');
        }
    },
    
    async getStoreById(id) {
        if (dbMode === 'postgresql') {
            const result = await pool.query('SELECT * FROM stores WHERE id = $1', [id]);
            return result.rows[0] || null;
        } else {
            return await jsonDB.findById('stores', id);
        }
    },
    
    async createStore(storeData) {
        if (dbMode === 'postgresql') {
            const {
                name,
                category = null,
                discount = null,
                discount_info = null,
                address = null,
                phone = null,
                website = null,
                description = null,
                image_url = null
            } = storeData;
            const result = await pool.query(
                `INSERT INTO stores (name, category, discount, discount_info, address, phone, website, description, image_url)
                 VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING *`,
                [name, category, discount, discount_info, address, phone, website, description, image_url]
            );
            return result.rows[0];
        } else {
            return await jsonDB.insert('stores', storeData);
        }
    },

    async updateStore(id, storeData) {
        if (dbMode === 'postgresql') {
            const {
                name,
                category = null,
                discount = null,
                discount_info = null,
                address = null,
                phone = null,
                website = null,
                description = null,
                image_url = null,
                usage_count = 0
            } = storeData;
            const result = await pool.query(
                `UPDATE stores SET name = $1, category = $2, discount = $3, discount_info = $4, 
                 address = $5, phone = $6, website = $7, description = $8, image_url = $9, usage_count = $10, updated_at = NOW() 
                 WHERE id = $11 RETURNING *`,
                [name, category, discount, discount_info, address, phone, website, description, image_url, usage_count, id]
            );
            return result.rows[0];
        } else {
            return await jsonDB.update('stores', id, storeData);
        }
    },

    async deleteStore(id) {
        if (dbMode === 'postgresql') {
            const result = await pool.query('UPDATE stores SET is_active = false, updated_at = NOW() WHERE id = $1 RETURNING *', [id]);
            return result.rows[0];
        } else {
            return await jsonDB.update('stores', id, { is_active: false });
        }
    },
    
    // Î∞∞ÎÑà Í¥ÄÎ†®
    async getBanners() {
        if (dbMode === 'postgresql') {
            const result = await pool.query('SELECT * FROM banners WHERE is_active = true ORDER BY display_order');
            return result.rows;
        } else {
            const banners = await jsonDB.findAll('banners');
            return banners.filter(banner => banner.is_active !== false);
        }
    },
    
    async createBanner(bannerData) {
        if (dbMode === 'postgresql') {
            const {
                advertiser_name,
                image_url,
                link_url = null,
                description = null,
                is_active = true,
                display_order = 0,
                display_locations = [1]
            } = bannerData;
            const result = await pool.query(
                `INSERT INTO banners (advertiser_name, image_url, link_url, description, is_active, display_order, display_locations)
                 VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING *`,
                [advertiser_name, image_url, link_url, description, is_active, display_order, display_locations]
            );
            return result.rows[0];
        } else {
            return await jsonDB.insert('banners', bannerData);
        }
    },

    async updateBanner(id, bannerData) {
        if (dbMode === 'postgresql') {
            const {
                advertiser_name,
                image_url,
                link_url = null,
                description = null,
                is_active = true,
                display_order = 0,
                display_locations = [1]
            } = bannerData;
            const result = await pool.query(
                `UPDATE banners SET advertiser_name = $1, image_url = $2, link_url = $3, description = $4,
                 is_active = $5, display_order = $6, display_locations = $7, updated_at = NOW() 
                 WHERE id = $8 RETURNING *`,
                [advertiser_name, image_url, link_url, description, is_active, display_order, display_locations, id]
            );
            return result.rows[0];
        } else {
            return await jsonDB.update('banners', id, bannerData);
        }
    },

    async deleteBanner(id) {
        if (dbMode === 'postgresql') {
            // Ïã§Ï†ú ÏÇ≠Ï†úÎ°ú Î≥ÄÍ≤Ω (ÏÜåÌîÑÌä∏ ÏÇ≠Ï†úÏóêÏÑú ÌïòÎìú ÏÇ≠Ï†úÎ°ú)
            const result = await pool.query('DELETE FROM banners WHERE id = $1 RETURNING *', [id]);
            return result.rows[0];
        } else {
            return await jsonDB.delete('banners', id);
        }
    },

    async incrementBannerClick(id) {
        if (dbMode === 'postgresql') {
            const result = await pool.query('UPDATE banners SET click_count = click_count + 1, updated_at = NOW() WHERE id = $1 RETURNING *', [id]);
            return result.rows[0];
        } else {
            const banner = await jsonDB.findById('banners', id);
            if (banner) {
                banner.click_count = (banner.click_count || 0) + 1;
                return await jsonDB.update('banners', id, banner);
            }
            return null;
        }
    },
    
    // ÏÇ¨Ïö© Í∏∞Î°ù Í¥ÄÎ†®
    async getUsages(token = null) {
        if (dbMode === 'postgresql') {
            if (token) {
                const result = await pool.query(`
                    SELECT u.*, 
                           users.name as customer_name,
                           agencies.name as agency_name
                    FROM usages u
                    LEFT JOIN users ON u.token = users.token
                    LEFT JOIN agencies ON users.agency_id = agencies.id
                    WHERE u.token = $1 
                    ORDER BY u.used_at DESC
                `, [token]);
                return result.rows;
            } else {
                const result = await pool.query(`
                    SELECT u.*, 
                           users.name as customer_name,
                           agencies.name as agency_name
                    FROM usages u
                    LEFT JOIN users ON u.token = users.token
                    LEFT JOIN agencies ON users.agency_id = agencies.id
                    ORDER BY u.used_at DESC
                `);
                return result.rows;
            }
        } else {
            if (token) {
                return await jsonDB.findAll('usages', { token });
            } else {
                return await jsonDB.findAll('usages');
            }
        }
    },
    
    async createUsage(usageData) {
        if (dbMode === 'postgresql') {
            const { token, store_name, used_at = new Date() } = usageData;
            const result = await pool.query(
                'INSERT INTO usages (token, store_name, used_at) VALUES ($1, $2, $3) RETURNING *',
                [token, store_name, used_at]
            );
            return result.rows[0];
        } else {
            return await jsonDB.insert('usages', { ...usageData, used_at: usageData.used_at || new Date() });
        }
    }
};

// ÎÇ†Ïßú Ìè¨Îß∑ Ìï®Ïàò
function formatDate(date) {
    const d = new Date(date);
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    const month = months[d.getMonth()];
    const day = String(d.getDate()).padStart(2, '0');
    const year = String(d.getFullYear()).slice(-2);
    return `${month}/${day}/${year}`;
}

// Î∞úÍ∏â ÏΩîÎìú Ï†ÑÎã¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ API
app.put('/admin/issue-codes/:id/delivery', requireAuth, async (req, res) => {
    try {
        const { id } = req.params;
        const { is_delivered } = req.body;
        
        if (dbMode === 'postgresql') {
            const delivered_at = is_delivered ? new Date() : null;
            
            const result = await pool.query(
                'UPDATE issue_codes SET is_delivered = $1, delivered_at = $2 WHERE id = $3 RETURNING *',
                [is_delivered, delivered_at, id]
            );
            
            if (result.rows.length === 0) {
                return res.json({ success: false, message: 'ÏΩîÎìúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' });
            }
            
            res.json({ 
                success: true, 
                message: is_delivered ? 'Ï†ÑÎã¨ ÏôÑÎ£åÎ°ú ÌëúÏãúÎêòÏóàÏäµÎãàÎã§.' : 'ÎØ∏Ï†ÑÎã¨Î°ú ÌëúÏãúÎêòÏóàÏäµÎãàÎã§.',
                code: result.rows[0]
            });
        } else {
            res.json({ success: false, message: 'PostgreSQL Î™®ÎìúÏóêÏÑúÎßå ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.' });
        }
    } catch (error) {
        console.error('Ï†ÑÎã¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
        res.json({ success: false, message: 'Ï†ÑÎã¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ==================== Î©îÏù∏ ÎùºÏö∞Ìä∏ ====================

// Ìó¨Ïä§Ï≤¥ÌÅ¨ ÎùºÏö∞Ìä∏ (ÎîîÎ≤ÑÍπÖÏö©)
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        message: 'PostgreSQL ÏÑúÎ≤ÑÍ∞Ä Ï†ïÏÉÅ ÏûëÎèô Ï§ëÏûÖÎãàÎã§.'
    });
});

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÎùºÏö∞Ìä∏
app.get('/db-test', async (req, res) => {
    try {
        if (dbMode === 'postgresql') {
            const result = await pool.query('SELECT NOW() as current_time');
            res.json({ 
                status: 'OK', 
                database: 'PostgreSQL Connected',
                mode: 'postgresql',
                current_time: result.rows[0].current_time
            });
        } else {
            res.json({ 
                status: 'OK', 
                database: 'JSON Database Active',
                mode: 'json',
                current_time: new Date().toISOString()
            });
        }
    } catch (error) {
        res.status(500).json({ 
            status: 'ERROR', 
            database: 'Connection Failed',
            mode: dbMode,
            error: error.message
        });
    }
});

// ÏÇ¨Ïö©ÏûêÏö© Î°úÍ∑∏ÏïÑÏõÉ (ÌîÑÎ°†Ìä∏ my-card.ejs Îì±ÏóêÏÑú ÏÇ¨Ïö©)
app.post('/logout', (req, res) => {
    try {
        req.session.destroy(() => {
            res.redirect('/');
        });
    } catch (e) {
        res.redirect('/');
    }
});

// Ï†úÌú¥ÏóÖÏ≤¥ ÏÉùÏÑ± (Í¥ÄÎ¶¨Ïûê)
app.post('/admin/stores', requireAuth, async (req, res) => {
    try {
        const wantsJson = req.xhr || (req.headers.accept && req.headers.accept.includes('application/json'));
        const name = (req.body.name || '').trim();
        const category = (req.body.category || '').trim();
        const description = (req.body.description || '').trim();
        const discount = (req.body.discount || '').trim();
        const address = (req.body.address || '').trim();
        const phone = (req.body.phone || '').trim();
        const website = (req.body.website || '').trim();
        const image_url = (req.body.image_url || '').trim();

        if (!name || !category || !description || !discount) {
            if (wantsJson) {
                return res.json({ success: false, message: 'ÌïÑÏàò Ìï≠Î™©(ÏóÖÏ≤¥Î™Ö/Ïπ¥ÌÖåÍ≥†Î¶¨/ÏÑ§Î™Ö/Ìï†Ïù∏ Ï†ïÎ≥¥)ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.' });
            } else {
                return res.redirect('/admin/stores?error=missing_fields');
            }
        }

        const store = await dbHelpers.createStore({
            name,
            category,
            description,
            discount,
            address: address || null,
            phone: phone || null,
            website: website || null,
            image_url: image_url || null
        });

        if (wantsJson) {
            return res.json({ success: true, message: 'Ï†úÌú¥ÏóÖÏ≤¥Í∞Ä Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.', store });
        } else {
            return res.redirect('/admin/stores?success=1');
        }
    } catch (error) {
        console.error('Ï†úÌú¥ÏóÖÏ≤¥ ÏÉùÏÑ± Ïò§Î•ò:', error);
        const wantsJson = req.xhr || (req.headers.accept && req.headers.accept.includes('application/json'));
        if (wantsJson) {
            return res.json({ success: false, message: 'Ï†úÌú¥ÏóÖÏ≤¥ Ï∂îÍ∞Ä Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
        } else {
            return res.redirect('/admin/stores?error=server');
        }
    }
});

// Ï†úÌú¥ÏóÖÏ≤¥ Í∞úÎ≥Ñ Ï°∞Ìöå ÎùºÏö∞Ìä∏ (ÏàòÏ†ï Î™®Îã¨Ïö©) - PUTÎ≥¥Îã§ Î®ºÏ†Ä Ï†ïÏùò
app.get('/admin/stores/:id', requireAuth, async (req, res) => {
    try {
        const { id } = req.params;
        const store = await dbHelpers.getStoreById(id);
        
        if (!store) {
            return res.json({
                success: false,
                message: 'Ï†úÌú¥ÏóÖÏ≤¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
            });
        }
        
        res.json({
            success: true,
            store: store
        });
        
    } catch (error) {
        console.error('Ï†úÌú¥ÏóÖÏ≤¥ Ï°∞Ìöå Ïò§Î•ò:', error);
        res.json({
            success: false,
            message: 'Ï†úÌú¥ÏóÖÏ≤¥ Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

// Ï†úÌú¥ÏóÖÏ≤¥ ÏàòÏ†ï ÎùºÏö∞Ìä∏
app.put('/admin/stores/:id', requireAuth, async (req, res) => {
    try {
        const wantsJson = req.xhr || (req.headers.accept && req.headers.accept.includes('application/json'));
        const id = Number(req.params.id);
        if (!Number.isFinite(id)) {
            if (wantsJson) return res.json({ success: false, message: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ID' });
            return res.redirect('/admin/stores?error=invalid_id');
        }

        console.log('ÏàòÏ†ï ÏöîÏ≤≠ Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞:', req.body);
        
        const {
            name,
            category,
            discount,
            discount_info,
            address,
            phone,
            website,
            description,
            image_url,
            usage_count
        } = req.body;

        if (!name || !category || !description || !discount) {
            if (wantsJson) {
                return res.json({ success: false, message: 'ÌïÑÏàò Ìï≠Î™©(ÏóÖÏ≤¥Î™Ö/Ïπ¥ÌÖåÍ≥†Î¶¨/ÏÑ§Î™Ö/Ìï†Ïù∏ Ï†ïÎ≥¥)ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.' });
            } else {
                return res.redirect('/admin/stores?error=missing_fields');
            }
        }

        const updateData = {
            name: name.trim(),
            category: category.trim(),
            discount: discount.trim(),
            discount_info: discount_info ? discount_info.trim() : null,
            address: address ? address.trim() : null,
            phone: phone ? phone.trim() : null,
            website: website ? website.trim() : null,
            description: description.trim(),
            image_url: image_url ? image_url.trim() : null,
            usage_count: usage_count ? Number(usage_count) : 0
        };
        
        console.log('updateStore Ìò∏Ï∂ú Ï†Ñ Îç∞Ïù¥ÌÑ∞:', updateData);
        const store = await dbHelpers.updateStore(id, updateData);
        console.log('updateStore Í≤∞Í≥º:', store);

        if (!store) {
            if (wantsJson) {
                return res.json({ success: false, message: 'Ï†úÌú¥ÏóÖÏ≤¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' });
            } else {
                return res.redirect('/admin/stores?error=not_found');
            }
        }

        if (wantsJson) {
            return res.json({ success: true, message: 'Ï†úÌú¥ÏóÖÏ≤¥Í∞Ä ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.', store });
        } else {
            return res.redirect('/admin/stores?success=updated');
        }
    } catch (error) {
        console.error('Ï†úÌú¥ÏóÖÏ≤¥ ÏàòÏ†ï Ïò§Î•ò:', error);
        const wantsJson = req.xhr || (req.headers.accept && req.headers.accept.includes('application/json'));
        if (wantsJson) {
            return res.json({ success: false, message: 'Ï†úÌú¥ÏóÖÏ≤¥ ÏàòÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
        } else {
            return res.redirect('/admin/stores?error=server');
        }
    }
});

// Ï†úÌú¥ÏóÖÏ≤¥ ÏÇ≠Ï†ú ÎùºÏö∞Ìä∏ (ÏÜåÌîÑÌä∏ ÏÇ≠Ï†ú)
app.delete('/admin/stores/:id', requireAuth, async (req, res) => {
    try {
        const wantsJson = req.xhr || (req.headers.accept && req.headers.accept.includes('application/json'));
        const id = Number(req.params.id);
        if (!Number.isFinite(id)) {
            if (wantsJson) return res.json({ success: false, message: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ID' });
            return res.redirect('/admin/stores?error=invalid_id');
        }

        const store = await dbHelpers.deleteStore(id);
        
        if (!store) {
            if (wantsJson) {
                return res.json({ success: false, message: 'Ï†úÌú¥ÏóÖÏ≤¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' });
            } else {
                return res.redirect('/admin/stores?error=not_found');
            }
        }

        if (wantsJson) {
            return res.json({ success: true, message: 'Ï†úÌú¥ÏóÖÏ≤¥Í∞Ä ÎπÑÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§.' });
        } else {
            return res.redirect('/admin/stores?success=deleted');
        }
    } catch (error) {
        console.error('Ï†úÌú¥ÏóÖÏ≤¥ ÏÇ≠Ï†ú Ïò§Î•ò:', error);
        const wantsJson = req.xhr || (req.headers.accept && req.headers.accept.includes('application/json'));
        if (wantsJson) {
            return res.json({ success: false, message: 'Ï†úÌú¥ÏóÖÏ≤¥ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
        } else {
            return res.redirect('/admin/stores?error=server');
        }
    }
});

// Ï†úÌú¥ÏóÖÏ≤¥ ÌôúÏÑ±/ÎπÑÌôúÏÑ± ÌÜ†Í∏Ä
app.post('/admin/stores/:id/toggle', requireAuth, async (req, res) => {
    try {
        console.log('Ï†úÌú¥ÏóÖÏ≤¥ ÌÜ†Í∏Ä ÏöîÏ≤≠:', req.params.id);
        const wantsJson = req.xhr || (req.headers.accept && req.headers.accept.includes('application/json'));
        const id = Number(req.params.id);
        
        if (!Number.isFinite(id)) {
            console.log('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ID:', req.params.id);
            if (wantsJson) return res.json({ success: false, message: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ID' });
            return res.redirect('/admin/stores?error=invalid_id');
        }

        let nextVal;
        if (dbMode === 'postgresql') {
            console.log('PostgreSQLÏóêÏÑú ÌòÑÏû¨ ÏÉÅÌÉú Ï°∞Ìöå Ï§ë...');
            const current = await pool.query('SELECT is_active FROM stores WHERE id = $1', [id]);
            
            if (current.rowCount === 0) {
                console.log('ÏóÖÏ≤¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå:', id);
                return res.json({ success: false, message: 'ÏóÖÏ≤¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' });
            }
            
            const currentStatus = current.rows[0].is_active;
            nextVal = !Boolean(currentStatus);
            console.log(`ÏóÖÏ≤¥ ${id} ÏÉÅÌÉú Î≥ÄÍ≤Ω: ${currentStatus} -> ${nextVal}`);
            
            await pool.query('UPDATE stores SET is_active = $1, updated_at = NOW() WHERE id = $2', [nextVal, id]);
            console.log('ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
        } else {
            const store = await jsonDB.findById('stores', id);
            if (!store) return res.json({ success: false, message: 'ÏóÖÏ≤¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' });
            nextVal = store.is_active === false ? true : false;
            await jsonDB.update('stores', id, { is_active: nextVal });
        }

        if (wantsJson) {
            console.log('JSON ÏùëÎãµ Î∞òÌôò:', { success: true, is_active: nextVal });
            return res.json({ success: true, is_active: nextVal, message: `Ï†úÌú¥ÏóÖÏ≤¥Í∞Ä ${nextVal ? 'ÌôúÏÑ±Ìôî' : 'ÎπÑÌôúÏÑ±Ìôî'}ÎêòÏóàÏäµÎãàÎã§.` });
        } else {
            return res.redirect('/admin/stores?toggle=1');
        }
    } catch (error) {
        console.error('Ï†úÌú¥ÏóÖÏ≤¥ ÌÜ†Í∏Ä Ïò§Î•ò:', error);
        const wantsJson = req.xhr || (req.headers.accept && req.headers.accept.includes('application/json'));
        if (wantsJson) {
            return res.json({ success: false, message: 'ÏÉÅÌÉú Î≥ÄÍ≤Ω Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
        } else {
            return res.redirect('/admin/stores?error=server');
        }
    }
});

// ==================== Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄ ÎùºÏö∞Ìä∏ ====================

// Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú
app.get('/admin/dashboard', requireAuth, async (req, res) => {
    try {
        // ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
        const [users, agencies, stores, usages] = await Promise.all([
            dbHelpers.getUsers().catch(() => []),
            dbHelpers.getAgencies().catch(() => []),
            dbHelpers.getStores().catch(() => []),
            dbHelpers.getUsages().catch(() => [])
        ]);

        // ÏµúÍ∑º ÏÇ¨Ïö© Ïù¥Î†• (ÏµúÍ∑º 10Í∞ú)
        const recentUsages = usages
            .sort((a, b) => new Date(b.used_at) - new Date(a.used_at))
            .slice(0, 10);

        res.render('admin/dashboard', {
            title: 'Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú',
            stats: {
                totalUsers: users.length,
                totalAgencies: agencies.length,
                totalStores: stores.length,
                totalUsages: usages.length
            },
            recentUsages,
            success: req.query.success,
            error: req.query.error
        });
    } catch (error) {
        console.error('Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú Ïò§Î•ò:', error);
        res.render('admin/dashboard', {
            title: 'Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú',
            stats: { totalUsers: 0, totalAgencies: 0, totalStores: 0, totalUsages: 0 },
            recentUsages: [],
            error: 'dashboard_error'
        });
    }
});

// Í¥ÄÎ¶¨Ïûê Ïó¨ÌñâÏÇ¨ Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ
app.get('/admin/agencies', requireAuth, async (req, res) => {
    try {
        const agencies = await dbHelpers.getAgencies();
        res.render('admin/agencies', {
            title: 'Ïó¨ÌñâÏÇ¨ Í¥ÄÎ¶¨',
            adminUsername: req.session.adminUsername || 'admin',
            agencies: agencies,
            baseUrl: `${req.protocol}://${req.get('host')}`,
            success: req.query.success,
            error: req.query.error
        });
    } catch (error) {
        console.error('Ïó¨ÌñâÏÇ¨ Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('admin/agencies', {
            title: 'Ïó¨ÌñâÏÇ¨ Í¥ÄÎ¶¨',
            adminUsername: req.session.adminUsername || 'admin',
            agencies: [],
            baseUrl: `${req.protocol}://${req.get('host')}`,
            success: null,
            error: 'load_error'
        });
    }
});

// Í¥ÄÎ¶¨Ïûê Ï†úÌú¥ÏóÖÏ≤¥
app.get('/admin/stores', requireAuth, async (req, res) => {
    try {
        const stores = await dbHelpers.getStores();
        res.render('admin/stores', {
            title: 'Ï†úÌú¥ÏóÖÏ≤¥ Í¥ÄÎ¶¨',
            stores,
            success: req.query.success,
            error: req.query.error
        });
    } catch (error) {
        console.error('Ï†úÌú¥ÏóÖÏ≤¥ Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('admin/stores', {
            title: 'Ï†úÌú¥ÏóÖÏ≤¥ Í¥ÄÎ¶¨',
            stores: [],
            error: 'load_error'
        });
    }
});

// Í¥ÄÎ¶¨Ïûê Í≥†Í∞ù Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ
app.get('/admin/customers', requireAuth, async (req, res) => {
    try {
        const page = Math.max(1, parseInt(req.query.page) || 1);
        const limit = 20;
        const offset = (page - 1) * limit;

        const users = await dbHelpers.getUsers();
        const totalUsers = users.length;
        const paginatedUsers = users.slice(offset, offset + limit);
        
        const totalPages = Math.ceil(totalUsers / limit);

        res.render('admin/customers', {
            title: 'Í≥†Í∞ù Í¥ÄÎ¶¨',
            users: paginatedUsers,
            pagination: {
                currentPage: page,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1
            },
            success: req.query.success,
            error: req.query.error
        });
    } catch (error) {
        console.error('Í≥†Í∞ù Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('admin/customers', {
            title: 'Í≥†Í∞ù Í¥ÄÎ¶¨',
            users: [],
            pagination: { currentPage: 1, totalPages: 0, hasNext: false, hasPrev: false },
            error: 'load_error'
        });
    }
});

// Í¥ÄÎ¶¨Ïûê ÏÇ¨Ïö© Ïù¥Î†• ÌéòÏù¥ÏßÄ
app.get('/admin/usage-history', requireAuth, async (req, res) => {
    try {
        const page = Math.max(1, parseInt(req.query.page) || 1);
        const limit = 50;
        const offset = (page - 1) * limit;

        const allUsages = await dbHelpers.getUsages();
        const totalUsages = allUsages.length;
        const paginatedUsages = allUsages
            .sort((a, b) => new Date(b.used_at) - new Date(a.used_at))
            .slice(offset, offset + limit);
        
        const totalPages = Math.ceil(totalUsages / limit);

        res.render('admin/usage-history', {
            title: 'ÏÇ¨Ïö© Ïù¥Î†•',
            usages: paginatedUsages,
            pagination: {
                currentPage: page,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1
            },
            success: req.query.success,
            error: req.query.error
        });
    } catch (error) {
        console.error('ÏÇ¨Ïö© Ïù¥Î†• ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('admin/usage-history', {
            title: 'ÏÇ¨Ïö© Ïù¥Î†•',
            usages: [],
            pagination: { currentPage: 1, totalPages: 0, hasNext: false, hasPrev: false },
            error: 'load_error'
        });
    }
});

// Í¥ÄÎ¶¨Ïûê Í¥ëÍ≥† Î∞∞ÎÑà Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ
app.get('/admin/banners', requireAuth, async (req, res) => {
    try {
        let banners = [];
        if (dbMode === 'postgresql') {
            const result = await pool.query('SELECT * FROM banners ORDER BY display_order, created_at DESC');
            banners = result.rows;
        } else {
            banners = await jsonDB.findAll('banners');
        }

        res.render('admin/banners', {
            title: 'Í¥ëÍ≥† Î∞∞ÎÑà Í¥ÄÎ¶¨',
            adminUsername: req.session.adminUsername || 'admin',
            banners,
            success: req.query.success,
            error: req.query.error
        });
    } catch (error) {
        console.error('Í¥ëÍ≥† Î∞∞ÎÑà Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('admin/banners', {
            title: 'Í¥ëÍ≥† Î∞∞ÎÑà Í¥ÄÎ¶¨',
            adminUsername: req.session.adminUsername || 'admin',
            banners: [],
            success: null,
            error: 'load_error'
        });
    }
});

// Î∞∞ÎÑà ÏÉùÏÑ± (Í¥ÄÎ¶¨Ïûê)
app.post('/admin/banners', requireAuth, async (req, res) => {
    try {
        const wantsJson = req.xhr || (req.headers.accept && req.headers.accept.includes('application/json'));
        let { advertiser_name, title, image_url, link_url, description, display_order } = req.body;
        let display_locations = req.body.display_locations;

        advertiser_name = String(advertiser_name || '').trim();
        title = String(title || '').trim();
        image_url = String(image_url || '').trim();
        link_url = (link_url && String(link_url).trim()) || null;
        description = (description && String(description).trim()) || null;
        const orderNum = Number(display_order);
        display_order = Number.isFinite(orderNum) ? orderNum : 0;

        // Ï≤¥ÌÅ¨Î∞ïÏä§ Îã§Ï§ë Í∞í Ï≤òÎ¶¨
        if (!Array.isArray(display_locations)) {
            display_locations = typeof display_locations === 'undefined' ? [] : [display_locations];
        }
        const locationsInt = display_locations
            .map(v => Number(v))
            .filter(n => Number.isFinite(n) && n > 0);
        const finalLocations = locationsInt.length ? locationsInt : [1];

        if (!advertiser_name && !title) {
            if (wantsJson) return res.json({ success: false, message: 'Í¥ëÍ≥†Ï£ºÎ™Ö ÎòêÎäî Ï†úÎ™© Ï§ë ÌïòÎÇòÎäî ÌïÑÏàòÏûÖÎãàÎã§.' });
            return res.redirect('/admin/banners?error=missing_title');
        }
        if (!image_url) {
            if (wantsJson) return res.json({ success: false, message: 'Î∞∞ÎÑà Ïù¥ÎØ∏ÏßÄ URLÏùÄ ÌïÑÏàòÏûÖÎãàÎã§.' });
            return res.redirect('/admin/banners?error=missing_image');
        }

        // Î∞∞ÎÑà ÏÉùÏÑ± (description ÌïÑÎìú Ìè¨Ìï®)
        const banner = await dbHelpers.createBanner({
            advertiser_name: title || advertiser_name,
            image_url,
            link_url,
            description,
            is_active: true,
            display_order,
            display_locations: finalLocations
        });

        if (wantsJson) {
            return res.json({ success: true, message: 'Î∞∞ÎÑàÍ∞Ä Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.', banner });
        } else {
            return res.redirect('/admin/banners?success=1');
        }
    } catch (error) {
        console.error('Î∞∞ÎÑà ÏÉùÏÑ± Ïò§Î•ò:', error);
        const wantsJson = req.xhr || (req.headers.accept && req.headers.accept.includes('application/json'));
        if (wantsJson) {
            return res.json({ success: false, message: 'Î∞∞ÎÑà Ï∂îÍ∞Ä Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
        } else {
            return res.redirect('/admin/banners?error=server');
        }
    }
});

// Î©îÏù∏ ÌéòÏù¥ÏßÄ
app.get('/', async (req, res) => {
    // Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (Ïò§Î•ò Î∞úÏÉù Ïãú Îπà Î∞∞Ïó¥Î°ú ÎåÄÏ≤¥ÌïòÏó¨ ÌéòÏù¥ÏßÄÎäî Ìï≠ÏÉÅ Î†åÎçî)
    let agencies = [];
    let banners = [];
    try {
        agencies = await dbHelpers.getAgencies();
    } catch (err) {
        console.warn('Ïó¨ÌñâÏÇ¨ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', err.message);
    }
    try {
        banners = await dbHelpers.getBanners();
    } catch (err) {
        console.warn('Î∞∞ÎÑà Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', err.message);
    }

    try {
        res.render('index', {
            title: 'Í¥åÏÑ∏Ïù¥Î∏åÏπ¥Îìú',
            currentPage: 'home',
            agencies,
            banners,
            partnerAgency: null
        });
    } catch (renderErr) {
        console.error('Î©îÏù∏ ÌéòÏù¥ÏßÄ Î†åÎçîÎßÅ Ïò§Î•ò:', renderErr);
        res.status(500).render('error', {
            title: 'ÏÑúÎ≤Ñ Ïò§Î•ò',
            message: 'ÌéòÏù¥ÏßÄ Î†åÎçîÎßÅ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
            error: { status: 500, message: renderErr.message }
        });
    }
});

// Ïó¨ÌñâÏÇ¨ Ï†ÑÏö© ÎûúÎî© ÌéòÏù¥ÏßÄ
app.get('/partner/:code', async (req, res) => {
    try {
        const { code } = req.params;
        
        // Ïó¨ÌñâÏÇ¨ ÏΩîÎìúÎ°ú Ïó¨ÌñâÏÇ¨ Ï†ïÎ≥¥ Ï°∞Ìöå
        const partnerAgency = await dbHelpers.getAgencyByCode(code);
        if (!partnerAgency) {
            return res.render('error', {
                title: 'Ïó¨ÌñâÏÇ¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
                message: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïó¨ÌñâÏÇ¨ ÏΩîÎìúÏûÖÎãàÎã§.',
                error: { status: 404 }
            });
        }

        // Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
        let agencies = [];
        let banners = [];
        try {
            agencies = await dbHelpers.getAgencies();
        } catch (err) {
            console.warn('Ïó¨ÌñâÏÇ¨ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', err.message);
        }
        try {
            banners = await dbHelpers.getBanners();
        } catch (err) {
            console.warn('Î∞∞ÎÑà Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', err.message);
        }

        res.render('index', {
            title: `Í¥åÏÑ∏Ïù¥Î∏åÏπ¥Îìú - ${partnerAgency.name}`,
            currentPage: 'home',
            agencies,
            banners,
            partnerAgency: partnerAgency
        });
        
    } catch (error) {
        console.error('ÌååÌä∏ÎÑà ÎûúÎî© ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('error', {
            title: 'Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§',
            message: 'ÌéòÏù¥ÏßÄÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
            error: { status: 500, message: error.message }
        });
    }
});

// Ïó¨ÌñâÏÇ¨Î≥Ñ ÎûúÎî© ÌéòÏù¥ÏßÄ
app.get('/partner/:agencyCode', async (req, res) => {
    try {
        const { agencyCode } = req.params;
        const agency = await dbHelpers.getAgencyByCode(agencyCode);
        
        if (!agency) {
            return res.render('error', {
                title: 'ÌéòÏù¥ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
                message: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïó¨ÌñâÏÇ¨ ÏΩîÎìúÏûÖÎãàÎã§.',
                error: { status: 404 }
            });
        }
        
        // Î∞∞ÎÑà ÌëúÏãú Ïó¨Î∂Ä ÌôïÏù∏
        let banners = [];
        if (agency.show_banners_on_landing) {
            banners = await dbHelpers.getBanners();
        }
        
        res.render('index', {
            title: `${agency.name} - Í¥åÏÑ∏Ïù¥Î∏åÏπ¥Îìú`,
            currentPage: 'home',
            agency: agency,
            banners: banners,
            partnerMode: true,
            selectedAgency: agency
        });
    } catch (error) {
        console.error('ÌååÌä∏ÎÑà ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('error', {
            title: 'Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§',
            message: 'ÌéòÏù¥ÏßÄÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
            error: { status: 500 }
        });
    }
});

// Î∞∞ÎÑà ÌÅ¥Î¶≠ Ï∂îÏ†Å API
app.post('/banner/click/:id', async (req, res) => {
    const { id } = req.params;
    try {
        await dbHelpers.incrementBannerClick(id);
        res.json({ success: true });
    } catch (error) {
        console.error('Î∞∞ÎÑà ÌÅ¥Î¶≠ Ï∂îÏ†Å Ïò§Î•ò:', error);
        res.json({ success: false });
    }
});

// Î∞úÍ∏â ÏôÑÎ£å ÌéòÏù¥ÏßÄ
app.get('/register/success', async (req, res) => {
    try {
        const { token } = req.query;
        if (!token) {
            return res.redirect('/issue');
        }

        const user = await dbHelpers.getUserByToken(token);
        if (!user) {
            return res.redirect('/issue');
        }

        const agency = user.agency_id ? await dbHelpers.getAgencyById(user.agency_id) : null;
        const banners = await dbHelpers.getBanners();

        // ÎßåÎ£å ÌÖçÏä§Ìä∏ Íµ¨ÏÑ± (ÏûàÏúºÎ©¥ ÌëúÏãú)
        let expiration_text = null;
        if (user.expiration_start && user.expiration_end) {
            const start = new Date(user.expiration_start);
            const end = new Date(user.expiration_end);
            const fmt = (d) => `${d.getFullYear()}.${String(d.getMonth()+1).padStart(2,'0')}.${String(d.getDate()).padStart(2,'0')}`;
            expiration_text = `Save Card Expiration Date ${fmt(start)}~${fmt(end)}`;
        }

        const userForView = {
            customer_name: user.name || user.customer_name || 'Í≥†Í∞ù',
            agency_name: agency ? agency.name : 'Unknown',
            expiration_text,
            token: token
        };

        const cardUrl = `/card?token=${encodeURIComponent(token)}`;
        const qrImageUrl = user.qr_code; // DataURL

        return res.render('register-success', {
            title: 'Í¥åÏÑ∏Ïù¥Î∏åÏπ¥Îìú Î∞úÍ∏â ÏôÑÎ£å',
            user: userForView,
            cardUrl,
            qrImageUrl,
            banners
        });
    } catch (error) {
        console.error('Î∞úÍ∏â ÏÑ±Í≥µ ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        return res.redirect('/issue');
    }
});

// Ï†úÌú¥ÏóÖÏ≤¥ Î™©Î°ù ÌéòÏù¥ÏßÄ
app.get('/stores', async (req, res) => {
    try {
        let partnerAgency = null;
        if (req.query.agency) {
            partnerAgency = await dbHelpers.getAgencyByCode(req.query.agency);
        }
        
        const stores = await dbHelpers.getStores();
        const banners = await dbHelpers.getBanners();
        
        // Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉùÏÑ± (storesÏóêÏÑú Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÏ∂ú)
        const categories = {};
        if (stores && stores.length > 0) {
            stores.forEach(store => {
                if (store.category) {
                    categories[store.category] = true;
                }
            });
        }
        
        res.render('stores', {
            title: 'Ï†úÌú¥ÏóÖÏ≤¥',
            currentPage: 'stores',
            stores: stores,
            banners: banners,
            categories: categories,
            partnerAgency: partnerAgency
        });
    } catch (error) {
        console.error('Ï†úÌú¥ÏóÖÏ≤¥ Î™©Î°ù Ïò§Î•ò:', error);
        res.render('stores', {
            title: 'Ï†úÌú¥ÏóÖÏ≤¥',
            currentPage: 'stores',
            stores: [],
            banners: [],
            categories: {},
            partnerAgency: null
        });
    }
});

// Ï†úÌú¥ Ïã†Ï≤≠ ÌéòÏù¥ÏßÄ
app.get('/partner-apply', (req, res) => {
    try {
        res.render('partner-apply', {
            title: 'Ï†úÌú¥ÏóÖÏ≤¥ Ïã†Ï≤≠'
        });
    } catch (error) {
        console.error('Ï†úÌú¥ Ïã†Ï≤≠ ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.status(500).render('error', {
            title: 'ÏÑúÎ≤Ñ Ïò§Î•ò',
            message: 'ÌéòÏù¥ÏßÄÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
            error: { status: 500 }
        });
    }
});

// ÏÇ¨Ïö©Ïûê Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄ
app.get('/login', async (req, res) => {
    try {
        let partnerAgency = null;
        if (req.query.agency) {
            partnerAgency = await dbHelpers.getAgencyByCode(req.query.agency);
        }
        
        res.render('login', {
            title: 'Î°úÍ∑∏Ïù∏',
            currentPage: 'my-card',
            error: null,
            success: null,
            partnerAgency: partnerAgency
        });
    } catch (error) {
        console.error('Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('login', {
            title: 'Î°úÍ∑∏Ïù∏',
            currentPage: 'my-card',
            error: null,
            success: null,
            partnerAgency: null
        });
    }
});

// ÏÇ¨Ïö©Ïûê Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
app.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        
        if (!email || !password) {
            return res.render('login', {
                title: 'Î°úÍ∑∏Ïù∏',
                currentPage: 'my-card',
                error: 'Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.',
                success: null
            });
        }
        
        if (!/^[0-9]{4}$/.test(password)) {
            return res.render('login', {
                title: 'Î°úÍ∑∏Ïù∏',
                currentPage: 'my-card',
                error: 'ÎπÑÎ∞ÄÎ≤àÌò∏Îäî 4ÏûêÎ¶¨ Ïà´ÏûêÏó¨Ïïº Ìï©ÎãàÎã§.',
                success: null
            });
        }
        
        // Ïù¥Î©îÏùºÎ°ú ÏÇ¨Ïö©Ïûê Ï∞æÍ∏∞
        let user = null;
        if (dbMode === 'postgresql') {
            const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
            user = result.rows[0];
        } else {
            const users = jsonDB.getUsers();
            user = users.find(u => u.email === email);
        }
        
        if (!user) {
            return res.render('login', {
                title: 'Î°úÍ∑∏Ïù∏',
                currentPage: 'my-card',
                error: 'Îì±Î°ùÎêòÏßÄ ÏïäÏùÄ Ïù¥Î©îÏùºÏûÖÎãàÎã§.',
                success: null
            });
        }
        
        if (!user.pin) {
            return res.render('login', {
                title: 'Î°úÍ∑∏Ïù∏',
                currentPage: 'my-card',
                error: 'ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî.',
                success: null
            });
        }
        
        // ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏
        const isPasswordValid = await bcrypt.compare(password, user.pin);
        if (!isPasswordValid) {
            return res.render('login', {
                title: 'Î°úÍ∑∏Ïù∏',
                currentPage: 'my-card',
                error: 'ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.',
                success: null
            });
        }
        
        // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ - Ïπ¥Îìú ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
        res.redirect(`/card?token=${encodeURIComponent(user.token)}&success=1`);
        
    } catch (error) {
        console.error('ÏÇ¨Ïö©Ïûê Î°úÍ∑∏Ïù∏ Ïò§Î•ò:', error);
        res.render('login', {
            title: 'Î°úÍ∑∏Ïù∏',
            currentPage: 'my-card',
            error: 'Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
            success: null
        });
    }
});

// Ïπ¥Îìú Î∞úÍ∏â ÌéòÏù¥ÏßÄ
app.get('/register', async (req, res) => {
    try {
        const agencies = await dbHelpers.getAgencies();
        const { agency } = req.query;
        
        let selectedAgency = null;
        if (agency) {
            selectedAgency = await dbHelpers.getAgencyByCode(agency);
        }
        
        res.render('register', {
            title: 'Ïπ¥Îìú Î∞úÍ∏â',
            currentPage: 'register',
            agencies: agencies,
            error: null,
            success: null,
            selectedAgency: selectedAgency,
            partnerAgency: selectedAgency
        });
    } catch (error) {
        console.error('Ïπ¥Îìú Î∞úÍ∏â ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('register', {
            title: 'Ïπ¥Îìú Î∞úÍ∏â',
            currentPage: 'register',
            agencies: [],
            error: null,
            success: null,
            selectedAgency: null,
            partnerAgency: null
        });
    }
});

// ÏÇ¨Ïö©Ïûê Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄ
app.get('/login', (req, res) => {
    res.render('login', {
        title: 'Î°úÍ∑∏Ïù∏',
        error: null
    });
});

// ÎÇ¥ Ïπ¥Îìú ÌéòÏù¥ÏßÄ
app.get('/my-card', (req, res) => {
    res.render('my-card', {
        title: 'ÎÇ¥ Ïπ¥Îìú',
        currentPage: 'my-card',
        user: null,
        usages: []
    });
});

// Ïπ¥Îìú Î∞úÍ∏â ÌéòÏù¥ÏßÄ
app.get('/issue', async (req, res) => {
    try {
        const agencies = await dbHelpers.getAgencies();
        res.render('issue', {
            title: 'Ïπ¥Îìú Î∞úÍ∏â',
            agencies: agencies
        });
    } catch (error) {
        console.error('Ïπ¥Îìú Î∞úÍ∏â ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('issue', {
            title: 'Ïπ¥Îìú Î∞úÍ∏â',
            agencies: []
        });
    }
});

// Ïπ¥Îìú Î∞úÍ∏â Ï≤òÎ¶¨
app.post('/issue', async (req, res) => {
    try {
        const { name, email, issue_code } = req.body;
        let { agency_id, agency_code } = req.body;
        const pin = (req.body.pin || '').toString().trim();
        const phone = (req.body.phone || '').toString().trim() || null; // ÏÑ†ÌÉù ÏûÖÎ†•

        // Î∞úÍ∏â ÏΩîÎìú Í≤ÄÏ¶ù (ÌïÑÏàò)
        if (!issue_code || !issue_code.trim()) {
            return res.json({ success: false, message: 'Î∞úÍ∏â ÏΩîÎìúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' });
        }

        const codeValidation = await validateIssueCode(issue_code.trim().toLowerCase());
        if (!codeValidation.valid) {
            return res.json({ success: false, message: codeValidation.message });
        }

        // agency_id Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ agency_codeÎ°ú Ï°∞Ìöå
        let agency = null;
        if (agency_id) {
            const idNum = Number(agency_id);
            if (!Number.isFinite(idNum)) {
                return res.json({ success: false, message: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïó¨ÌñâÏÇ¨ IDÏûÖÎãàÎã§.' });
            }
            agency = await dbHelpers.getAgencyById(idNum);
        } else if (agency_code) {
            agency_code = String(agency_code).trim();
            agency = await dbHelpers.getAgencyByCode(agency_code);
            if (agency) {
                agency_id = agency.id;
            }
        }

        // ÌïÑÏàòÍ∞í: name, agency, pin(4ÏûêÎ¶¨)
        if (!name || !agency_id || !agency) {
            return res.json({ success: false, message: 'Ïù¥Î¶ÑÍ≥º Ïó¨ÌñâÏÇ¨Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.' });
        }
        if (!/^[0-9]{4}$/.test(pin)) {
            return res.json({ success: false, message: 'ÎπÑÎ∞ÄÎ≤àÌò∏Îäî 4ÏûêÎ¶¨ Ïà´ÏûêÏó¨Ïïº Ìï©ÎãàÎã§.' });
        }
        
        // ÌÜ†ÌÅ∞ ÏÉùÏÑ±
        const token = uuidv4();
        
        // Ïú†Ìö®Í∏∞Í∞Ñ ÏÑ§Ï†ï (Î∞úÍ∏âÏùºÎ°úÎ∂ÄÌÑ∞ 1ÎÖÑ)
        const expirationStart = new Date();
        const expirationEnd = new Date();
        expirationEnd.setFullYear(expirationEnd.getFullYear() + 1);
        
        const expirationText = `Save Card Expiration Date ${formatDate(expirationStart)}~${formatDate(expirationEnd)}`;
        
        // QR ÏΩîÎìú ÏÉùÏÑ± (Base64 Ïù∏ÎùºÏù∏ Î∞©Ïãù)
        const qrUrl = `${req.protocol}://${req.get('host')}/card?token=${token}&staff=true`;
        const qrCodeDataURL = await QRCode.toDataURL(qrUrl, {
            width: 200,
            margin: 2,
            color: {
                dark: '#000000',
                light: '#FFFFFF'
            }
        });
        
        // PIN Ìï¥Ïãú Ï≤òÎ¶¨
        const saltRounds = Number(process.env.PIN_SALT_ROUNDS || 10);
        const hashedPin = await bcrypt.hash(pin, saltRounds);

        // (Ïö¥ÏòÅ ÏïàÏ†ÑÏû•Ïπò) users ÌÖåÏù¥Î∏î ÌïÑÏàò Ïª¨Îüº Î≥¥Ï†ï
        if (dbMode === 'postgresql') {
            try {
                await pool.query(`
                  ALTER TABLE users
                  ADD COLUMN IF NOT EXISTS name VARCHAR(255),
                  ADD COLUMN IF NOT EXISTS qr_code TEXT,
                  ADD COLUMN IF NOT EXISTS expiration_start TIMESTAMP,
                  ADD COLUMN IF NOT EXISTS expiration_end TIMESTAMP,
                  ADD COLUMN IF NOT EXISTS pin VARCHAR(100)
                `);
                // Í≥ºÍ±∞ Ïä§ÌÇ§Îßà Ìò∏Ìôò: customer_nameÎßå ÏûàÍ≥† nameÏù¥ ÎπÑÏñ¥ÏûàÎäî Í≤ΩÏö∞ ÎèôÍ∏∞Ìôî
                await pool.query(`
                  DO $$
                  BEGIN
                    IF EXISTS (
                      SELECT 1 FROM information_schema.columns
                      WHERE table_name='users' AND column_name='customer_name'
                    ) THEN
                      UPDATE users SET name = customer_name WHERE name IS NULL OR name = '';
                    END IF;
                  END$$;
                `);
                // Í∏∞Ï°¥ pin Ïª¨Îüº Í∏∏Ïù¥Í∞Ä 100 ÎØ∏ÎßåÏù¥Î©¥ ÌôïÏû•
                await pool.query(`
                  DO $$
                  BEGIN
                    IF EXISTS (
                      SELECT 1 FROM information_schema.columns
                      WHERE table_name='users' AND column_name='pin' AND character_maximum_length IS NOT NULL AND character_maximum_length < 100
                    ) THEN
                      ALTER TABLE users ALTER COLUMN pin TYPE VARCHAR(100);
                    END IF;
                  END$$;
                `);
            } catch (ensureErr) {
                console.warn('users ÌÖåÏù¥Î∏î Ïª¨Îüº Î≥¥Ï†ï Ï§ë Í≤ΩÍ≥†:', ensureErr.message);
            }
        }

        // ÏÇ¨Ïö©Ïûê ÏÉùÏÑ± (Ïö¥ÏòÅ DBÏóê pin Ïª¨ÎüºÏù¥ ÏóÜÎäî Í≤ΩÏö∞ ÏûêÎèô Î≥¥Ï†ï ÌõÑ Ïû¨ÏãúÎèÑ)
        let user;
        try {
            user = await dbHelpers.createUser({
                name,
                phone,
                email,
                agency_id,
                token,
                qr_code: qrCodeDataURL,
                expiration_start: expirationStart,
                expiration_end: expirationEnd,
                pin: hashedPin
            });
        } catch (e) {
            // PostgreSQL: undefined_column = 42703
            const missingPinColumn = e && (e.code === '42703' || /column\s+"?pin"?\s+of\s+relation\s+"?users"?/i.test(e.message || ''));
            if (dbMode === 'postgresql' && missingPinColumn) {
                console.warn('users.pin Ïª¨ÎüºÏù¥ ÏóÜÏñ¥ ÏûêÎèôÏúºÎ°ú Ï∂îÍ∞ÄÌï©ÎãàÎã§.');
                try {
                    await pool.query('ALTER TABLE users ADD COLUMN IF NOT EXISTS pin VARCHAR(100)');
                    await pool.query(`
                      DO $$
                      BEGIN
                        IF EXISTS (
                          SELECT 1 FROM information_schema.columns
                          WHERE table_name='users' AND column_name='pin' AND character_maximum_length IS NOT NULL AND character_maximum_length < 100
                        ) THEN
                          ALTER TABLE users ALTER COLUMN pin TYPE VARCHAR(100);
                        END IF;
                      END$$;
                    `);
                    // Ïû¨ÏãúÎèÑ
                    user = await dbHelpers.createUser({
                        name,
                        phone,
                        email,
                        agency_id,
                        token,
                        qr_code: qrCodeDataURL,
                        expiration_start: expirationStart,
                        expiration_end: expirationEnd,
                        pin: hashedPin
                    });
                } catch (e2) {
                    console.error('ÌïÄ Ïª¨Îüº Ï∂îÍ∞Ä ÎòêÎäî Ïû¨ÏãúÎèÑ Ï§ë Ïò§Î•ò:', e2);
                    throw e2;
                }
            } else {
                throw e;
            }
        }
        
        // Î∞úÍ∏â ÏΩîÎìúÎ•º ÏÇ¨Ïö©Îê®ÏúºÎ°ú ÌëúÏãú
        if (dbMode === 'postgresql' && codeValidation.codeId) {
            try {
                await pool.query(
                    'UPDATE issue_codes SET is_used = true, used_by_user_id = $1, used_at = NOW() WHERE id = $2',
                    [user.id, codeValidation.codeId]
                );
            } catch (codeUpdateError) {
                console.error('Î∞úÍ∏â ÏΩîÎìú ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', codeUpdateError);
                // ÏΩîÎìú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®Ìï¥ÎèÑ Ïπ¥Îìú Î∞úÍ∏âÏùÄ ÏÑ±Í≥µÏúºÎ°ú Ï≤òÎ¶¨
            }
        }
        
        // Ï†úÏ∂ú Î∞©ÏãùÏóê Îî∞Î•∏ ÏùëÎãµ Î∂ÑÍ∏∞: AJAXÏù¥Î©¥ JSON, ÏùºÎ∞ò HTML ÌèºÏù¥Î©¥ Î∞úÍ∏â ÏôÑÎ£å ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
        const isAjax = req.xhr || (req.get('X-Requested-With') === 'XMLHttpRequest');
        const acceptsHtml = (req.accepts(['html','json']) === 'html');
        if (!isAjax && acceptsHtml) {
            return res.redirect(`/register/success?token=${encodeURIComponent(token)}`);
        }
        return res.json({
            success: true,
            message: 'Ïπ¥ÎìúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î∞úÍ∏âÎêòÏóàÏäµÎãàÎã§.',
            token: token,
            success_url: `/register/success?token=${encodeURIComponent(token)}`
        });
        
    } catch (error) {
        console.error('Ïπ¥Îìú Î∞úÍ∏â Ïò§Î•ò:', error);
        const expose = String(process.env.EXPOSE_ERROR || '').toLowerCase() === 'true';
        res.json({
            success: false,
            message: 'Ïπ¥Îìú Î∞úÍ∏â Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
            ...(expose ? { detail: error.message, code: error.code } : {})
        });
    }
});

// Ï†úÌú¥ Ïã†Ï≤≠ Ï†ëÏàò API
app.post('/api/partner-apply', async (req, res) => {
    try {
        // Ìèº ‚Üí DB Ïª¨Îüº Îß§Ìïë
        const business_name = (req.body.business_name || '').toString().trim();
        const contact_name = (req.body.contact_name || '').toString().trim();
        const phone = (req.body.phone || '').toString().trim();
        const email = (req.body.email || '').toString().trim() || null;
        const business_type = (req.body.business_type || '').toString().trim() || null;
        const location = (req.body.business_address || req.body.location || '').toString().trim() || null;
        const discount_offer = (req.body.proposed_discount || req.body.discount_offer || '').toString().trim() || null;
        // ÏÑ§Î™Ö/Ï∂îÍ∞ÄÏ†ïÎ≥¥Î•º ÌïòÎÇòÎ°ú Ìï©Ï≥ê Ï†ÄÏû• (Îëò Ï§ë ÌïòÎÇòÎßå ÏûàÏùÑ ÏàòÎèÑ ÏûàÏùå)
        const desc = (req.body.business_description || '').toString().trim();
        const notes = (req.body.additional_notes || req.body.additional_info || '').toString().trim();
        const additional_info = [desc, notes].filter(Boolean).join('\n\n');
        
        if (!business_name || !contact_name || !phone) {
            return res.status(400).json({ success: false, message: 'ÌïÑÏàò Ìï≠Î™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' });
        }
        
        if (dbMode === 'postgresql') {
            // Ï§ëÎ≥µ Ï≤¥ÌÅ¨
            const existingApp = await pool.query(
                'SELECT id FROM partner_applications WHERE business_name = $1 AND contact_name = $2 AND phone = $3',
                [business_name, contact_name, phone]
            );
            
            if (existingApp.rows.length > 0) {
                return res.json({
                    success: false,
                    message: 'Ïù¥ÎØ∏ ÎèôÏùºÌïú Ï†ïÎ≥¥Î°ú Ïã†Ï≤≠Îêú ÎÇ¥Ïó≠Ïù¥ ÏûàÏäµÎãàÎã§.'
                });
            }
            
            await pool.query(
                `INSERT INTO partner_applications (business_name, contact_name, phone, email, business_type, location, discount_offer, additional_info)
                 VALUES ($1,$2,$3,$4,$5,$6,$7,$8)`,
                [business_name, contact_name, phone, email, business_type, location, discount_offer, additional_info || null]
            );
        } else {
            await jsonDB.create('partner_applications', {
                id: Date.now(),
                business_name, contact_name, phone, email,
                business_type, location, discount_offer,
                additional_info: additional_info || null,
                status: 'pending',
                created_at: new Date().toISOString()
            });
        }
        
        res.json({ success: true });
    } catch (error) {
        console.error('Ï†úÌú¥ Ïã†Ï≤≠ Ï†ëÏàò Ïò§Î•ò:', error);
        res.status(500).json({ success: false, message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ÎÇ¥ Ïπ¥Îìú ÌéòÏù¥ÏßÄ
app.get('/my-card', async (req, res) => {
    try {
        const { token } = req.query;

        if (!token) {
            return res.render('error', {
                title: 'ÏûòÎ™ªÎêú Ï†ëÍ∑º',
                message: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïπ¥ÎìúÏûÖÎãàÎã§.',
                error: { status: 400 }
            });
        }
        
        const user = await dbHelpers.getUserByToken(token);
        if (!user) {
            return res.render('error', {
                title: 'Ïπ¥ÎìúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
                message: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïπ¥ÎìúÏûÖÎãàÎã§.',
                error: { status: 404 }
            });
        }
        
        const agency = await dbHelpers.getAgencyById(user.agency_id);
        const usages = await dbHelpers.getUsages(token);
        
        res.render('my-card', {
            title: 'ÎÇ¥ Ïπ¥Îìú',
            currentPage: 'my-card',
            user: { ...user, agency_name: agency ? agency.name : 'Unknown' },
            usages: usages.slice(0, 5)
        });
        
    } catch (error) {
        console.error('ÎÇ¥ Ïπ¥Îìú ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('error', {
            title: 'Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§',
            message: 'ÌéòÏù¥ÏßÄÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
            error: { status: 500 }
        });
    }
});

// Ïπ¥Îìú Î≥¥Í∏∞ ÌéòÏù¥ÏßÄ (Í≤ΩÎ°ú ÌååÎùºÎØ∏ÌÑ∞ Î∞©Ïãù) - /cardÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
app.get('/view-card/:token', (req, res) => {
    const { token } = req.params;
    if (!token) {
        return res.redirect('/issue');
    }
    res.redirect(`/card?token=${token}`);
});

// Í¥ÄÎ¶¨Ïûê Ï†ÑÏö© - Í≥†Í∞ù Ïπ¥Îìú Ï†ïÎ≥¥ API (Î™®Îã¨Ïö©)
app.get('/admin/card-info/:token', requireAuth, async (req, res) => {
    const { token } = req.params;

    try {
        const user = await dbHelpers.getUserByToken(token);
        if (!user) {
            return res.json({ success: false, message: 'Ïπ¥ÎìúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' });
        }

        const agency = await dbHelpers.getAgencyById(user.agency_id);
        
        // ÏÇ¨Ïö© Ïù¥Î†• Ï°∞Ìöå (ÏµúÍ∑º 10Í∞ú)
        const usages = await dbHelpers.getUsages(token);
        const recentUsages = usages
            .sort((a, b) => new Date(b.used_at) - new Date(a.used_at))
            .slice(0, 10);

        res.json({
            success: true,
            user: {
                ...user,
                agency_name: agency ? agency.name : 'Unknown'
            },
            usages: recentUsages
        });
    } catch (error) {
        console.error('Í¥ÄÎ¶¨Ïûê Ïπ¥Îìú Ï†ïÎ≥¥ Ï°∞Ìöå Ïò§Î•ò:', error);
        res.json({ success: false, message: 'Ïπ¥Îìú Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// Ïπ¥Îìú ÏÇ¨Ïö© ÌéòÏù¥ÏßÄ (QR Ïä§Ï∫î)
app.get('/card', async (req, res) => {
    try {
        const { token, staff, success: successFlag } = req.query;
        
        if (!token) {
            return res.render('error', {
                title: 'ÏûòÎ™ªÎêú Ï†ëÍ∑º',
                message: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïπ¥ÎìúÏûÖÎãàÎã§.',
                error: { status: 400 }
            });
        }
        
        const user = await dbHelpers.getUserByToken(token);
        if (!user) {
            return res.render('error', {
                title: 'Ïπ¥ÎìúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
                message: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïπ¥ÎìúÏûÖÎãàÎã§.',
                error: { status: 404 }
            });
        }
        
        const agency = await dbHelpers.getAgencyById(user.agency_id);
        const banners = await dbHelpers.getBanners();
        const banner = banners.length > 0 ? banners[Math.floor(Math.random() * banners.length)] : null;
        const usages = await dbHelpers.getUsages(token);
        const stores = await dbHelpers.getStores();
        const isStaffMode = staff === 'true';
        
        const successMessage = (successFlag === '1' || successFlag === 'true')
            ? 'Ïπ¥Îìú Î∞úÍ∏âÏù¥ ÏôÑÎ£åÎêòÏóàÏñ¥Ïöî! ÏïÑÎûò QRÏùÑ Îß§Ïû• ÏßÅÏõêÏóêÍ≤å Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî.'
            : null;

        res.render('card', {
            title: 'Í¥ÑÏÑ∏Ïù¥Î∏åÏπ¥Îìú',
            currentPage: 'card',
            user: { 
                ...user, 
                agency_name: agency ? agency.name : 'Unknown',
                customer_name: user.customer_name || user.name || 'Í≥†Í∞ù',
                qr_code: user.qr_code || `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(`https://savecard-production.up.railway.app/card?token=${token}&staff=true`)}`
            },
            banner: banner,
            usages: usages.slice(0, 5),
            stores: stores,
            isStaffMode: isStaffMode,
            success: successMessage,
            error: null
        });
        
    } catch (error) {
        console.error('Ïπ¥Îìú ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('error', {
            title: 'Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§',
            message: 'ÌéòÏù¥ÏßÄÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
            error: { status: 500 }
        });
    }
});

// Ïπ¥Îìú ÎπÑÎ∞ÄÎ≤àÌò∏ Í≤ÄÏ¶ù
app.post('/verify-password', async (req, res) => {
    try {
        const token = (req.body.token || '').toString().trim();
        const password = (req.body.password || '').toString().trim();

        if (!token || !password) {
            return res.json({ success: false, message: 'ÌïÑÏàò Ï†ïÎ≥¥Í∞Ä ÎàÑÎùΩÎêòÏóàÏäµÎãàÎã§.' });
        }
        if (!/^[0-9]{4}$/.test(password)) {
            return res.json({ success: false, message: 'ÎπÑÎ∞ÄÎ≤àÌò∏Îäî 4ÏûêÎ¶¨ Ïà´ÏûêÏó¨Ïïº Ìï©ÎãàÎã§.' });
        }

        const user = await dbHelpers.getUserByToken(token);
        if (!user) {
            return res.json({ success: false, message: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïπ¥ÎìúÏûÖÎãàÎã§.' });
        }
        if (!user.pin) {
            return res.json({ success: false, message: 'ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî.' });
        }

        const ok = await bcrypt.compare(password, user.pin);
        if (!ok) {
            return res.json({ success: false, message: 'ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.' });
        }
        return res.json({ success: true });
    } catch (error) {
        console.error('ÎπÑÎ∞ÄÎ≤àÌò∏ Í≤ÄÏ¶ù Ïò§Î•ò:', error);
        const expose = String(process.env.EXPOSE_ERROR || '').toLowerCase() === 'true';
        return res.json({ success: false, message: 'Ïù∏Ï¶ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', ...(expose ? { detail: error.message } : {}) });
    }
});

// Ïπ¥Îìú ÏÇ¨Ïö© Ï≤òÎ¶¨
app.post('/card/use', async (req, res) => {
    try {
        const { token, store_code } = req.body;
        
        if (!token || !store_code) {
            return res.json({
                success: false,
                message: 'ÌïÑÏàò Ï†ïÎ≥¥Í∞Ä ÎàÑÎùΩÎêòÏóàÏäµÎãàÎã§.'
            });
        }
        
        const user = await dbHelpers.getUserByToken(token);
        if (!user) {
            return res.json({
                success: false,
                message: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïπ¥ÎìúÏûÖÎãàÎã§.'
            });
        }
        
        // ÏÇ¨Ïö© Í∏∞Î°ù ÏÉùÏÑ±
        await dbHelpers.createUsage({
            token: token,
            store_name: store_code
        });
        
        res.json({
            success: true,
            message: 'Ìï†Ïù∏Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÅÏö©ÎêòÏóàÏäµÎãàÎã§.'
        });
        
    } catch (error) {
        console.error('Ïπ¥Îìú ÏÇ¨Ïö© Ï≤òÎ¶¨ Ïò§Î•ò:', error);
        res.json({
            success: false,
            message: 'Ïπ¥Îìú ÏÇ¨Ïö© Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

// Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú
app.get('/admin/dashboard', requireAuth, async (req, res) => {
    try {
        const [users, agencies, stores, usages, banners] = await Promise.all([
            dbHelpers.getUsers(),
            dbHelpers.getAgencies(),
            dbHelpers.getStores(),
            dbHelpers.getUsages(),
            dbHelpers.getBanners()
        ]);
        
        res.render('admin/dashboard', {
            title: 'Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú',
            adminUsername: req.session.adminUsername || 'admin',
            stats: {
                total_agencies: agencies.length,
                total_users: users.length,
                total_usages: usages.length,
                total_stores: stores.length,
                active_banners: (banners || []).length
            },
            recentUsages: []
        });
    } catch (error) {
        console.error('Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú Ïò§Î•ò:', error);
        res.render('admin/dashboard', {
            title: 'Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú',
            adminUsername: req.session.adminUsername || 'admin',
            stats: { 
                total_agencies: 0, 
                total_users: 0, 
                total_usages: 0, 
                total_stores: 0,
                active_banners: 0 
            },
            recentUsages: []
        });
    }
});


// Ïó¨ÌñâÏÇ¨ ÏÉùÏÑ±
app.post('/admin/agencies', requireAuth, async (req, res) => {
    try {
        // ÌîÑÎ°úÎçïÏÖò ÏßÑÎã® Î°úÍ∑∏ (ÏûÑÏãú): Ïã§Ï†úÎ°ú Ïñ¥Îñ§ Î≥∏Î¨∏Ïù¥ Ïò§ÎäîÏßÄ ÌôïÏù∏
        try {
            console.log('[POST /admin/agencies] content-type =', req.headers['content-type']);
            console.log('[POST /admin/agencies] raw body keys =', Object.keys(req.body || {}));
            console.log('[POST /admin/agencies] body preview =', {
                name: req.body?.name,
                code: req.body?.code,
                agency_code: req.body?.agency_code,
                show_banners_on_landing: req.body?.show_banners_on_landing
            });
        } catch (e) {
            console.warn('[POST /admin/agencies] log error:', e?.message);
        }

        const name = (req.body.name || '').trim();
        const code = (req.body.code || req.body.agency_code || '').trim();
        const discount_info = req.body.discount_info || '';
        const show_banners_on_landing = req.body.show_banners_on_landing;
        
        if (!name || !code) {
            return res.json({
                success: false,
                message: 'Ïó¨ÌñâÏÇ¨Î™ÖÍ≥º ÏΩîÎìúÎäî ÌïÑÏàòÏûÖÎãàÎã§.'
            });
        }
        
        const agency = await dbHelpers.createAgency({
            name,
            code,
            discount_info,
            show_banners_on_landing: String(show_banners_on_landing) === 'true'
        });
        
        res.json({
            success: true,
            message: 'Ïó¨ÌñâÏÇ¨Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.',
            agency: agency
        });
        
    } catch (error) {
        console.error('Ïó¨ÌñâÏÇ¨ ÏÉùÏÑ± Ïò§Î•ò:', error);
        // PostgreSQL unique Ï†úÏïΩ ÏúÑÎ∞ò Ï≤òÎ¶¨ (code Ï§ëÎ≥µ Îì±)
        if (error && (error.code === '23505' || /unique/i.test(String(error.message)))) {
            return res.json({ success: false, message: 'Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÏΩîÎìúÏûÖÎãàÎã§. Îã§Î•∏ ÏΩîÎìúÎ•º ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî.' });
        }
        res.json({
            success: false,
            message: 'Ïó¨ÌñâÏÇ¨ Ï∂îÍ∞Ä Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

// Ïó¨ÌñâÏÇ¨ ÏàòÏ†ï
app.put('/admin/agencies/:id', requireAuth, async (req, res) => {
    try {
        const { id } = req.params;
        const name = (req.body.name || '').trim();
        const code = (req.body.code || req.body.agency_code || '').trim();
        const discount_info = req.body.discount_info || '';
        const show_banners_on_landing = req.body.show_banners_on_landing;
        const contact_email = (req.body.contact_email || '').trim();
        const contact_phone = (req.body.contact_phone || '').trim();
        const logo_url = (req.body.logo_url || '').trim();
        
        console.log('Ïó¨ÌñâÏÇ¨ ÏàòÏ†ï ÏöîÏ≤≠:', {
            id,
            name,
            code,
            discount_info,
            show_banners_on_landing,
            contact_email,
            contact_phone,
            logo_url,
            body: req.body
        });
        
        const agency = await dbHelpers.updateAgency(id, {
            name,
            code,
            discount_info,
            show_banners_on_landing: String(show_banners_on_landing) === 'true',
            contact_email,
            contact_phone,
            logo_url
        });
        
        console.log('ÏàòÏ†ï Í≤∞Í≥º:', agency);
        
        if (!agency) {
            return res.json({
                success: false,
                message: 'Ïó¨ÌñâÏÇ¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
            });
        }
        
        res.json({
            success: true,
            message: 'Ïó¨ÌñâÏÇ¨ Ï†ïÎ≥¥Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.',
            agency: agency
        });
        
    } catch (error) {
        console.error('Ïó¨ÌñâÏÇ¨ ÏàòÏ†ï Ïò§Î•ò:', error);
        console.error('Ïò§Î•ò ÏÉÅÏÑ∏:', error.message);
        console.error('Ïò§Î•ò Ïä§ÌÉù:', error.stack);
        res.json({
            success: false,
            message: `Ïó¨ÌñâÏÇ¨ ÏàòÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`
        });
    }
});

// Ïó¨ÌñâÏÇ¨ ÏàúÏúÑ Ï°∞Ï†ï
app.post('/admin/agencies/:id/move', requireAuth, async (req, res) => {
    try {
        const agencyId = Number(req.params.id);
        const { direction } = req.body; // 'up' ÎòêÎäî 'down'
        
        if (!Number.isFinite(agencyId) || !['up', 'down'].includes(direction)) {
            return res.status(400).json({ success: false, message: 'ÏûòÎ™ªÎêú ÏöîÏ≤≠ÏûÖÎãàÎã§.' });
        }

        if (dbMode === 'postgresql') {
            // ÌòÑÏû¨ Ïó¨ÌñâÏÇ¨Ïùò sort_order Ï°∞Ìöå
            const currentResult = await pool.query('SELECT sort_order FROM agencies WHERE id = $1', [agencyId]);
            if (currentResult.rows.length === 0) {
                return res.status(404).json({ success: false, message: 'Ïó¨ÌñâÏÇ¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' });
            }
            
            const currentOrder = currentResult.rows[0].sort_order || 999;
            let targetOrder;
            
            if (direction === 'up') {
                // ÏúÑÎ°ú Ïù¥Îèô: ÌòÑÏû¨Î≥¥Îã§ ÏûëÏùÄ sort_order Ï§ë Í∞ÄÏû• ÌÅ∞ Í∞í Ï∞æÍ∏∞
                const targetResult = await pool.query(
                    'SELECT id, sort_order FROM agencies WHERE sort_order < $1 ORDER BY sort_order DESC LIMIT 1',
                    [currentOrder]
                );
                if (targetResult.rows.length === 0) {
                    return res.json({ success: false, message: 'Ïù¥ÎØ∏ ÏµúÏÉÅÏúÑÏûÖÎãàÎã§.' });
                }
                targetOrder = targetResult.rows[0].sort_order;
                const targetId = targetResult.rows[0].id;
                
                // ÏàúÏÑú ÍµêÏ≤¥
                await pool.query('UPDATE agencies SET sort_order = $1 WHERE id = $2', [targetOrder, agencyId]);
                await pool.query('UPDATE agencies SET sort_order = $1 WHERE id = $2', [currentOrder, targetId]);
                
            } else { // down
                // ÏïÑÎûòÎ°ú Ïù¥Îèô: ÌòÑÏû¨Î≥¥Îã§ ÌÅ∞ sort_order Ï§ë Í∞ÄÏû• ÏûëÏùÄ Í∞í Ï∞æÍ∏∞
                const targetResult = await pool.query(
                    'SELECT id, sort_order FROM agencies WHERE sort_order > $1 ORDER BY sort_order ASC LIMIT 1',
                    [currentOrder]
                );
                if (targetResult.rows.length === 0) {
                    return res.json({ success: false, message: 'Ïù¥ÎØ∏ ÏµúÌïòÏúÑÏûÖÎãàÎã§.' });
                }
                targetOrder = targetResult.rows[0].sort_order;
                const targetId = targetResult.rows[0].id;
                
                // ÏàúÏÑú ÍµêÏ≤¥
                await pool.query('UPDATE agencies SET sort_order = $1 WHERE id = $2', [targetOrder, agencyId]);
                await pool.query('UPDATE agencies SET sort_order = $1 WHERE id = $2', [currentOrder, targetId]);
            }
            
        } else {
            // JSON Î™®Îìú Ï≤òÎ¶¨
            const agencies = await jsonDB.read('agencies') || [];
            const agencyIndex = agencies.findIndex(a => a.id === agencyId);
            
            if (agencyIndex === -1) {
                return res.status(404).json({ success: false, message: 'Ïó¨ÌñâÏÇ¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' });
            }
            
            if (direction === 'up' && agencyIndex > 0) {
                // ÏúÑÎ°ú Ïù¥Îèô
                [agencies[agencyIndex], agencies[agencyIndex - 1]] = [agencies[agencyIndex - 1], agencies[agencyIndex]];
                await jsonDB.write('agencies', agencies);
            } else if (direction === 'down' && agencyIndex < agencies.length - 1) {
                // ÏïÑÎûòÎ°ú Ïù¥Îèô
                [agencies[agencyIndex], agencies[agencyIndex + 1]] = [agencies[agencyIndex + 1], agencies[agencyIndex]];
                await jsonDB.write('agencies', agencies);
            } else {
                return res.json({ success: false, message: direction === 'up' ? 'Ïù¥ÎØ∏ ÏµúÏÉÅÏúÑÏûÖÎãàÎã§.' : 'Ïù¥ÎØ∏ ÏµúÌïòÏúÑÏûÖÎãàÎã§.' });
            }
        }
        
        res.json({ success: true, message: 'ÏàúÏúÑÍ∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.' });
        
    } catch (error) {
        console.error('Ïó¨ÌñâÏÇ¨ ÏàúÏúÑ Ï°∞Ï†ï Ïò§Î•ò:', error);
        res.status(500).json({ success: false, message: 'ÏàúÏúÑ Ï°∞Ï†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ
app.get('/admin/users', requireAuth, async (req, res) => {
    try {
        const users = await dbHelpers.getUsers();
        const currentPage = Number(req.query.page) || 1;
        const totalPages = 1; // ÏÑúÎ≤Ñ ÌéòÏù¥Ïßï ÎØ∏Íµ¨ÌòÑ ÏÉÅÌÉúÏùò Í∏∞Î≥∏Í∞í
        const search = req.query.search || '';
        const buildPageUrl = (p) => `/admin/users?page=${p}&search=${encodeURIComponent(search)}`;
        res.render('admin/users', {
            title: 'ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨',
            adminUsername: req.session.adminUsername || 'admin',
            search,
            totalUsers: Array.isArray(users) ? users.length : 0,
            currentPage,
            totalPages,
            buildPageUrl,
            users,
            success: null,
            error: null
        });
    } catch (error) {
        console.error('ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        const currentPage = Number(req.query.page) || 1;
        const totalPages = 1;
        const search = req.query.search || '';
        const buildPageUrl = (p) => `/admin/users?page=${p}&search=${encodeURIComponent(search)}`;
        res.render('admin/users', {
            title: 'ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨',
            adminUsername: req.session.adminUsername || 'admin',
            search,
            totalUsers: 0,
            currentPage,
            totalPages,
            buildPageUrl,
            users: [],
            success: null,
            error: 'ÏÇ¨Ïö©Ïûê Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.'
        });
    }
});

// ÏÇ¨Ïö© Ïù¥Î†• ÌéòÏù¥ÏßÄ
app.get('/admin/usages', requireAuth, async (req, res) => {
    try {
        const usages = await dbHelpers.getUsages();
        const storesData = await dbHelpers.getStores();
        const stores = Array.isArray(storesData)
            ? storesData.map(s => s.code || s.store_code || s.name).filter(Boolean)
            : [];
        const currentPage = Number(req.query.page) || 1;
        const totalPages = 1; // ÏÑúÎ≤Ñ ÌéòÏù¥Ïßï ÎØ∏Íµ¨ÌòÑ Í∏∞Î≥∏Í∞í
        const store_filter = req.query.store_filter || '';
        const date_from = req.query.date_from || '';
        const date_to = req.query.date_to || '';
        const sort_order = req.query.sort_order || 'desc';
        res.render('admin/usages', {
            title: 'ÏÇ¨Ïö© Ïù¥Î†•',
            adminUsername: req.session.adminUsername || 'admin',
            usages,
            totalUsages: Array.isArray(usages) ? usages.length : 0,
            currentPage,
            totalPages,
            stores,
            store_filter,
            date_from,
            date_to,
            sort_order,
            formatDate,
            success: null,
            error: null
        });
    } catch (error) {
        console.error('ÏÇ¨Ïö© Ïù¥Î†• ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        const currentPage = Number(req.query.page) || 1;
        const totalPages = 1;
        const store_filter = req.query.store_filter || '';
        const date_from = req.query.date_from || '';
        const date_to = req.query.date_to || '';
        const sort_order = req.query.sort_order || 'desc';
        res.render('admin/usages', {
            title: 'ÏÇ¨Ïö© Ïù¥Î†•',
            adminUsername: req.session.adminUsername || 'admin',
            usages: [],
            totalUsages: 0,
            currentPage,
            totalPages,
            stores: [],
            store_filter,
            date_from,
            date_to,
            sort_order,
            formatDate,
            success: null,
            error: 'ÏÇ¨Ïö© Ïù¥Î†•ÏùÑ Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.'
        });
    }
});

// Ï†úÌú¥ÏóÖÏ≤¥(Ïä§ÌÜ†Ïñ¥) Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ
app.get('/admin/stores', requireAuth, async (req, res) => {
    try {
        const stores = await dbHelpers.getStores();
        console.log('üîç Í¥ÄÎ¶¨Ïûê Ï†úÌú¥ÏóÖÏ≤¥ Ï°∞Ìöå Í≤∞Í≥º:', stores.length, 'Í∞ú');
        console.log('üìã Ï†úÌú¥ÏóÖÏ≤¥ ÏÉòÌîå Îç∞Ïù¥ÌÑ∞:', stores.slice(0, 2));
        res.render('admin/stores', {
            title: 'Ï†úÌú¥ÏóÖÏ≤¥ Í¥ÄÎ¶¨',
            adminUsername: req.session.adminUsername || 'admin',
            stores,
            success: null,
            error: null
        });
    } catch (error) {
        console.error('Ï†úÌú¥ÏóÖÏ≤¥ Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('admin/stores', {
            title: 'Ï†úÌú¥ÏóÖÏ≤¥ Í¥ÄÎ¶¨',
            adminUsername: req.session.adminUsername || 'admin',
            stores: [],
            success: null,
            error: 'Ï†úÌú¥ÏóÖÏ≤¥ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.'
        });
    }
});


// Ï†úÌú¥ Ïã†Ï≤≠ÏÑú Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ
app.get('/admin/partner-applications', requireAuth, async (req, res) => {
    try {
        let applications = [];
        if (dbMode === 'postgresql') {
            const result = await pool.query('SELECT * FROM partner_applications ORDER BY created_at DESC');
            applications = result.rows;
        } else {
            applications = await jsonDB.findAll('partner_applications');
        }
        res.render('admin/partner-applications', {
            title: 'Ï†úÌú¥ Ïã†Ï≤≠ÏÑú',
            adminUsername: req.session.adminUsername || 'admin',
            applications,
            success: null,
            error: null
        });
    } catch (error) {
        console.error('Ï†úÌú¥ Ïã†Ï≤≠ÏÑú ÌéòÏù¥ÏßÄ Ïò§Î•ò:', error);
        res.render('admin/partner-applications', {
            title: 'Ï†úÌú¥ Ïã†Ï≤≠ÏÑú',
            adminUsername: req.session.adminUsername || 'admin',
            applications: [],
            success: null,
            error: 'Ïã†Ï≤≠ÏÑú Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.'
        });
    }
});

// Ï†úÌú¥ Ïã†Ï≤≠ÏÑú Í∞úÎ≥Ñ ÏÇ≠Ï†ú ÎùºÏö∞Ìä∏
app.delete('/admin/partner-applications/:id', requireAuth, async (req, res) => {
    try {
        const { id } = req.params;
        
        if (dbMode === 'postgresql') {
            const result = await pool.query('DELETE FROM partner_applications WHERE id = $1 RETURNING *', [id]);
            if (result.rows.length === 0) {
                return res.json({
                    success: false,
                    message: 'Ïã†Ï≤≠ÏÑúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
                });
            }
        } else {
            const deleted = await jsonDB.delete('partner_applications', id);
            if (!deleted) {
                return res.json({
                    success: false,
                    message: 'Ïã†Ï≤≠ÏÑúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
                });
            }
        }
        
        res.json({
            success: true,
            message: 'Ï†úÌú¥ Ïã†Ï≤≠ÏÑúÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.'
        });
    } catch (error) {
        console.error('Ï†úÌú¥ Ïã†Ï≤≠ÏÑú ÏÇ≠Ï†ú Ïò§Î•ò:', error);
        res.json({
            success: false,
            message: 'Ï†úÌú¥ Ïã†Ï≤≠ÏÑú ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

// Ï†úÌú¥ Ïã†Ï≤≠ÏÑú Ï†ÑÏ≤¥ ÏÇ≠Ï†ú ÎùºÏö∞Ìä∏
app.delete('/admin/partner-applications/clear-all', requireAuth, async (req, res) => {
    try {
        if (dbMode === 'postgresql') {
            await pool.query('DELETE FROM partner_applications');
        } else {
            await jsonDB.deleteAll('partner_applications');
        }
        
        res.json({
            success: true,
            message: 'Î™®Îì† Ï†úÌú¥ Ïã†Ï≤≠ÏÑúÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.'
        });
    } catch (error) {
        console.error('Ï†úÌú¥ Ïã†Ï≤≠ÏÑú Ï†ÑÏ≤¥ ÏÇ≠Ï†ú Ïò§Î•ò:', error);
        res.json({
            success: false,
            message: 'Ï†úÌú¥ Ïã†Ï≤≠ÏÑú ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

// Ïó¨ÌñâÏÇ¨ Í∞úÎ≥Ñ Ï°∞Ìöå ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä (ÏàòÏ†ï Î™®Îã¨Ïö©)
app.get('/admin/agencies/:id', requireAuth, async (req, res) => {
    try {
        const { id } = req.params;
        const agency = await dbHelpers.getAgencyById(id);
        
        if (!agency) {
            return res.json({
                success: false,
                message: 'Ïó¨ÌñâÏÇ¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
            });
        }
        
        res.json({
            success: true,
            agency: agency
        });
        
    } catch (error) {
        console.error('Ïó¨ÌñâÏÇ¨ Ï°∞Ìöå Ïò§Î•ò:', error);
        res.json({
            success: false,
            message: 'Ïó¨ÌñâÏÇ¨ Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

// Ïó¨ÌñâÏÇ¨ ÏÇ≠Ï†ú ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä
app.delete('/admin/agencies/:id', requireAuth, async (req, res) => {
    try {
        const { id } = req.params;
        console.log(`Ïó¨ÌñâÏÇ¨ ÏÇ≠Ï†ú ÏöîÏ≤≠: ID ${id}`);
        
        const result = await dbHelpers.deleteAgency(id);
        
        if (result.hasUsers) {
            return res.json({
                success: false,
                hasUsers: true,
                message: result.message
            });
        }
        
        if (result.success) {
            res.json({
                success: true,
                message: 'Ïó¨ÌñâÏÇ¨Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.'
            });
        } else {
            res.json({
                success: false,
                message: 'Ïó¨ÌñâÏÇ¨ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.'
            });
        }
        
    } catch (error) {
        console.error('Ïó¨ÌñâÏÇ¨ ÏÇ≠Ï†ú Ïò§Î•ò:', error);
        res.json({
            success: false,
            message: 'Ïó¨ÌñâÏÇ¨ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

// Ïó¨ÌñâÏÇ¨ Í∞ïÏ†ú ÏÇ≠Ï†ú ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä
app.delete('/admin/agencies/:id/force', requireAuth, async (req, res) => {
    try {
        const { id } = req.params;
        console.log(`Ïó¨ÌñâÏÇ¨ Í∞ïÏ†ú ÏÇ≠Ï†ú ÏöîÏ≤≠: ID ${id}`);
        
        const result = await dbHelpers.forceDeleteAgency(id);
        
        if (result.success) {
            res.json({
                success: true,
                message: 'Ïó¨ÌñâÏÇ¨ÏôÄ Í¥ÄÎ†®Îêú Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.'
            });
        } else {
            res.json({
                success: false,
                message: 'Ïó¨ÌñâÏÇ¨ Í∞ïÏ†ú ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.'
            });
        }
        
    } catch (error) {
        console.error('Ïó¨ÌñâÏÇ¨ Í∞ïÏ†ú ÏÇ≠Ï†ú Ïò§Î•ò:', error);
        res.json({
            success: false,
            message: 'Ïó¨ÌñâÏÇ¨ Í∞ïÏ†ú ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});




// Í¥ëÍ≥†Î∞∞ÎÑà Í∞úÎ≥Ñ Ï°∞Ìöå ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä (ÏàòÏ†ï Î™®Îã¨Ïö©)
app.get('/admin/banners/:id', requireAuth, async (req, res) => {
    try {
        const { id } = req.params;
        
        if (dbMode === 'postgresql') {
            const result = await pool.query('SELECT * FROM banners WHERE id = $1', [id]);
            const banner = result.rows[0];
            
            if (!banner) {
                return res.json({
                    success: false,
                    message: 'Í¥ëÍ≥†Î∞∞ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
                });
            }
            
            res.json({
                success: true,
                banner: banner
            });
        } else {
            const banner = await jsonDB.findById('banners', id);
            if (!banner) {
                return res.json({
                    success: false,
                    message: 'Í¥ëÍ≥†Î∞∞ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
                });
            }
            
            res.json({
                success: true,
                banner: banner
            });
        }
        
    } catch (error) {
        console.error('Í¥ëÍ≥†Î∞∞ÎÑà Ï°∞Ìöå Ïò§Î•ò:', error);
        res.json({
            success: false,
            message: 'Í¥ëÍ≥†Î∞∞ÎÑà Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

// Í¥ëÍ≥†Î∞∞ÎÑà ÏàòÏ†ï ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä
app.put('/admin/banners/:id', requireAuth, async (req, res) => {
    try {
        const { id } = req.params;
        const bannerData = req.body;
        
        const banner = await dbHelpers.updateBanner(id, bannerData);
        
        if (!banner) {
            return res.json({
                success: false,
                message: 'Í¥ëÍ≥†Î∞∞ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
            });
        }
        
        res.json({
            success: true,
            message: 'Í¥ëÍ≥†Î∞∞ÎÑàÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.',
            banner: banner
        });
        
    } catch (error) {
        console.error('Í¥ëÍ≥†Î∞∞ÎÑà ÏàòÏ†ï Ïò§Î•ò:', error);
        res.json({
            success: false,
            message: 'Í¥ëÍ≥†Î∞∞ÎÑà ÏàòÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

// Í¥ëÍ≥†Î∞∞ÎÑà ÏÇ≠Ï†ú ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä
app.delete('/admin/banners/:id', requireAuth, async (req, res) => {
    try {
        const { id } = req.params;
        
        const banner = await dbHelpers.deleteBanner(id);
        
        if (!banner) {
            return res.json({
                success: false,
                message: 'Í¥ëÍ≥†Î∞∞ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
            });
        }
        
        res.json({
            success: true,
            message: 'Í¥ëÍ≥†Î∞∞ÎÑàÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.'
        });
        
    } catch (error) {
        console.error('Í¥ëÍ≥†Î∞∞ÎÑà ÏÇ≠Ï†ú Ïò§Î•ò:', error);
        res.json({
            success: false,
            message: 'Í¥ëÍ≥†Î∞∞ÎÑà ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
        });
    }
});

// ÏÑúÎ≤Ñ ÏãúÏûë Î∞è Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî
app.listen(PORT, async () => {
    console.log(`üöÄ Í¥åÏÑ∏Ïù¥Î∏åÏπ¥Îìú ÏÑúÎ≤ÑÍ∞Ä Ìè¨Ìä∏ ${PORT}ÏóêÏÑú Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§.`);
    console.log(`üìä Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î™®Îìú: ${dbMode.toUpperCase()}`);
    
    if (dbMode === 'postgresql') {
        try {
            // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
            await testConnection();
            
            // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Ìï®Ïàò
            async function initializeDatabase() {
                if (dbMode === 'postgresql') {
                    try {
                        console.log('PostgreSQL Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Ï§ë...');
                        
                        // ÌÖåÏù¥Î∏î Ï°¥Ïû¨ ÌôïÏù∏ Î∞è ÏÉùÏÑ±
                        await createTables();
                        
                        // Î™®Îì† Ïª¨Îüº Î≥¥Ï†ï
                        await ensureAllColumns();
                    } catch (error) {
                        console.error('Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Ïò§Î•ò:', error);
                    }
                }
            }
            await initializeDatabase();
            
            // JSON Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò (ÏµúÏ¥à 1ÌöåÎßå)
            try {
                await migrateFromJSON();
                console.log('üîÑ Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');
            } catch (error) {
                console.warn('‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Í±¥ÎÑàÎúÄ:', error.message);
            }
            
            // logo_url Ïª¨Îüº Ï°¥Ïû¨ ÌôïÏù∏ Î∞è Ï∂îÍ∞Ä Ìï®Ïàò
            async function ensureLogoUrlColumn() {
                try {
                    // agencies ÌÖåÏù¥Î∏îÏóê logo_url Ïª¨ÎüºÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
                    const columnCheck = await pool.query(`
                        SELECT column_name 
                        FROM information_schema.columns 
                        WHERE table_name = 'agencies' AND column_name = 'logo_url'
                    `);
                    
                    if (columnCheck.rows.length === 0) {
                        console.log('logo_url Ïª¨ÎüºÏù¥ ÏóÜÏäµÎãàÎã§. Ï∂îÍ∞ÄÌïòÎäî Ï§ë...');
                        await pool.query('ALTER TABLE agencies ADD COLUMN logo_url VARCHAR(500)');
                        console.log('‚úÖ logo_url Ïª¨ÎüºÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.');
                    } else {
                        console.log('‚úÖ logo_url Ïª¨ÎüºÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§.');
                    }
                } catch (error) {
                    console.warn('‚ö†Ô∏è logo_url Ïª¨Îüº ÌôïÏù∏/Ï∂îÍ∞Ä Í±¥ÎÑàÎúÄ:', error.message);
                }
            }
            
            
            // Ï†úÌú¥ÏóÖÏ≤¥ ÏûêÎèô ÏÇ≠Ï†ú ÎπÑÌôúÏÑ±Ìôî (ÏàòÎèô Í¥ÄÎ¶¨ Î™®Îìú)
            console.log('üìã Ï†úÌú¥ÏóÖÏ≤¥ ÏàòÎèô Í¥ÄÎ¶¨ Î™®Îìú - Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ');
            
        } catch (error) {
            console.error('‚ùå PostgreSQL Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•ò:', error);
            console.warn('‚ö†Ô∏è JSON Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Î°ú fallback Ìï©ÎãàÎã§.');
            dbMode = 'json';
            if (!jsonDB) {
                jsonDB = require('./utils/jsonDB');
            }
        }
    } else {
        console.log('üìÅ JSON ÌååÏùº Í∏∞Î∞ò Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§.');
        console.log('‚ö†Ô∏è Ï£ºÏùò: Railway Î∞∞Ìè¨ Ïãú Îç∞Ïù¥ÌÑ∞Í∞Ä Ï¥àÍ∏∞ÌôîÎê† Ïàò ÏûàÏäµÎãàÎã§.');
    }
});

// ==================== Î∞úÍ∏â ÏΩîÎìú Í¥ÄÎ¶¨ API ====================

// ÎûúÎç§ ÏΩîÎìú ÏÉùÏÑ± Ìï®Ïàò (a1234b ÌòïÌÉú)
function generateIssueCode() {
    const letters = 'abcdefghijklmnopqrstuvwxyz';
    const numbers = '0123456789';
    
    // Ï≤´ Í∏ÄÏûê: ÏÜåÎ¨∏Ïûê
    let result = letters.charAt(Math.floor(Math.random() * letters.length));
    
    // Ï§ëÍ∞Ñ 4ÏûêÎ¶¨: Ïà´Ïûê
    for (let i = 0; i < 4; i++) {
        result += numbers.charAt(Math.floor(Math.random() * numbers.length));
    }
    
    // ÎßàÏßÄÎßâ Í∏ÄÏûê: ÏÜåÎ¨∏Ïûê
    result += letters.charAt(Math.floor(Math.random() * letters.length));
    
    return result;
}

// Î∞úÍ∏â ÏΩîÎìú Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ
app.get('/admin/issue-codes', requireAuth, async (req, res) => {
    try {
        if (dbMode === 'postgresql') {
            // ÌÜµÍ≥Ñ Ï°∞Ìöå
            const statsQuery = await pool.query(`
                SELECT 
                    COUNT(*) as total_codes,
                    COUNT(CASE WHEN is_used = false THEN 1 END) as unused_codes,
                    COUNT(CASE WHEN is_used = true THEN 1 END) as used_codes,
                    COUNT(CASE WHEN is_delivered = false THEN 1 END) as undelivered_codes,
                    COUNT(CASE WHEN is_delivered = true THEN 1 END) as delivered_codes,
                    CASE 
                        WHEN COUNT(*) > 0 THEN ROUND((COUNT(CASE WHEN is_used = true THEN 1 END)::numeric / COUNT(*)::numeric) * 100, 1)
                        ELSE 0 
                    END as usage_rate,
                    CASE 
                        WHEN COUNT(*) > 0 THEN ROUND((COUNT(CASE WHEN is_delivered = true THEN 1 END)::numeric / COUNT(*)::numeric) * 100, 1)
                        ELSE 0 
                    END as delivery_rate
                FROM issue_codes
            `);
            
            // ÏΩîÎìú Î™©Î°ù Ï°∞Ìöå (ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ìè¨Ìï®)
            const codesQuery = await pool.query(`
                SELECT 
                    ic.*,
                    u.name as user_name
                FROM issue_codes ic
                LEFT JOIN users u ON ic.used_by_user_id = u.id
                ORDER BY ic.created_at DESC
                LIMIT 100
            `);
            
            const stats = statsQuery.rows[0];
            const codes = codesQuery.rows;
            
            res.render('admin/issue-codes', {
                title: 'Î∞úÍ∏â ÏΩîÎìú Í¥ÄÎ¶¨',
                adminUsername: req.session.adminUsername || 'admin',
                stats: stats,
                codes: codes
            });
        } else {
            // JSON Î™®Îìú (Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞)
            res.render('admin/issue-codes', {
                title: 'Î∞úÍ∏â ÏΩîÎìú Í¥ÄÎ¶¨',
                adminUsername: req.session.adminUsername || 'admin',
                stats: { total_codes: 0, unused_codes: 0, used_codes: 0, undelivered_codes: 0, delivered_codes: 0, usage_rate: 0, delivery_rate: 0 },
                codes: []
            });
        }
    } catch (error) {
        console.error('Î∞úÍ∏â ÏΩîÎìú ÌéòÏù¥ÏßÄ Î°úÎìú Ïò§Î•ò:', error);
        res.status(500).render('error', { 
            title: 'Ïò§Î•ò', 
            message: 'Î∞úÍ∏â ÏΩîÎìú ÌéòÏù¥ÏßÄÎ•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.' 
        });
    }
});

// Î∞úÍ∏â ÏΩîÎìú ÏÉùÏÑ± API
app.post('/admin/issue-codes/generate', requireAuth, async (req, res) => {
    try {
        const { count = 1, notes = '' } = req.body;
        const codeCount = Math.min(Math.max(parseInt(count), 1), 100); // 1-100Í∞ú Ï†úÌïú
        
        if (dbMode === 'postgresql') {
            const generatedCodes = [];
            
            for (let i = 0; i < codeCount; i++) {
                let code;
                let isUnique = false;
                let attempts = 0;
                
                // Ï§ëÎ≥µÎêòÏßÄ ÏïäÎäî ÏΩîÎìú ÏÉùÏÑ± (ÏµúÎåÄ 10Ìöå ÏãúÎèÑ)
                while (!isUnique && attempts < 10) {
                    code = generateIssueCode();
                    const existingCode = await pool.query('SELECT id FROM issue_codes WHERE code = $1', [code]);
                    if (existingCode.rows.length === 0) {
                        isUnique = true;
                    }
                    attempts++;
                }
                
                if (isUnique) {
                    await pool.query(
                        'INSERT INTO issue_codes (code, notes) VALUES ($1, $2)',
                        [code, notes]
                    );
                    generatedCodes.push(code);
                } else {
                    console.warn('ÏΩîÎìú ÏÉùÏÑ± Ïã§Ìå®: Ï§ëÎ≥µ Î∞©ÏßÄ ÏãúÎèÑ Ï¥àÍ≥º');
                }
            }
            
            res.json({ 
                success: true, 
                message: `${generatedCodes.length}Í∞úÏùò ÏΩîÎìúÍ∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.`,
                codes: generatedCodes
            });
        } else {
            res.json({ success: false, message: 'PostgreSQL Î™®ÎìúÏóêÏÑúÎßå ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.' });
        }
    } catch (error) {
        console.error('Î∞úÍ∏â ÏΩîÎìú ÏÉùÏÑ± Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏΩîÎìú ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// Î∞úÍ∏â ÏΩîÎìú ÏàòÏ†ï API
app.put('/admin/issue-codes/:id', requireAuth, async (req, res) => {
    try {
        const { id } = req.params;
        const { notes } = req.body;
        
        if (dbMode === 'postgresql') {
            await pool.query(
                'UPDATE issue_codes SET notes = $1 WHERE id = $2 AND is_used = false',
                [notes, id]
            );
            
            res.json({ success: true, message: 'ÏΩîÎìúÍ∞Ä ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.' });
        } else {
            res.json({ success: false, message: 'PostgreSQL Î™®ÎìúÏóêÏÑúÎßå ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.' });
        }
    } catch (error) {
        console.error('Î∞úÍ∏â ÏΩîÎìú ÏàòÏ†ï Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏΩîÎìú ÏàòÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// Î∞úÍ∏â ÏΩîÎìú ÏÇ≠Ï†ú API
app.delete('/admin/issue-codes/:id', requireAuth, async (req, res) => {
    try {
        const { id } = req.params;
        
        if (dbMode === 'postgresql') {
            await pool.query('DELETE FROM issue_codes WHERE id = $1 AND is_used = false', [id]);
            res.json({ success: true, message: 'ÏΩîÎìúÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.' });
        } else {
            res.json({ success: false, message: 'PostgreSQL Î™®ÎìúÏóêÏÑúÎßå ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.' });
        }
    } catch (error) {
        console.error('Î∞úÍ∏â ÏΩîÎìú ÏÇ≠Ï†ú Ïò§Î•ò:', error);
        res.json({ success: false, message: 'ÏΩîÎìú ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
});

// Î∞úÍ∏â ÏΩîÎìú Í≤ÄÏ¶ù Ìï®Ïàò
async function validateIssueCode(code) {
    if (dbMode === 'postgresql') {
        try {
            const result = await pool.query(
                'SELECT id, is_used FROM issue_codes WHERE code = $1',
                [code.toLowerCase()]
            );
            
            if (result.rows.length === 0) {
                return { valid: false, message: 'Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Î∞úÍ∏â ÏΩîÎìúÏûÖÎãàÎã§.' };
            }
            
            if (result.rows[0].is_used) {
                return { valid: false, message: 'Ïù¥ÎØ∏ ÏÇ¨Ïö©Îêú Î∞úÍ∏â ÏΩîÎìúÏûÖÎãàÎã§.' };
            }
            
            return { valid: true, codeId: result.rows[0].id };
        } catch (error) {
            console.error('Î∞úÍ∏â ÏΩîÎìú Í≤ÄÏ¶ù Ïò§Î•ò:', error);
            return { valid: false, message: 'ÏΩîÎìú Í≤ÄÏ¶ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' };
        }
    }
    
    return { valid: false, message: 'PostgreSQL Î™®ÎìúÏóêÏÑúÎßå ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.' };
}
